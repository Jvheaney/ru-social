%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: m0045_33.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For:  
%%CreationDate: 7/3/2019
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.3 x585 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 12556 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD25FFA9AFAFFD49FFAFFD31
%FFAFA9FF85FF85FD46FFAFA98585FFAFFD2EFF85AF85AFAFAFA9FD44FFAF
%85FF85FFAF8BFD2FFFA985858BFD46FFA9AF858585AFA9FD2EFFA9AF858B
%85FFAFFD46FFAF85AFA9FD2FFF8585FF85FF85AFFD44FF85AF858B85AF85
%FD2EFFAFFFAFAFAFFD21FFAFFD25FF85FFAFFFAFAFFD31FFA9FD1FFFAFFF
%85AFA9FD25FFA98B85FFAFFD51FFAF85AF85AFAFFD7BFFAF8585A9FD7BFF
%AFA9AF85AFAFFD7AFFA9FF85AF85FD7DFFAFAFFDFCFFFD90FFA87D52847D
%A8A9AFAFFD04FFAF85AFFD6FFF5359858B85AF858B85AF85AFFFAF858B85
%AFFD6DFFA82E59FD04858B8585858B85AF858B848585AFFD6BFF7D598452
%7E8585AF858B85AF858B85AF7E2759AFAFFD68FF7DA85959858428528585
%858B8585858B85855A00058585FD67FFA82E852E5985AF855985AF858B85
%AF858B85AF858B848485AFFD67FF2E8560528585858B8585858B8585858B
%8585858B858585AFFD67FFA984855A848B85AF858B5959852828AF858B85
%AF858B85AF85FD68FF5A852E8B8585858B8584598B8585858B8585858B85
%85858B85FD1DFF85FD4AFFA95985AF858B85AF858585AF2E8B85AF858B85
%AF858B85AFAFFD1BFF85AF85AFFD49FF5985858B8585858B2785857E8585
%858B8585858B8585858BFD1AFFA9AF85AFA9FD49FF8485AF858B85AF858B
%85AF85842E8B858B85A99B8B85AF85AFFD1AFFAFAFA9FD4AFF5985858B85
%855A592E532727F8F82E8B85859AB68485858B607DFD1AFFA9FD4BFFAF85
%8B85AF85FD05F85227278585AF858B84AF858B858452FD66FF858B9B9B85
%8B28FD05F82E8B8585858B8585858B85855A2EFD4AFFAF85FD19FFAFAF85
%A19AAF858B5A59525984AF858B85AF858B85AF858B85AF59FD48FF85AFA9
%AFAFAFA9FD16FFAF858B8585858B8585858B8585858B8585858B8585858B
%85858559A8FD47FFAF85AF85AF85FD17FF858B85AF858B85AF858B85AF85
%5984AF858B85AF858B85AF858B847DFD48FFAF858585FD18FFAF8585858B
%8585858B855359595A85858B8585858B8585858B85852EFD07FFA9AF85AF
%A9FD3BFFAF85AF85AFA9FD17FFA98B85AF858B85AF858B85AF858B85AF85
%8B85AF858B85AF858B855AA8FD07FFAF8B85FD3CFF85FFAFAFA9AFAFFD16
%FFAF8585858B8585858B8585858B8585858B8585858B8585858B85858559
%FD06FFA9AF85AFA9FD3DFFAF85FD19FFA9AF858B85AF858B85AF858B85AF
%858B85AF858B85AF858B85AF858B2EFD07FFAFAFAFFD5AFF858B8585858B
%8585858B2E5A858B8585858B8585858B8585858B85847EFD07FFA9FD5BFF
%85858B85AF858B85AF858B277E7E8B85AF858B85AF858B85AF858B85AFFD
%63FFA8598585858B8585858B85855AFD04858B8585858B8585858B858585
%FD64FF535A858B85AF858B85AF858B85AF858B85AF858B85AF858B85AF85
%8BA9FD56FFA9AF85FFA9FD07FFA98559538485858B8585858B8585858B85
%85858B8585858B8585858B8585A9FD55FFAF85AF85AFFD08FF85AF85592E
%85858B85AF858B85AF858B85AF858B85AF858B85AF858B85FD56FFAFAF85
%AFAFFD07FF8585858B8585597E8585858B8585858B8585858B8585858B85
%85858B858585FD55FFAFAFAFA9AFFD06FF85AF858B85AF858B85AF858B85
%AFFD04FFA98B85AF858B85AF858B85AF858BAFFD54FFA9FF85FFA9FD05FF
%A985858B8585858B8585858B85FFA8FFA9FFA8FFA985858B8585858B8585
%858B85AFFD5DFFAF8B85AF858B85AF858B85AF85FD04FFCFCAFFFFFFA9AF
%858B85AF858B85AF858B85FD5CFFAFAF8585858B8585858B858585AFFFFF
%A8C8C0C79FCFFFFF858B8585858B8585858B8585A9FD5BFFAF85AF858B85
%AF858B85AF858BA9FFFFC9C0C7C1C7C1FFFFFF85AF858B85AF858B85AF85
%AFFD5BFF8585858B8585858B8585858B85FFA8FF9FC79EC7C0C7A7FFA9AF
%858B8585858B8585858B85AFFD59FFAF8B85AF858B85AF858B85AF85AFFF
%FFBCB5B5BC5355315B85FFAFAF858B85AF858B85AF858BA9FD36FFA9AFA9
%AFFD1EFFA98B8585858B8585858B8585858BAFCB93B5B5B54D3131312A31
%85FF858B8585858B8585858B8585AFFD34FFAFAF85AF85FD1EFFAF85AF85
%8B85AF858B85AF858B85FFC3B5B5B5933131553131315BFFAF85AF858B85
%AF858B85AF85AFFD35FFA98B85AFA9FD1DFF8585858B8585858B8585858B
%85AFA8C393B5939431312A3131312AFFA985858B8585858B8585858B85FD
%34FFFD04AF85FD1DFFAF8B85AF858B5AAF858B85AF858BAFFFC3B5B5936F
%5329553155315BFFFF85AF858B85AF858B85AF858BFD35FFAFAFA9FD1EFF
%8B8585858B8553858B8585858B85FFA9FFBB7474C098984A5128317FFFFF
%AF858B8585858B8585858B85AFFD55FF85AF858B85AF5A8585AF858B85AF
%FFFFFFCAFD08C0A0FFFFFFAF8B85AF858B85AF858B85AF85FD54FF858585
%8B858585845985858B858585FFA9FFA8C09EC098C09EC098C9A9FFA8FF85
%852F8B8585858B8585858BAFFD53FF8B85AF858B85AF855985AF858B85AF
%FD04FF5158527D525851C0FD05FFAF8559858B85AF858B85AF85AFFD53FF
%8585858B8585858B2F85858B8585A9FFFF592EFD04858B85852EA8FFFFA9
%FFA95A5A8B8585858B8585858B85FD52FFA9AF858B85AF858B8559858B85
%AF85FFA8535A8B85AF858B85842E592EFD05FF2E8B85AF858B85AF858B85
%AFFD52FFAF858B8585858B858559FD04858B7D59858B8585858B8585858B
%5A2E7EFFA9FFA8598585858B8585858B858585AFFD51FF85AF858B85AF85
%8B858B538B85AF528485AF858B85AF858B85AF858B857DFFFFFF84848B85
%AF858B85AF858B85AF85FD39FFA95BFD07FF7D5227527DFD09FFAF85858B
%8585858B85858559858427FD04858B8585858B85852E53538559FFFFFF52
%8B8585858B8585858B8585858BAFFD37FFA931315BFD05FF7DFD05F827FD
%08FFAF858B85AF858B85AF858B537E2E8B85AF858B85AF858B85AF858B85
%8553A8FFFFFF5985AF858B85AF858B85AF858B85FD38FF547F5B7FA8FFFF
%FFA8F8F8F8277D5252F8FD07FF858B8585858B8585858B85532E8B858585
%8B8585858B8585858B85858553A9FFA87E5A85858B8585858B8585858B85
%8585FD37FF5B555531FD04FF7DF8F852FD05FF27FD06FFAF858B85AF858B
%85AF85535AAF858B85AF858B85AF858B858B5A845359A8FFFFFF528B85AF
%858B85AF858B85AF858B85AFFD37FF2A7F7F5BFD04FF27F827FFA8A8FFA8
%A8527DFD05FF858B8585858B8585857E8485858B8585858B8585858B6052
%519FFFFFA9FFFFFFA9538585858B8585858B8585858B858585FD36FFA955
%555B5BFFFFFFA8F8F8A8FFA8A8FF7D7DA827FD05FF8B85AF858B85AF858B
%85AF858B85AF858B85AF858B5A53C9C0C9FD06FFA85AAF858B85AF858B85
%AF858B85AF858BA9FD35FFA93155547FFFFFFF7DF8F8A8FF7D52A6C6A6FF
%F87DFD04FF8585858B8585858B8585858B8585858B8585858B5A7DA8CF9E
%FFA8FFA9FFA8FF5285858B8585858B8585858B8585858B85AFFD36FFA875
%A9A9FFFFFF27F852FFCACBCFC7C6C7C1A027FD04FFAF85AF858B85AF858B
%85AF858B85AF858B85AF7E53FFFFFFC8FD07FF5985AF858B85AF858B85AF
%858B85AF858B85FD36FFF8267DFFFFFF7DF8F8A8FFFFCACE9E9E74C69E50
%7DFFFFFF8585858B8585858B8585858B8585858B85858459FFFFA9FFCAFF
%A9FFFFFFA9FF5385858B8585858B8585858B8585858B8585AFFD35FF5174
%F8277DA852F8F8FD05FFCFCAA7CFFFF852FFFFFFAF842785AF858B85AF85
%8B85AF858B85AF8552A8FD0BFF7D84858B85AF858B85AF858B85AF858B85
%AF85FD36FF7450FD06F827FD0AFF52F8FFFFFF85595984858B8585858B85
%85858B85858559A8FFA8FFA9FFA8FFA9FFA8FFA953858B8585858B858585
%8B8585858B8585858BA9FD35FFCF20FD06F8A8FD0AFF7DF827FFFFAF858B
%2EAF858B85AF858B85AF858B85847DFD0DFF53AF858B85AF858B85AF858B
%85AF858B85AF85AFFD36FF7DFD06F8A8FD0BFFF8F87DFF858B855A598B85
%85858B8585858B85852EFFFFFFA9FFFFFFA9FFFFFFA9FFFF59858B858585
%8B8585858B8585858B8585858BA9FD37FFA827F8F8F827FD0CFF27F8F87D
%AF85AF855384AF858B85AF858B85AF52FD0EFFA85A8B85AF858B85AF858B
%85AF858B85AF858B85AFFD39FFF8F8F852FD0CFF52F8F8F87E85858B8453
%858B8585858B858553A8A9FFA8FFA9FFA8FFA9FFA8FFA9FF528B8585858B
%8585858B8585858B8585858B858585FD38FFA8F8F8F87DFD0CFFA8F8F8F8
%2785AF858B8553858B85AF858B597EFD0FFF7E858B85AF858B85AF858B85
%AF858B85AF528B85AFFD38FF52F8F8F8FD0EFFFD04F827858B858584532F
%84845A2EA8A9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFF538B8585858B858585
%8B8585858B8585847E8585A9FD38FFF8F8F827FD0EFF27FD04F82E85AF85
%8B85AF5A84A8FD12FF5985AF858B85AF858B85AF858B85AF85845AAF85AF
%FD37FF7DF8F8F827FD0EFF52FD05F859858B8585858BA9FFA8FFA9FFA8FF
%A9FFA8FFA9FFA8FFA9FFA8A85985858B8585858B8585858B8585858B2E85
%858B85AFFD36FF52F8F8F87DFD0EFF7DF82727F8F8F884858B85AF85AFFD
%12FF7D8B85AF858B85AF858B85AF858B85AF855985AF858B85A9A8FD34FF
%FD04F87DFD0EFFA8F8278585595A848B8585858B85FFA9FFFFFFA9FFFFFF
%A9FFFFFFA9FFFFFFA9598585858B8585858B8585858B85855A8B2F85858B
%8585855953FD32FF7DFD04F8A8FD0EFFA8F8278B85AF858B85AF858B85AF
%AFFD11FF53AF858B85AF858B85AF858B85AF85522E84858B85AF858B8584
%7EFFA8A8A8FD2DFF52FD04F8FD10FFF8F88585858B8585858B8585858BA9
%FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA959858B8585858B8585858B858585
%5A5A85858B8585858B858585842E592E597DFD2CFFFD05F8FD10FFF8F88B
%85AF858B85AF858B85AF85AFAFFD0FFF53AF858B85AF858B85AF858B85AF
%528B85AF858B85AF858B85AF848B85AF2E7E84FD2AFF7DFD05F8FD10FFF8
%F88585858B8585858B8585858B8585A9FFFFFFA9FFFFFFA9FFFFFFA9FFFF
%59858B8585858B8585858B858585538585858B8585858B8585857E2F8485
%848584FD2AFF7DFD05F8FD10FFF8F8AF858B8585858B85AF858B85AF858B
%85FD0DFF5A8B85AF858B85AF858B85AF855A84AF858B85AF858B85AF858B
%85AF538B85AFAFFD2AFF52FD05F8FD10FFF8F8858B85852EFD04858B8585
%858B858585AFA9AFA8FFA9FFA8FFA9AF59FD04858B8585858B8585858B2E
%85858B8585858B8585858B8585855A7EB684AFFD2AFF52FD05F8FD0FFFA8
%F805AF858B858B528B85AF858B85AF858B85AF858B85AF858B85AF858B85
%59858B85AF858B85AF858B85AF845985AF858B85AF858B85AF858B85AF85
%BCB5A9AFFD2AFF27FD05F87DFD0EFF52F828858B858585842E85858B8585
%858B8585858B8585858B8585858B85852E8B8585858B8585858B85858553
%8585858B8585858B8585858B858585A1B5B57DFD04AFFD27FF52FD05F852
%FD0EFFF8F8538B85AF858B85842E8B85AF858B85AF858B85AF858B85AF85
%8B85AF598585AF858B85AF858B85AF858453AF858B85AF858B85AF858B85
%AF85A9B5B5B5A1A9FFAFFFAFFD22FFAFFFA9FF52FD06F8A8FD0CFF52F8F8
%FD04858BFD04852E85858B8585858B8585858B8585858B85856053858585
%8B8585858B8585858B2E85858B8585858B8585858B8585858B9AB593B57D
%AFA9FFAFAFA9FD20FFAFFFAFFF52FD08F87DFD0AFF52F8F859858B85AF85
%8B85AF858B2E5A858B85AF858B85AF858B85AF858B8559858585AF858B85
%AF858B85AF538485AF858B85AF858B85AF858B85AF85BCB5B69BAFAFFFAF
%FFAFFFAFFD1EFFA9FFAFAFA9A827FD09F8277D7DA87DA85252F8F8F82785
%8B8585858B8585858B85855A535985858B8585858B8585858B858453525A
%855A8B8585858B85855A598585858B8585858B8585858B8585858B9A9A7E
%AFAFAFA9FFAFAFA9FFAFFD1CFFAFFFAFFFAFFFAFFF8427FD04F8744BFD0B
%F875A08B85AF858B85AF858B85AF858B85842E5984AF858B85AF858B85AF
%53845AAF538585AF858B85AF5A5285AF858B85AF858B85AF858B85AF858B
%858585AFAFFFAFFFAFFFAFFFAFFFAFFD18FFAFAFA9FFAFAFA9FFAFAFA9FF
%AF8427F820BA9874FD08F8269898A08585858B8585858B8585857E595A59
%5353532E595A85858B858585595A8559FD04858B85842859858B8584595A
%858B8585858B8585595A525953FFAFAFA9FFAFAFA9FFAFAFA9FFAFFD18FF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFC298C198992752275252A898754AC1
%995952A87E7D527D52597EA884A8A9FFAFFFAFFFAF84538452595A845359
%8585858B858B595959FFAFFFAFFFAFAF7EA87D59527D527D7EA8AFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFD18FFAFAFA9FFAFAFA9FFAFAFA9FFAFAF
%A9FF98BA6E746EC2A9FFAFAFA9A89F9FA0FFAFAFA9FFAFAFA9FFAFAFA9FF
%AFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FF7D535984535959AFAFAFA9FFAFAF
%A9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FF
%AFFD16FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFA8C9A0A09FC9A8FFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD17FFAFA9FFAFAFA9FFAF
%AFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9
%FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAF
%AFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9
%FFAFAFA9FFAFFFAFFD18FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD22FFAFFFFFFFAF
%FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9
%FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFFD5AFFAF
%FFFFFFAFFFFFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDADFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 33 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">m0045</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2019-07-03T11:52:23+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-07-03T11:52:23+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-07-03T11:52:22+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>244</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7x+YHmfWdJjhg0hU9eRJ&#xA;mklYeoysImMSrH+0S4qfADpTprtbrRjPCPq2+VubptOJgmXJD2XnHzFZeWdIuNVs4rvU9ThWSJop&#xA;PTjLMqvRz6dF2bag3p2wZNd4UYmQu7+SjTRnIiJ5KX5eav5/1LU75teMH6OhSNY0UIsizMoLABOV&#xA;QCrfabvUeAnotQctm7C6rFCHLmzHWdXsdH0u51O+Ypa2qc5Co5Md6BVA6sxIAHjmZkmIRMpbAONi&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:f4bf3428-28b0-3e45-ab6b-8691a6285cba</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:f4bf3428-28b0-3e45-ab6b-8691a6285cba</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:e7fc599d-cf24-6f4b-88f3-f596b0ddfe26</stRef:instanceID>
            <stRef:documentID>xmp.did:e7fc599d-cf24-6f4b-88f3-f596b0ddfe26</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:55fbb7ee-747f-0545-962a-87872ef268b0</stEvt:instanceID>
                  <stEvt:when>2019-03-01T18:29:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f4bf3428-28b0-3e45-ab6b-8691a6285cba</stEvt:instanceID>
                  <stEvt:when>2019-07-03T11:52:23+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1297.284167</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
119.225 874.797 mo
128.362 890.645 248.109 877.189 567.673 891.122 cv
880.26 904.749 975.679 891.978 937.16 826.448 cv
910.422 780.961 758.365 722.611 448.405 750.543 cv
163.919 776.179 104.465 849.195 119.225 874.797 cv
cp
.870588 .972549 1 rgb
f
532.457 838.616 mo
532.457 838.616 362.521 855.591 311.766 836.856 cv
296.779 831.324 284.533 823.56 280.425 804.307 cv
277.955 792.731 274.119 766.547 284.284 754.406 cv
300.061 735.561 321.343 749.416 321.343 749.416 cv
321.343 749.416 360.522 697.851 421.753 715.072 cv
461.676 726.3 532.457 838.616 532.457 838.616 cv
cp
.592157 .87451 1 rgb
f
278.78 766.169 mo
278.723 766.169 278.666 766.16 278.61 766.14 cv
278.35 766.046 278.216 765.76 278.309 765.5 cv
282.134 754.879 288.043 748.187 295.874 745.61 cv
309.545 741.112 324.481 750.941 324.63 751.042 cv
324.86 751.195 324.922 751.505 324.768 751.735 cv
324.615 751.964 324.305 752.026 324.075 751.873 cv
323.929 751.775 309.384 742.212 296.181 746.562 cv
288.661 749.039 282.964 755.524 279.25 765.839 cv
279.177 766.042 278.984 766.169 278.78 766.169 cv
cp
0 0 0 rgb
f
399.31 846.752 mo
365.058 846.752 331.139 844.541 311.593 837.326 cv
311.334 837.23 311.201 836.942 311.297 836.683 cv
311.393 836.424 311.68 836.292 311.939 836.387 cv
362.006 854.868 507.183 840.345 508.644 840.196 cv
508.918 840.173 509.164 840.368 509.192 840.643 cv
509.22 840.917 509.02 841.163 508.745 841.191 cv
507.851 841.282 453.17 846.752 399.31 846.752 cv
cp
f
311.765 782.967 mo
311.68 782.967 311.594 782.945 311.515 782.899 cv
311.276 782.761 311.195 782.455 311.333 782.216 cv
311.581 781.789 317.493 771.776 326.923 771.785 cv
338.495 771.81 342.38 774.472 342.539 774.585 cv
342.765 774.745 342.818 775.057 342.658 775.283 cv
342.499 775.507 342.188 775.561 341.963 775.402 cv
341.925 775.376 338.106 772.809 326.921 772.785 cv
318.068 772.785 312.256 782.618 312.198 782.718 cv
312.105 782.877 311.938 782.967 311.765 782.967 cv
cp
f
289.247 762.336 mo
289.179 762.336 289.111 762.322 289.045 762.293 cv
288.793 762.183 288.678 761.887 288.789 761.635 cv
295.858 745.563 315.239 753.717 315.434 753.801 cv
315.687 753.91 315.804 754.205 315.694 754.458 cv
315.585 754.712 315.291 754.828 315.037 754.719 cv
314.278 754.392 296.373 746.877 289.705 762.037 cv
289.622 762.225 289.439 762.336 289.247 762.336 cv
cp
f
315.235 827.125 mo
306.009 827.125 292.428 819.548 286.657 807.188 cv
283.356 800.116 281.663 778.45 289.247 776.604 cv
301.635 773.588 327.986 827.125 315.235 827.125 cv
cp
1 .219608 .235294 rgb
f
644.257 832.324 mo
644.257 832.324 782.997 860.403 840.334 833.638 cv
853.5 827.492 864.746 820.341 868.429 801.088 cv
870.643 789.512 874.082 763.329 864.97 751.188 cv
850.826 732.342 831.749 746.197 831.749 746.197 cv
831.749 746.197 782.807 700.033 754.156 707.342 cv
707.585 719.221 644.257 832.324 644.257 832.324 cv
cp
.592157 .87451 1 rgb
f
822.132 738.336 mo
822.028 738.336 821.922 738.304 821.832 738.236 cv
804.524 725.199 li
804.304 725.033 804.26 724.72 804.426 724.499 cv
804.592 724.279 804.906 724.234 805.126 724.4 cv
822.434 737.437 li
822.654 737.603 822.698 737.917 822.532 738.137 cv
822.434 738.268 822.284 738.336 822.132 738.336 cv
cp
0 0 0 rgb
f
869.904 760.898 mo
869.703 760.898 869.514 760.776 869.438 760.578 cv
865.564 750.509 859.958 744.455 852.777 742.584 cv
839.875 739.223 826.033 750.572 825.895 750.687 cv
825.682 750.863 825.367 750.834 825.191 750.622 cv
825.014 750.41 825.043 750.095 825.255 749.918 cv
825.835 749.436 839.622 738.129 853.025 741.615 cv
860.538 743.571 866.374 749.83 870.371 760.218 cv
870.47 760.476 870.341 760.766 870.083 760.865 cv
870.025 760.887 869.964 760.898 869.904 760.898 cv
cp
f
767.39 846.261 mo
739.04 846.261 715.765 842.708 715.347 842.643 cv
715.074 842.6 714.888 842.344 714.93 842.071 cv
714.973 841.798 715.226 841.613 715.502 841.654 cv
716.254 841.772 791.228 853.213 836.074 834.748 cv
836.329 834.643 836.622 834.765 836.727 835.02 cv
836.832 835.275 836.711 835.568 836.455 835.673 cv
816.336 843.957 790.218 846.261 767.39 846.261 cv
cp
f
840.977 778.712 mo
840.953 778.712 840.928 778.71 840.903 778.707 cv
840.63 778.666 840.441 778.412 840.482 778.139 cv
840.494 778.054 841.672 769.628 837.054 764.28 cv
834.501 761.323 830.639 759.824 825.575 759.824 cv
825.299 759.824 825.075 759.601 825.075 759.324 cv
825.075 759.048 825.299 758.824 825.575 758.824 cv
830.945 758.824 835.063 760.441 837.815 763.631 cv
842.732 769.331 841.525 777.922 841.471 778.285 cv
841.434 778.534 841.221 778.712 840.977 778.712 cv
cp
f
858.345 760.898 mo
858.101 760.898 857.887 760.719 857.851 760.47 cv
857.103 755.304 855.204 751.587 852.208 749.423 cv
848.469 746.722 844.295 747.426 844.253 747.432 cv
843.981 747.483 843.721 747.299 843.673 747.027 cv
843.625 746.755 843.806 746.496 844.078 746.448 cv
844.265 746.414 848.715 745.666 852.793 748.612 cv
856.018 750.941 858.052 754.882 858.841 760.326 cv
858.881 760.6 858.691 760.853 858.418 760.893 cv
858.394 760.896 858.369 760.898 858.345 760.898 cv
cp
f
831.685 826.155 mo
842.253 826.159 857.669 816.33 862.842 803.969 cv
865.802 796.897 865.486 776.961 858.688 775.115 cv
847.582 772.099 820.255 826.15 831.685 826.155 cv
cp
1 .219608 .235294 rgb
f
494.312 246.592 mo
494.312 246.592 479.607 227.651 464.065 235.557 cv
453.747 240.806 450.044 255.364 454.205 262.394 cv
462.618 276.605 486.838 268.973 486.838 268.973 cv
494.312 246.592 li
cp
.592157 .87451 1 rgb
f
454.206 262.894 mo
454.035 262.894 453.868 262.806 453.775 262.649 cv
451.771 259.262 451.473 254.148 452.978 248.968 cv
454.784 242.754 458.742 237.704 463.839 235.111 cv
479.567 227.112 494.558 246.093 494.707 246.285 cv
494.876 246.504 494.837 246.818 494.619 246.987 cv
494.401 247.156 494.087 247.117 493.917 246.899 cv
493.772 246.713 479.281 228.376 464.292 236.003 cv
459.441 238.47 455.667 243.298 453.938 249.247 cv
452.509 254.167 452.769 258.986 454.635 262.139 cv
454.776 262.377 454.698 262.683 454.46 262.824 cv
454.38 262.871 454.292 262.894 454.206 262.894 cv
cp
0 0 0 rgb
f
633.928 245.274 mo
623.191 231.34 599.436 204.012 578.821 201.52 cv
557.753 198.972 524.475 197.747 513.427 208.685 cv
507.456 214.597 510.544 217.809 510.544 217.809 cv
498.061 224.288 483.172 235.986 476.375 252.1 cv
471.523 263.603 470.804 284.305 471.992 296.732 cv
472.679 303.92 459.829 331.001 464.204 355.725 cv
468.853 381.999 478.341 388.025 478.341 388.025 cv
478.341 388.025 466.928 465.533 445.702 495.502 cv
394.977 567.123 383.607 672.381 400.643 731.318 cv
423.573 810.644 537.055 891.462 690.331 822.457 cv
737.726 801.119 790.355 768.891 785.215 670.358 cv
781.299 595.271 720.477 440.609 688.873 372.386 cv
681.222 355.871 672.27 329.169 662.429 303.57 cv
661.761 301.833 669.823 311.506 671.005 306.208 cv
671.452 304.205 665.779 293.682 662.643 289.158 cv
650.984 272.335 642.36 256.217 633.928 245.274 cv
cp
.592157 .87451 1 rgb
f
526.278 416.862 mo
526.238 416.862 526.197 416.857 526.156 416.848 cv
482.615 406.009 474.135 381.685 474.054 381.44 cv
473.968 381.178 474.11 380.896 474.372 380.809 cv
474.635 380.724 474.917 380.865 475.004 381.127 cv
475.083 381.366 483.438 405.184 526.398 415.877 cv
526.666 415.944 526.829 416.215 526.762 416.483 cv
526.706 416.71 526.502 416.862 526.278 416.862 cv
cp
0 0 0 rgb
f
569.055 383.241 mo
567.28 383.241 565.212 382.934 563.051 381.987 cv
554.999 378.462 550.995 368.312 550.828 367.882 cv
550.729 367.624 550.857 367.334 551.114 367.235 cv
551.373 367.135 551.661 367.263 551.761 367.521 cv
551.8 367.622 555.786 377.715 563.452 381.071 cv
569.069 383.53 574.156 381.299 574.206 381.277 cv
574.458 381.163 574.754 381.275 574.867 381.527 cv
574.981 381.778 574.87 382.074 574.618 382.188 cv
574.475 382.253 572.237 383.241 569.055 383.241 cv
cp
f
581.543 294.243 mo
582.646 292.354 580.594 285.113 576.643 285.974 cv
556.277 290.412 555.201 293.989 526.948 294.961 cv
518.047 295.268 516.399 297.386 516.503 302.205 cv
516.715 311.954 539.28 316.96 546.581 316.05 cv
557.964 314.63 578.629 299.229 581.543 294.243 cv
cp
f
519.116 220.861 mo
518.72 220.861 509.987 220.804 509.373 216.181 cv
508.992 213.315 509.811 210.753 511.805 208.567 cv
521.433 198.016 555.413 199.267 556.855 199.326 cv
557.131 199.338 557.345 199.57 557.334 199.846 cv
557.323 200.122 557.088 200.348 556.814 200.325 cv
556.465 200.311 521.858 199.032 512.544 209.241 cv
510.758 211.198 510.024 213.49 510.364 216.05 cv
510.864 219.816 519.035 219.861 519.117 219.861 cv
519.394 219.861 519.617 220.084 519.617 220.361 cv
519.617 220.636 519.394 220.861 519.118 220.861 cv
519.117 220.861 519.116 220.861 519.116 220.861 cv
cp
f
520.073 237.648 mo
519.654 237.648 519.242 237.578 518.839 237.427 cv
516.804 236.664 515.461 235.178 514.956 233.132 cv
513.821 228.534 516.954 221.229 522.937 214.522 cv
523.12 214.316 523.437 214.298 523.643 214.482 cv
523.849 214.665 523.867 214.982 523.683 215.188 cv
517.914 221.656 514.869 228.605 515.927 232.892 cv
516.355 234.629 517.453 235.839 519.19 236.49 cv
523.327 238.044 529.703 227.973 531.81 223.964 cv
531.938 223.719 532.24 223.625 532.485 223.754 cv
532.729 223.882 532.823 224.184 532.695 224.428 cv
532.392 225.006 525.682 237.648 520.073 237.648 cv
cp
f
552.152 339.61 mo
545.725 339.61 540.698 338.128 540.599 338.099 cv
540.335 338.019 540.186 337.739 540.266 337.475 cv
540.346 337.211 540.624 337.062 540.889 337.142 cv
541.08 337.2 560.079 342.787 571.095 331.833 cv
571.291 331.638 571.607 331.639 571.802 331.835 cv
571.997 332.031 571.996 332.347 571.8 332.542 cv
566.129 338.18 558.465 339.61 552.152 339.61 cv
cp
f
554.693 272.932 mo
554.99 274.61 556.592 275.73 558.271 275.433 cv
559.949 275.136 561.07 273.535 560.772 271.856 cv
560.475 270.177 558.874 269.057 557.195 269.354 cv
555.516 269.651 554.396 271.253 554.693 272.932 cv
cp
f
547.388 253.942 mo
547.592 255.635 550.861 256.632 554.69 256.17 cv
558.519 255.709 561.457 253.963 561.253 252.27 cv
561.049 250.577 557.78 249.579 553.951 250.041 cv
550.122 250.503 547.184 252.249 547.388 253.942 cv
cp
f
612.419 290.094 mo
612.083 293.936 614.924 297.323 618.765 297.66 cv
622.607 297.997 625.994 295.156 626.331 291.314 cv
626.668 287.473 623.827 284.085 619.985 283.748 cv
616.144 283.411 612.756 286.252 612.419 290.094 cv
cp
1 .219608 .235294 rgb
f
485.699 312.516 mo
485.363 316.357 488.204 319.745 492.045 320.082 cv
495.887 320.418 499.274 317.577 499.611 313.735 cv
499.948 309.894 497.107 306.506 493.265 306.169 cv
489.424 305.833 486.036 308.674 485.699 312.516 cv
cp
f
566.216 295.562 mo
565.767 294.371 563.02 294.302 560.08 295.409 cv
557.14 296.516 555.12 298.379 555.569 299.57 cv
556.017 300.762 558.764 300.83 561.704 299.723 cv
564.644 298.616 566.664 296.753 566.216 295.562 cv
cp
1 1 1 rgb
f
525.429 258.594 mo
525.815 260.255 529.174 260.893 532.93 260.02 cv
536.686 259.146 539.418 257.093 539.032 255.432 cv
538.646 253.771 535.288 253.133 531.532 254.007 cv
527.776 254.88 525.043 256.934 525.429 258.594 cv
cp
0 0 0 rgb
f
532.53 276.853 mo
532.826 278.532 534.428 279.652 536.107 279.354 cv
537.786 279.058 538.906 277.456 538.609 275.777 cv
538.312 274.099 536.71 272.979 535.031 273.275 cv
533.353 273.573 532.232 275.174 532.53 276.853 cv
cp
f
647.799 504.481 mo
659.662 549.208 684.503 622.779 682.367 660.446 cv
680.112 700.203 675.24 737.836 637.841 763.484 cv
599.016 790.11 532.786 783.928 505.584 763.066 cv
472.687 737.836 466.479 709.371 474.54 657.117 cv
477.524 637.774 498.571 615.239 506.15 597.194 cv
521.945 559.587 524.443 450.36 566.89 427.344 cv
599.57 409.623 630.224 438.217 647.799 504.481 cv
cp
.956863 .968627 .980392 rgb
f
471.917 296.812 mo
471.662 296.812 471.445 296.618 471.42 296.359 cv
470.121 282.765 471.228 262.417 475.84 251.485 cv
483.973 232.205 502.245 221.096 509.724 217.215 cv
509.969 217.088 510.271 217.183 510.398 217.428 cv
510.525 217.673 510.429 217.975 510.184 218.102 cv
502.802 221.934 484.767 232.894 476.761 251.873 cv
472.213 262.655 471.128 282.792 472.416 296.264 cv
472.442 296.539 472.24 296.783 471.965 296.809 cv
471.949 296.811 471.933 296.812 471.917 296.812 cv
cp
0 0 0 rgb
f
688.798 372.465 mo
688.61 372.465 688.429 372.357 688.344 372.175 cv
683.339 361.37 677.728 346.077 671.788 329.886 cv
668.598 321.193 665.3 312.204 661.888 303.329 cv
661.709 302.862 661.911 302.632 662.047 302.536 cv
662.469 302.242 662.797 302.522 664.015 303.576 cv
665.41 304.78 668.311 307.288 669.668 306.84 cv
669.806 306.795 670.224 306.657 670.443 305.678 cv
670.803 304.063 665.66 294.075 662.158 289.021 cv
662 288.794 662.057 288.483 662.284 288.326 cv
662.511 288.168 662.823 288.225 662.98 288.452 cv
665.67 292.333 671.953 303.499 671.419 305.896 cv
671.192 306.913 670.708 307.55 669.982 307.79 cv
668.235 308.365 665.753 306.399 663.362 304.332 cv
666.575 312.776 669.699 321.292 672.727 329.542 cv
678.66 345.713 684.264 360.987 689.252 371.755 cv
689.368 372.005 689.259 372.302 689.008 372.418 cv
688.94 372.45 688.869 372.465 688.798 372.465 cv
cp
f
579.063 848.957 mo
558.216 848.957 540.251 846.077 525.756 842.368 cv
481.852 831.132 444.455 805.996 423.154 773.405 cv
423.003 773.174 423.068 772.864 423.299 772.713 cv
423.53 772.562 423.84 772.626 423.991 772.858 cv
445.156 805.242 482.339 830.225 526.004 841.399 cv
562.124 850.643 619.916 854.708 690.117 821.577 cv
690.366 821.459 690.665 821.566 690.783 821.816 cv
690.901 822.065 690.794 822.364 690.544 822.481 cv
648.229 842.451 610.393 848.957 579.063 848.957 cv
cp
f
752.754 687.552 mo
757.845 705.516 755.796 730.101 750.019 737.055 cv
747.105 740.563 738.299 730.646 737.122 735.139 cv
724.966 781.534 702.048 824.354 683.04 837.237 cv
667.236 847.947 612.303 868.946 594.137 848.226 cv
578.036 829.86 613.896 813.678 618.407 765.465 cv
629.916 642.448 678.019 526.663 678.019 526.663 cv
678.019 526.663 722.339 580.236 752.754 687.552 cv
cp
.592157 .87451 1 rgb
f
617.402 856.951 mo
607.021 856.952 598.286 854.614 593.736 848.525 cv
585.561 837.583 591.191 828.462 598.985 815.84 cv
606.445 803.758 615.729 788.721 617.909 765.419 cv
629.293 643.733 677.075 527.63 677.557 526.471 cv
677.663 526.216 677.956 526.096 678.21 526.201 cv
678.465 526.307 678.586 526.6 678.48 526.855 cv
678 528.012 630.275 643.981 618.905 765.512 cv
616.703 789.047 607.35 804.194 599.836 816.366 cv
591.967 829.11 586.769 837.529 594.538 847.926 cv
608.933 867.194 666.786 847.648 682.76 836.823 cv
701.925 823.833 724.584 781.016 736.638 735.012 cv
736.822 734.31 737.188 733.835 737.724 733.604 cv
739.031 733.04 740.952 734.085 743.174 735.297 cv
745.644 736.644 748.442 738.17 749.634 736.736 cv
753.49 732.094 754.7 723.385 756.533 710.201 cv
757.419 703.82 758.425 696.587 759.94 688.046 cv
759.989 687.775 760.247 687.591 760.52 687.641 cv
760.792 687.689 760.973 687.949 760.925 688.221 cv
759.413 696.744 758.409 703.966 757.523 710.339 cv
755.601 724.167 754.441 732.514 750.403 737.375 cv
748.686 739.44 745.503 737.706 742.695 736.175 cv
740.87 735.179 738.98 734.149 738.12 734.522 cv
738.031 734.561 737.76 734.678 737.605 735.266 cv
725.497 781.48 702.667 824.539 683.321 837.651 cv
672.142 845.227 640.649 856.951 617.402 856.951 cv
cp
0 0 0 rgb
f
619.147 248.109 mo
619.147 248.109 647.758 247.4 651.172 226.87 cv
653.438 213.24 642.077 199.371 632.376 198.389 cv
612.766 196.404 602.942 225.076 602.942 225.076 cv
619.147 248.109 li
cp
.592157 .87451 1 rgb
f
635.503 225.502 mo
635.691 225.011 632.541 218.052 630.235 217.912 cv
624.937 217.59 615.795 233.477 615.795 233.477 cv
615.795 233.477 626.935 238.122 629.326 235.668 cv
630.312 234.656 627.719 231.411 628.279 230.115 cv
629.13 228.148 634.737 227.503 635.503 225.502 cv
cp
0 0 0 rgb
f
600.747 840.579 mo
600.57 840.579 600.398 840.484 600.307 840.317 cv
600.221 840.157 598.223 836.34 600.278 830.744 cv
602.83 823.796 612.238 819.373 612.637 819.188 cv
612.888 819.071 613.184 819.181 613.301 819.431 cv
613.417 819.681 613.308 819.979 613.057 820.095 cv
612.963 820.138 603.625 824.532 601.217 831.089 cv
599.325 836.24 601.169 839.808 601.188 839.844 cv
601.318 840.087 601.226 840.39 600.983 840.52 cv
600.908 840.56 600.827 840.579 600.747 840.579 cv
cp
f
616.306 847.179 mo
616.128 847.179 615.956 847.084 615.866 846.917 cv
615.78 846.757 613.782 842.939 615.837 837.344 cv
618.388 830.396 627.796 825.973 628.195 825.788 cv
628.446 825.671 628.743 825.781 628.859 826.031 cv
628.975 826.281 628.866 826.579 628.615 826.695 cv
628.521 826.738 619.183 831.132 616.775 837.689 cv
614.884 842.839 616.728 846.408 616.747 846.444 cv
616.876 846.687 616.784 846.99 616.542 847.12 cv
616.466 847.16 616.385 847.179 616.306 847.179 cv
cp
f
609.646 466.527 mo
609.902 479.322 600.164 489.894 587.895 490.139 cv
575.626 490.384 565.473 480.211 565.218 467.416 cv
564.961 454.62 574.7 444.048 586.969 443.803 cv
599.237 443.558 609.39 453.731 609.646 466.527 cv
cp
1 .701961 .207843 rgb
f
597.918 496.433 mo
598.202 510.639 586.916 522.386 572.709 522.67 cv
558.503 522.954 543.32 509.708 543.036 495.502 cv
542.752 481.295 554.267 468.958 571.497 468.962 cv
585.707 468.965 597.634 482.227 597.918 496.433 cv
cp
1 .219608 .235294 rgb
f
631.342 497.963 mo
630.478 512.146 617.616 522.902 602.614 521.988 cv
587.612 521.074 576.151 508.835 577.015 494.652 cv
577.88 480.47 590.717 468.095 605.719 469.009 cv
620.721 469.923 632.207 483.78 631.342 497.963 cv
cp
.184314 .368627 .956863 rgb
f
551.809 512.641 mo
580.584 633.301 li
622.112 518.229 li
622.112 518.229 606.002 510.557 585.462 507.524 cv
565.37 504.558 551.809 512.641 551.809 512.641 cv
cp
.996078 .596078 .0509804 rgb
f
393.633 594.7 mo
390.731 613.145 393.572 648.108 401.422 652.184 cv
405.469 654.285 408.946 637.496 410.213 641.965 cv
423.294 688.108 469.876 731.675 508.141 681.729 cv
519.869 666.42 545.849 625.758 571.631 607.424 cv
589.427 594.769 611.482 607.852 621.273 589.794 cv
640.006 555.245 608.867 519.927 556.532 538.311 cv
537.613 544.957 485.349 588.975 485.349 588.975 cv
455.233 504.313 473.421 415.042 473.421 415.042 cv
473.421 415.042 412.334 475.808 393.633 594.7 cv
cp
.592157 .87451 1 rgb
f
485.349 589.475 mo
485.143 589.475 484.951 589.348 484.878 589.143 cv
475.209 561.961 468.654 533.271 465.396 503.87 cv
465.366 503.596 465.563 503.349 465.838 503.318 cv
466.115 503.285 466.359 503.485 466.39 503.76 cv
469.64 533.084 476.177 561.699 485.82 588.808 cv
485.913 589.068 485.777 589.354 485.516 589.446 cv
485.461 589.466 485.405 589.475 485.349 589.475 cv
cp
0 0 0 rgb
f
470.714 704.429 mo
468.398 704.429 466.064 704.207 463.718 703.758 cv
438.379 698.918 417.379 669.077 409.732 642.101 cv
409.689 641.952 409.65 641.851 409.619 641.784 cv
409.181 642.229 408.385 644.009 407.789 645.339 cv
406.378 648.491 404.78 652.063 402.817 652.748 cv
402.265 652.942 401.717 652.9 401.191 652.628 cv
400.946 652.5 400.851 652.199 400.978 651.954 cv
401.105 651.708 401.406 651.613 401.652 651.74 cv
401.931 651.885 402.196 651.906 402.488 651.804 cv
404.043 651.261 405.681 647.603 406.876 644.931 cv
408.208 641.955 408.843 640.641 409.729 640.707 cv
410.39 640.755 410.619 641.563 410.694 641.829 cv
418.258 668.509 438.964 698.012 463.905 702.776 cv
479.589 705.771 494.747 698.389 507.744 681.425 cv
510.061 678.401 512.935 674.385 516.263 669.735 cv
529.935 650.634 550.595 621.769 571.341 607.016 cv
579.457 601.245 588.606 600.74 596.679 600.295 cv
606.819 599.736 615.576 599.252 620.833 589.556 cv
629.029 574.44 627.708 557.849 617.386 546.256 cv
607.299 534.929 586.065 527.014 556.718 538.775 cv
534.406 547.715 466.796 604.739 466.116 605.314 cv
465.905 605.493 465.59 605.466 465.411 605.255 cv
465.233 605.044 465.26 604.729 465.47 604.55 cv
466.152 603.974 533.886 546.846 556.346 537.846 cv
586.174 525.896 607.82 534.011 618.133 545.591 cv
628.743 557.507 630.115 574.536 621.712 590.033 cv
616.189 600.22 606.739 600.742 596.734 601.293 cv
588.409 601.753 579.801 602.228 571.921 607.832 cv
551.311 622.487 530.709 651.271 517.076 670.317 cv
513.743 674.974 510.864 678.996 508.538 682.033 cv
497.228 696.795 484.272 704.429 470.714 704.429 cv
cp
f
620.856 561.484 mo
620.682 561.484 620.514 561.394 620.421 561.232 cv
620.344 561.098 612.565 547.837 598.827 551.518 cv
598.56 551.59 598.286 551.432 598.214 551.165 cv
598.143 550.898 598.301 550.624 598.568 550.552 cv
613.06 546.669 621.209 560.595 621.29 560.736 cv
621.427 560.976 621.343 561.281 621.104 561.418 cv
621.025 561.463 620.94 561.484 620.856 561.484 cv
cp
f
619.626 580.176 mo
619.525 580.176 619.422 580.146 619.333 580.081 cv
619.194 579.98 605.269 570.081 594.48 577.833 cv
594.255 577.993 593.944 577.942 593.783 577.718 cv
593.622 577.494 593.673 577.181 593.897 577.02 cv
605.277 568.846 619.775 579.166 619.92 579.271 cv
620.144 579.434 620.194 579.746 620.031 579.97 cv
619.934 580.104 619.781 580.176 619.626 580.176 cv
cp
f
350.03 835.633 mo
343.112 844.037 336.399 843.772 337.16 848.98 cv
338.59 858.756 367.037 859.267 370.69 849.031 cv
373.705 840.584 370.664 822.39 365.247 821.133 cv
358.811 819.64 355.449 829.049 350.03 835.633 cv
cp
.956863 .482353 .141176 rgb
f
343.361 851.797 mo
343.088 851.797 342.865 851.578 342.861 851.304 cv
342.821 848.337 344.018 846.199 346.417 844.951 cv
346.662 844.823 346.964 844.919 347.091 845.164 cv
347.219 845.409 347.124 845.71 346.878 845.838 cv
344.813 846.913 343.826 848.696 343.861 851.29 cv
343.865 851.566 343.644 851.793 343.368 851.797 cv
343.366 851.797 343.364 851.797 343.361 851.797 cv
cp
0 0 0 rgb
f
352.825 854.291 mo
352.584 854.291 352.372 854.116 352.332 853.87 cv
351.509 848.741 357.661 845.911 357.923 845.793 cv
358.176 845.681 358.471 845.792 358.584 846.043 cv
358.697 846.295 358.585 846.591 358.333 846.705 cv
358.276 846.731 352.618 849.34 353.319 853.711 cv
353.363 853.984 353.177 854.24 352.905 854.284 cv
352.878 854.289 352.851 854.291 352.825 854.291 cv
cp
f
225.651 809.806 mo
204.936 816.347 198.804 813.097 197.814 816.529 cv
196.962 819.481 209.751 829.158 225.553 831.482 cv
237.486 833.237 249.498 827.871 249.498 827.871 cv
249.498 827.871 232.123 807.762 225.651 809.806 cv
cp
f
219.181 828.312 mo
248.556 857.152 342.052 858.258 374.311 820.747 cv
414.988 773.448 366.638 622.807 330.879 587.034 cv
309.893 566.04 278.364 569.377 270.777 598.323 cv
255.837 655.318 176.472 786.379 219.181 828.312 cv
cp
f
262.649 809.66 mo
286.313 831.835 347.667 831.835 365.138 802.816 cv
390.083 761.382 358.107 667.114 340.838 612.3 cv
330.965 580.964 296.812 585.82 287.969 607.41 cv
271.966 646.482 229.575 778.666 262.649 809.66 cv
cp
1 1 1 rgb
f
337.277 624.789 mo
343.641 626.99 356.882 630.415 355.505 634.5 cv
351.941 645.076 314.163 644.64 309.848 636.935 cv
307.055 631.946 312.916 620.05 318.457 617.092 cv
325.042 613.578 327.349 621.355 337.277 624.789 cv
cp
1 .721569 .172549 rgb
f
305.9 623.413 mo
304.541 623.413 303.097 623.076 301.688 622.396 cv
301.19 622.157 300.981 621.559 301.221 621.062 cv
301.461 620.564 302.058 620.356 302.556 620.595 cv
305.423 621.978 307.749 621.405 308.97 620.409 cv
310.03 619.544 310.443 618.28 310.104 616.941 cv
309.969 616.406 310.293 615.862 310.829 615.727 cv
311.366 615.589 311.908 615.916 312.043 616.451 cv
312.573 618.543 311.896 620.602 310.234 621.958 cv
309.052 622.924 307.537 623.413 305.9 623.413 cv
cp
0 0 0 rgb
f
329.678 641.285 mo
326.896 641.285 324.082 640.208 322.542 637.789 cv
322.394 637.556 322.462 637.247 322.695 637.099 cv
322.928 636.951 323.237 637.019 323.385 637.252 cv
325.401 640.418 329.97 640.938 333.222 639.611 cv
333.478 639.505 333.769 639.629 333.874 639.885 cv
333.978 640.141 333.855 640.432 333.6 640.537 cv
332.404 641.025 331.044 641.285 329.678 641.285 cv
cp
f
330.641 617.297 mo
328.779 617.297 326.641 616.311 325.466 614.104 cv
325.206 613.617 325.391 613.011 325.879 612.751 cv
326.366 612.492 326.972 612.677 327.231 613.164 cv
328.17 614.928 330.094 615.578 331.415 615.194 cv
332.128 614.984 332.461 614.528 332.405 613.837 cv
332.359 613.286 332.769 612.803 333.319 612.758 cv
333.868 612.712 334.353 613.123 334.398 613.673 cv
334.533 615.317 333.605 616.635 331.978 617.113 cv
331.563 617.234 331.111 617.297 330.641 617.297 cv
cp
f
322.043 604.663 mo
321.2 601.432 331.113 602.993 332.526 604.497 cv
334.297 606.382 322.4 606.029 322.043 604.663 cv
cp
f
307.429 606.432 mo
306.892 603.109 297.639 609.258 296.868 611.293 cv
295.902 613.844 307.656 607.839 307.429 606.432 cv
cp
f
350.835 634.229 mo
350.387 632.843 348.513 635.268 348.498 636.015 cv
348.48 636.951 351.025 634.815 350.835 634.229 cv
cp
f
258.287 650.463 mo
223.288 647.428 211.472 629.489 207.73 633.014 cv
204.511 636.046 203.313 653.494 216.181 666.407 cv
228.511 678.78 250.494 688.38 250.494 688.38 cv
250.494 688.38 267.355 651.25 258.287 650.463 cv
cp
f
366.902 655.973 mo
366.902 655.973 423.161 718.204 424.002 725.047 cv
424.743 731.081 389.549 726.378 379.788 715.714 cv
370.765 705.856 366.998 677.376 366.998 677.376 cv
366.902 655.973 li
cp
f
291.393 629.851 mo
290.908 631.382 292.941 633.392 295.934 634.339 cv
298.926 635.287 301.745 634.813 302.23 633.282 cv
302.715 631.75 300.682 629.74 297.69 628.793 cv
294.697 627.845 291.878 628.319 291.393 629.851 cv
cp
1 .431373 .662745 rgb
f
209.433 659.971 mo
209.968 660.055 li
211.043 660.224 212.052 659.49 212.222 658.414 cv
217.898 622.381 li
213.469 621.683 li
207.793 657.716 li
207.623 658.792 208.358 659.801 209.433 659.971 cv
cp
1 .721569 .14902 rgb
f
201.168 623.039 mo
229.186 627.453 li
235.254 588.937 li
236.326 582.133 231.679 575.748 224.875 574.676 cv
221.496 574.144 li
214.692 573.072 208.308 577.719 207.236 584.523 cv
201.168 623.039 li
cp
.184314 .368627 .956863 rgb
f
206.417 635.415 mo
205.801 637.54 206.572 641.022 209.347 641.022 cv
212.122 641.022 217.496 637.933 218.165 635.825 cv
219.181 632.626 214.964 629.808 212.189 629.808 cv
210.317 629.808 207.569 631.437 206.417 635.415 cv
cp
0 0 0 rgb
f
232.099 590.344 mo
232.076 590.344 232.053 590.343 232.03 590.339 cv
214.546 587.923 li
214.273 587.886 214.082 587.633 214.119 587.36 cv
214.157 587.085 214.411 586.894 214.683 586.933 cv
232.167 589.349 li
232.44 589.387 232.631 589.639 232.594 589.913 cv
232.559 590.163 232.344 590.344 232.099 590.344 cv
cp
1 1 1 rgb
f
227.433 618.8 mo
227.41 618.8 227.387 618.799 227.364 618.795 cv
209.881 616.379 li
209.607 616.342 209.416 616.089 209.454 615.816 cv
209.491 615.542 209.746 615.35 210.017 615.389 cv
227.501 617.805 li
227.774 617.843 227.966 618.095 227.928 618.369 cv
227.893 618.619 227.679 618.8 227.433 618.8 cv
cp
f
226.165 606.261 mo
225.956 606.261 225.743 606.248 225.524 606.22 cv
224.176 606.047 223.533 605.217 222.967 604.485 cv
222.483 603.86 222.026 603.271 221.133 603.007 cv
220.245 602.746 219.702 603.123 218.952 603.647 cv
218.098 604.243 217.035 604.984 215.278 604.597 cv
212.809 604.051 210.681 601.07 210.592 600.943 cv
210.433 600.718 210.487 600.406 210.712 600.247 cv
210.937 600.087 211.249 600.142 211.409 600.367 cv
211.428 600.395 213.404 603.158 215.494 603.621 cv
216.822 603.915 217.579 603.386 218.379 602.827 cv
219.17 602.275 220.066 601.65 221.417 602.048 cv
222.619 602.403 223.224 603.184 223.757 603.873 cv
224.292 604.563 224.713 605.108 225.651 605.228 cv
228.022 605.537 229.784 603.59 229.802 603.571 cv
229.985 603.365 230.302 603.346 230.508 603.53 cv
230.714 603.713 230.732 604.03 230.549 604.236 cv
230.469 604.325 228.714 606.261 226.165 606.261 cv
cp
f
275.159 838.95 mo
280.989 846.993 293.661 851.051 293.566 855.375 cv
293.321 866.532 255.259 867.617 248.827 858.315 cv
244.779 852.46 256.381 832.384 261.922 829.426 cv
268.507 825.911 269.506 831.152 275.159 838.95 cv
cp
.956863 .482353 .141176 rgb
f
283.578 858.815 mo
283.33 858.815 283.114 858.63 283.083 858.376 cv
282.757 855.739 279.489 852.126 277.942 851.785 cv
277.673 851.726 277.502 851.459 277.562 851.189 cv
277.621 850.919 277.888 850.748 278.158 850.809 cv
280.234 851.267 283.707 855.268 284.075 858.254 cv
284.109 858.528 283.914 858.778 283.64 858.812 cv
283.62 858.814 283.599 858.815 283.578 858.815 cv
cp
0 0 0 rgb
f
269.46 861.086 mo
269.395 861.086 269.328 861.074 269.264 861.046 cv
269.01 860.938 268.892 860.645 269 860.391 cv
270.28 857.379 267.582 854.276 267.555 854.245 cv
267.372 854.038 267.391 853.722 267.598 853.539 cv
267.805 853.356 268.121 853.375 268.304 853.583 cv
268.433 853.729 271.445 857.196 269.92 860.782 cv
269.839 860.972 269.654 861.086 269.46 861.086 cv
cp
f
267.94 339.983 mo
267.94 341.236 267.68 342.429 267.214 343.514 cv
261.607 339.817 li
267.096 336.209 li
267.632 337.358 267.94 338.634 267.94 339.983 cv
cp
260.556 348.813 mo
260.556 342.946 li
265.45 346.172 li
264.163 347.521 262.465 348.468 260.556 348.813 cv
cp
252.272 345.954 mo
257.365 342.605 li
257.365 348.813 li
255.355 348.45 253.58 347.417 252.272 345.954 cv
cp
249.981 339.983 mo
249.981 338.73 250.241 337.538 250.706 336.453 cv
255.804 339.814 li
250.6 343.235 li
250.206 342.225 249.981 341.131 249.981 339.983 cv
cp
257.365 331.154 mo
257.365 337.021 li
252.471 333.795 li
253.758 332.446 255.456 331.499 257.365 331.154 cv
cp
265.262 333.597 mo
260.556 336.691 li
260.556 331.154 li
262.372 331.482 264 332.352 265.262 333.597 cv
cp
282.565 333.31 mo
282.674 333.332 282.782 333.343 282.889 333.343 cv
283.63 333.343 284.294 332.824 284.45 332.07 cv
284.628 331.208 284.074 330.363 283.211 330.185 cv
277.924 329.092 li
281.892 326.484 li
282.628 326 282.833 325.011 282.348 324.275 cv
281.865 323.539 280.875 323.334 280.139 323.818 cv
276.172 326.426 li
277.265 321.139 li
277.443 320.276 276.889 319.433 276.026 319.254 cv
275.16 319.075 274.319 319.631 274.141 320.494 cv
272.402 328.904 li
267.962 331.823 li
266.072 329.74 263.479 328.316 260.556 327.931 cv
260.556 322.85 li
266.628 316.777 li
267.252 316.154 267.252 315.144 266.628 314.521 cv
266.006 313.898 264.995 313.898 264.373 314.521 cv
260.556 318.338 li
260.556 313.59 li
260.556 312.709 259.842 311.995 258.96 311.995 cv
258.079 311.995 257.365 312.709 257.365 313.59 cv
257.365 318.338 li
253.548 314.521 li
252.925 313.898 251.915 313.898 251.292 314.521 cv
250.669 315.144 250.669 316.154 251.292 316.777 cv
257.365 322.85 li
257.365 327.931 li
254.349 328.328 251.682 329.83 249.779 332.021 cv
245.024 328.886 li
243.296 320.474 li
243.119 319.61 242.275 319.055 241.413 319.231 cv
240.55 319.409 239.994 320.252 240.171 321.115 cv
241.257 326.403 li
237.802 324.125 li
237.066 323.641 236.077 323.844 235.592 324.58 cv
235.107 325.315 235.311 326.304 236.046 326.789 cv
239.501 329.067 li
234.214 330.153 li
233.351 330.33 232.795 331.174 232.972 332.037 cv
233.127 332.791 233.791 333.311 234.533 333.311 cv
234.639 333.311 234.747 333.3 234.855 333.278 cv
243.268 331.55 li
248.022 334.684 li
247.241 336.289 246.791 338.083 246.791 339.983 cv
246.791 341.779 247.192 343.479 247.893 345.015 cv
243.258 348.061 li
234.847 346.322 li
233.983 346.145 233.14 346.699 232.962 347.561 cv
232.783 348.424 233.338 349.268 234.201 349.446 cv
239.487 350.539 li
236.029 352.812 li
235.293 353.296 235.088 354.285 235.573 355.021 cv
235.879 355.488 236.388 355.741 236.907 355.741 cv
237.208 355.741 237.512 355.656 237.781 355.478 cv
241.24 353.205 li
240.147 358.492 li
239.969 359.354 240.523 360.199 241.386 360.377 cv
241.495 360.399 241.604 360.41 241.71 360.41 cv
242.451 360.41 243.115 359.892 243.271 359.138 cv
245.01 350.727 li
249.577 347.725 li
251.49 350.039 254.245 351.625 257.365 352.036 cv
257.365 357.727 li
251.292 363.799 li
250.669 364.422 250.669 365.433 251.292 366.055 cv
251.604 366.367 252.012 366.522 252.42 366.522 cv
252.828 366.522 253.237 366.367 253.548 366.055 cv
257.365 362.238 li
257.365 366.376 li
257.365 367.257 258.079 367.972 258.96 367.972 cv
259.842 367.972 260.556 367.257 260.556 366.376 cv
260.556 362.238 li
264.373 366.055 li
264.684 366.367 265.093 366.522 265.501 366.522 cv
265.909 366.522 266.317 366.367 266.628 366.055 cv
267.252 365.433 267.252 364.422 266.628 363.799 cv
260.556 357.727 li
260.556 352.036 li
263.572 351.639 266.239 350.137 268.142 347.946 cv
272.387 350.745 li
274.115 359.158 li
274.27 359.913 274.935 360.433 275.676 360.433 cv
275.782 360.433 275.891 360.422 275.999 360.4 cv
276.862 360.222 277.418 359.379 277.24 358.516 cv
276.154 353.229 li
280.118 355.841 li
280.389 356.02 280.693 356.105 280.995 356.105 cv
281.513 356.105 282.022 355.853 282.328 355.387 cv
282.813 354.652 282.61 353.663 281.874 353.177 cv
277.91 350.564 li
283.198 349.479 li
284.061 349.301 284.617 348.458 284.439 347.595 cv
284.263 346.732 283.419 346.176 282.556 346.353 cv
274.143 348.081 li
269.898 345.283 li
270.679 343.679 271.13 341.885 271.13 339.983 cv
271.13 337.987 270.638 336.107 269.782 334.443 cv
274.154 331.57 li
282.565 333.31 li
cp
.592157 .87451 1 rgb
f
420.304 152.753 mo
420.304 153.811 420.084 154.819 419.691 155.735 cv
414.955 152.613 li
419.592 149.565 li
420.044 150.536 420.304 151.614 420.304 152.753 cv
cp
414.067 160.21 mo
414.067 155.255 li
418.201 157.98 li
417.114 159.118 415.68 159.919 414.067 160.21 cv
cp
407.071 157.795 mo
411.373 154.968 li
411.373 160.21 li
409.675 159.904 408.176 159.031 407.071 157.795 cv
cp
405.136 152.753 mo
405.136 151.695 405.356 150.687 405.749 149.771 cv
410.055 152.61 li
405.659 155.499 li
405.326 154.646 405.136 153.722 405.136 152.753 cv
cp
411.373 145.296 mo
411.373 150.251 li
407.239 147.526 li
408.326 146.387 409.76 145.587 411.373 145.296 cv
cp
418.043 147.359 mo
414.067 149.972 li
414.067 145.296 li
415.601 145.573 416.977 146.307 418.043 147.359 cv
cp
432.656 147.116 mo
432.748 147.135 432.84 147.144 432.93 147.144 cv
433.556 147.144 434.116 146.706 434.248 146.069 cv
434.399 145.341 433.93 144.628 433.202 144.477 cv
428.737 143.554 li
432.087 141.351 li
432.709 140.943 432.882 140.107 432.473 139.486 cv
432.065 138.864 431.229 138.691 430.608 139.1 cv
427.257 141.302 li
428.18 136.838 li
428.33 136.109 427.862 135.396 427.133 135.245 cv
426.402 135.094 425.692 135.563 425.541 136.292 cv
424.072 143.396 li
420.323 145.86 li
418.727 144.101 416.536 142.899 414.067 142.573 cv
414.067 138.282 li
419.197 133.153 li
419.723 132.627 419.723 131.774 419.197 131.248 cv
418.671 130.722 417.817 130.722 417.291 131.248 cv
414.067 134.472 li
414.067 130.462 li
414.067 129.718 413.464 129.115 412.72 129.115 cv
411.976 129.115 411.373 129.718 411.373 130.462 cv
411.373 134.471 li
408.149 131.248 li
407.623 130.722 406.77 130.722 406.244 131.248 cv
405.718 131.774 405.718 132.627 406.244 133.153 cv
411.373 138.282 li
411.373 142.573 li
408.825 142.909 406.573 144.177 404.966 146.028 cv
400.95 143.38 li
399.49 136.275 li
399.341 135.546 398.628 135.077 397.9 135.226 cv
397.171 135.376 396.701 136.088 396.851 136.817 cv
397.769 141.283 li
394.85 139.359 li
394.229 138.95 393.393 139.121 392.984 139.743 cv
392.574 140.364 392.746 141.199 393.367 141.609 cv
396.285 143.532 li
391.82 144.45 li
391.091 144.6 390.621 145.312 390.771 146.041 cv
390.902 146.678 391.463 147.117 392.089 147.117 cv
392.179 147.117 392.27 147.108 392.362 147.09 cv
399.467 145.63 li
403.482 148.277 li
402.823 149.632 402.442 151.147 402.442 152.753 cv
402.442 154.269 402.781 155.705 403.373 157.002 cv
399.458 159.575 li
392.354 158.106 li
391.625 157.956 390.913 158.425 390.762 159.153 cv
390.612 159.882 391.08 160.594 391.809 160.745 cv
396.273 161.668 li
393.353 163.588 li
392.731 163.996 392.558 164.832 392.967 165.453 cv
393.226 165.847 393.656 166.061 394.094 166.061 cv
394.348 166.061 394.605 165.99 394.833 165.839 cv
397.754 163.919 li
396.831 168.385 li
396.68 169.113 397.148 169.826 397.877 169.977 cv
397.969 169.995 398.061 170.005 398.151 170.005 cv
398.777 170.005 399.338 169.567 399.469 168.93 cv
400.938 161.826 li
404.795 159.291 li
406.411 161.246 408.738 162.585 411.373 162.932 cv
411.373 167.738 li
406.244 172.867 li
405.718 173.393 405.718 174.246 406.244 174.773 cv
406.507 175.036 406.852 175.167 407.196 175.167 cv
407.541 175.167 407.886 175.036 408.149 174.773 cv
411.373 171.549 li
411.373 175.044 li
411.373 175.788 411.976 176.391 412.72 176.391 cv
413.464 176.391 414.067 175.788 414.067 175.044 cv
414.067 171.549 li
417.291 174.773 li
417.554 175.036 417.899 175.167 418.244 175.167 cv
418.589 175.167 418.934 175.036 419.197 174.773 cv
419.723 174.246 419.723 173.393 419.197 172.867 cv
414.067 167.738 li
414.067 162.932 li
416.615 162.596 418.867 161.328 420.475 159.478 cv
424.061 161.842 li
425.52 168.947 li
425.651 169.585 426.212 170.024 426.838 170.024 cv
426.928 170.024 427.019 170.014 427.11 169.996 cv
427.839 169.846 428.309 169.134 428.159 168.405 cv
427.242 163.939 li
430.59 166.146 li
430.818 166.297 431.075 166.368 431.33 166.368 cv
431.768 166.368 432.197 166.156 432.456 165.762 cv
432.865 165.141 432.694 164.306 432.073 163.896 cv
428.725 161.689 li
433.191 160.772 li
433.92 160.622 434.389 159.91 434.239 159.181 cv
434.09 158.452 433.377 157.983 432.649 158.133 cv
425.543 159.592 li
421.958 157.229 li
422.618 155.873 422.998 154.359 422.998 152.753 cv
422.998 151.067 422.583 149.479 421.86 148.074 cv
425.552 145.647 li
432.656 147.116 li
cp
f
761.119 350.987 mo
761.119 351.729 760.965 352.435 760.69 353.076 cv
757.372 350.889 li
760.62 348.754 li
760.937 349.434 761.119 350.189 761.119 350.987 cv
cp
756.75 356.211 mo
756.75 352.74 li
759.646 354.649 li
758.884 355.447 757.879 356.008 756.75 356.211 cv
cp
751.848 354.52 mo
754.862 352.539 li
754.862 356.211 li
753.672 355.997 752.622 355.386 751.848 354.52 cv
cp
750.492 350.987 mo
750.492 350.246 750.646 349.54 750.921 348.898 cv
753.938 350.887 li
750.858 352.911 li
750.625 352.313 750.492 351.667 750.492 350.987 cv
cp
754.862 345.763 mo
754.862 349.234 li
751.965 347.325 li
752.727 346.527 753.732 345.967 754.862 345.763 cv
cp
759.535 347.208 mo
756.75 349.039 li
756.75 345.763 li
757.824 345.957 758.788 346.471 759.535 347.208 cv
cp
769.773 347.038 mo
769.837 347.051 769.902 347.058 769.965 347.058 cv
770.404 347.058 770.796 346.75 770.888 346.305 cv
770.994 345.794 770.666 345.294 770.155 345.189 cv
767.027 344.542 li
769.375 342.999 li
769.81 342.713 769.931 342.127 769.645 341.692 cv
769.359 341.256 768.773 341.135 768.338 341.421 cv
765.99 342.965 li
766.637 339.836 li
766.742 339.326 766.414 338.827 765.904 338.721 cv
765.392 338.615 764.894 338.944 764.788 339.455 cv
763.759 344.431 li
761.132 346.158 li
760.014 344.926 758.479 344.083 756.75 343.855 cv
756.75 340.849 li
760.343 337.255 li
760.712 336.887 760.712 336.289 760.343 335.92 cv
759.975 335.552 759.376 335.552 759.008 335.92 cv
756.75 338.179 li
756.75 335.37 li
756.75 334.848 756.327 334.426 755.805 334.426 cv
755.284 334.426 754.862 334.848 754.862 335.37 cv
754.862 338.179 li
752.603 335.92 li
752.234 335.552 751.636 335.552 751.268 335.92 cv
750.899 336.289 750.899 336.887 751.268 337.255 cv
754.862 340.849 li
754.862 343.855 li
753.077 344.09 751.499 344.979 750.373 346.275 cv
747.559 344.42 li
746.536 339.442 li
746.432 338.932 745.932 338.604 745.422 338.708 cv
744.911 338.813 744.583 339.312 744.687 339.822 cv
745.33 342.951 li
743.286 341.604 li
742.85 341.316 742.265 341.437 741.978 341.872 cv
741.691 342.307 741.811 342.893 742.246 343.18 cv
744.291 344.527 li
741.162 345.17 li
740.651 345.275 740.323 345.774 740.427 346.285 cv
740.519 346.731 740.912 347.039 741.351 347.039 cv
741.414 347.039 741.478 347.033 741.542 347.02 cv
746.52 345.997 li
749.333 347.851 li
748.871 348.801 748.604 349.862 748.604 350.987 cv
748.604 352.049 748.842 353.056 749.256 353.964 cv
746.514 355.767 li
741.537 354.738 li
741.025 354.633 740.527 354.961 740.421 355.471 cv
740.316 355.981 740.644 356.481 741.154 356.586 cv
744.283 357.233 li
742.237 358.578 li
741.801 358.865 741.68 359.45 741.966 359.886 cv
742.147 360.162 742.449 360.311 742.756 360.311 cv
742.934 360.311 743.114 360.261 743.273 360.156 cv
745.32 358.811 li
744.673 361.939 li
744.567 362.45 744.896 362.949 745.406 363.055 cv
745.47 363.068 745.535 363.074 745.598 363.074 cv
746.036 363.074 746.429 362.768 746.522 362.321 cv
747.551 357.344 li
750.253 355.568 li
751.385 356.938 753.015 357.876 754.862 358.119 cv
754.862 361.486 li
751.268 365.08 li
750.899 365.449 750.899 366.046 751.268 366.415 cv
751.452 366.599 751.694 366.691 751.935 366.691 cv
752.177 366.691 752.418 366.599 752.603 366.415 cv
754.862 364.156 li
754.862 366.604 li
754.862 367.126 755.284 367.549 755.805 367.549 cv
756.327 367.549 756.75 367.126 756.75 366.604 cv
756.75 364.156 li
759.008 366.415 li
759.192 366.599 759.434 366.691 759.676 366.691 cv
759.917 366.691 760.159 366.599 760.343 366.415 cv
760.712 366.046 760.712 365.449 760.343 365.08 cv
756.75 361.486 li
756.75 358.119 li
758.534 357.884 760.113 356.996 761.239 355.699 cv
763.751 357.355 li
764.773 362.333 li
764.865 362.78 765.258 363.087 765.697 363.087 cv
765.76 363.087 765.824 363.081 765.888 363.068 cv
766.398 362.963 766.727 362.464 766.622 361.954 cv
765.98 358.825 li
768.325 360.371 li
768.485 360.476 768.666 360.527 768.844 360.527 cv
769.151 360.527 769.452 360.377 769.633 360.102 cv
769.92 359.667 769.8 359.082 769.364 358.794 cv
767.019 357.249 li
770.148 356.605 li
770.658 356.5 770.987 356.001 770.882 355.491 cv
770.778 354.98 770.279 354.652 769.768 354.756 cv
764.79 355.779 li
762.278 354.123 li
762.74 353.174 763.007 352.112 763.007 350.987 cv
763.007 349.806 762.715 348.693 762.209 347.709 cv
764.796 346.009 li
769.773 347.038 li
cp
f
741.745 112.038 mo
741.745 113.364 741.47 114.625 740.978 115.773 cv
735.046 111.863 li
740.853 108.046 li
741.42 109.261 741.745 110.611 741.745 112.038 cv
cp
733.934 121.378 mo
733.934 115.172 li
739.112 118.585 li
737.75 120.011 735.954 121.013 733.934 121.378 cv
cp
725.172 118.353 mo
730.559 114.812 li
730.559 121.378 li
728.433 120.994 726.555 119.902 725.172 118.353 cv
cp
722.749 112.038 mo
722.749 110.713 723.023 109.451 723.516 108.304 cv
728.908 111.859 li
723.403 115.478 li
722.986 114.409 722.749 113.252 722.749 112.038 cv
cp
730.559 102.699 mo
730.559 108.905 li
725.382 105.492 li
726.743 104.065 728.54 103.063 730.559 102.699 cv
cp
738.913 105.282 mo
733.934 108.555 li
733.934 102.699 li
735.855 103.045 737.578 103.965 738.913 105.282 cv
cp
757.216 104.978 mo
757.331 105.002 757.446 105.013 757.559 105.013 cv
758.343 105.013 759.045 104.465 759.21 103.667 cv
759.399 102.755 758.812 101.862 757.899 101.673 cv
752.307 100.517 li
756.504 97.7585 li
757.282 97.2463 757.499 96.2 756.987 95.4216 cv
756.475 94.6428 755.428 94.4265 754.65 94.9382 cv
750.453 97.697 li
751.61 92.1047 li
751.798 91.1921 751.212 90.2991 750.299 90.1106 cv
749.383 89.9211 748.493 90.509 748.305 91.4216 cv
746.465 100.319 li
741.769 103.406 li
739.77 101.203 737.027 99.696 733.934 99.2888 cv
733.934 93.9143 li
740.358 87.4905 li
741.017 86.8313 741.017 85.7629 740.358 85.1038 cv
739.7 84.4451 738.631 84.4451 737.972 85.1038 cv
733.934 89.1418 li
733.934 84.1194 li
733.934 83.1873 733.179 82.4319 732.247 82.4319 cv
731.315 82.4319 730.559 83.1873 730.559 84.1194 cv
730.559 89.1414 li
726.521 85.1038 li
725.863 84.4451 724.794 84.4451 724.135 85.1038 cv
723.476 85.7629 723.476 86.8313 724.135 87.4905 cv
730.559 93.9143 li
730.559 99.2888 li
727.369 99.7092 724.547 101.297 722.535 103.615 cv
717.505 100.3 li
715.677 91.4001 li
715.49 90.4871 714.597 89.9001 713.685 90.0867 cv
712.772 90.2742 712.184 91.1663 712.371 92.0789 cv
713.52 97.6726 li
709.865 95.2634 li
709.087 94.7507 708.041 94.9656 707.528 95.7434 cv
707.015 96.5217 707.23 97.5681 708.008 98.0813 cv
711.663 100.49 li
706.07 101.639 li
705.156 101.827 704.569 102.719 704.756 103.632 cv
704.92 104.43 705.623 104.98 706.407 104.98 cv
706.52 104.98 706.634 104.969 706.748 104.946 cv
715.647 103.117 li
720.676 106.432 li
719.85 108.13 719.374 110.027 719.374 112.038 cv
719.374 113.937 719.798 115.736 720.539 117.36 cv
715.636 120.583 li
706.74 118.743 li
705.825 118.555 704.934 119.142 704.745 120.054 cv
704.556 120.967 705.143 121.859 706.056 122.048 cv
711.648 123.204 li
707.99 125.609 li
707.211 126.12 706.995 127.167 707.507 127.946 cv
707.831 128.439 708.37 128.706 708.918 128.706 cv
709.237 128.706 709.558 128.616 709.844 128.428 cv
713.502 126.024 li
712.345 131.616 li
712.157 132.529 712.744 133.422 713.656 133.611 cv
713.771 133.634 713.886 133.646 714 133.646 cv
714.783 133.646 715.486 133.097 715.65 132.3 cv
717.49 123.403 li
722.321 120.227 li
724.345 122.675 727.259 124.353 730.559 124.788 cv
730.559 130.807 li
724.135 137.231 li
723.476 137.89 723.476 138.958 724.135 139.617 cv
724.465 139.947 724.897 140.112 725.328 140.112 cv
725.76 140.112 726.192 139.947 726.521 139.617 cv
730.559 135.579 li
730.559 139.957 li
730.559 140.889 731.315 141.644 732.247 141.644 cv
733.179 141.644 733.934 140.889 733.934 139.957 cv
733.934 135.579 li
737.972 139.617 li
738.302 139.947 738.733 140.112 739.165 140.112 cv
739.597 140.112 740.029 139.947 740.358 139.617 cv
741.017 138.958 741.017 137.89 740.358 137.231 cv
733.934 130.807 li
733.934 124.788 li
737.125 124.367 739.946 122.779 741.959 120.462 cv
746.45 123.422 li
748.278 132.321 li
748.442 133.119 749.145 133.67 749.929 133.67 cv
750.042 133.67 750.156 133.658 750.27 133.635 cv
751.183 133.447 751.771 132.555 751.583 131.642 cv
750.435 126.049 li
754.628 128.813 li
754.914 129.001 755.236 129.092 755.555 129.092 cv
756.103 129.092 756.641 128.825 756.966 128.333 cv
757.478 127.554 757.263 126.508 756.485 125.995 cv
752.292 123.231 li
757.886 122.082 li
758.799 121.894 759.386 121.002 759.199 120.09 cv
759.012 119.177 758.119 118.589 757.207 118.776 cv
748.307 120.604 li
743.817 117.644 li
744.643 115.947 745.12 114.05 745.12 112.038 cv
745.12 109.927 744.599 107.938 743.695 106.178 cv
748.319 103.138 li
757.216 104.978 li
cp
f
177.695 494.541 mo
177.695 495.405 177.515 496.229 177.194 496.977 cv
173.326 494.427 li
177.113 491.937 li
177.482 492.73 177.695 493.61 177.695 494.541 cv
cp
172.6 500.632 mo
172.6 496.585 li
175.977 498.811 li
175.089 499.741 173.917 500.395 172.6 500.632 cv
cp
166.885 498.66 mo
170.399 496.35 li
170.399 500.632 li
169.012 500.382 167.788 499.669 166.885 498.66 cv
cp
165.305 494.541 mo
165.305 493.677 165.484 492.854 165.805 492.105 cv
169.323 494.424 li
165.732 496.784 li
165.46 496.087 165.305 495.333 165.305 494.541 cv
cp
170.399 488.45 mo
170.399 492.497 li
167.022 490.271 li
167.91 489.341 169.082 488.688 170.399 488.45 cv
cp
175.848 490.135 mo
172.6 492.27 li
172.6 488.45 li
173.853 488.676 174.977 489.276 175.848 490.135 cv
cp
187.784 489.937 mo
187.86 489.952 187.935 489.959 188.008 489.959 cv
188.52 489.959 188.978 489.602 189.085 489.082 cv
189.208 488.486 188.825 487.904 188.23 487.781 cv
184.583 487.027 li
187.32 485.228 li
187.828 484.894 187.969 484.211 187.635 483.704 cv
187.302 483.196 186.619 483.055 186.111 483.389 cv
183.374 485.188 li
184.128 481.541 li
184.251 480.945 183.869 480.363 183.273 480.24 cv
182.676 480.116 182.096 480.5 181.973 481.095 cv
180.773 486.897 li
177.71 488.911 li
176.406 487.474 174.617 486.492 172.6 486.226 cv
172.6 482.721 li
176.79 478.531 li
177.22 478.101 177.22 477.404 176.79 476.975 cv
176.361 476.545 175.663 476.545 175.234 476.975 cv
172.6 479.608 li
172.6 476.332 li
172.6 475.725 172.108 475.232 171.5 475.232 cv
170.892 475.232 170.399 475.725 170.399 476.332 cv
170.399 479.608 li
167.766 476.975 li
167.336 476.545 166.639 476.545 166.209 476.975 cv
165.78 477.404 165.78 478.101 166.209 478.531 cv
170.399 482.721 li
170.399 486.226 li
168.318 486.5 166.478 487.536 165.166 489.047 cv
161.885 486.885 li
160.693 481.081 li
160.571 480.485 159.988 480.103 159.394 480.224 cv
158.798 480.347 158.415 480.928 158.537 481.523 cv
159.286 485.172 li
156.903 483.601 li
156.395 483.266 155.712 483.406 155.378 483.914 cv
155.043 484.421 155.184 485.104 155.691 485.438 cv
158.075 487.01 li
154.427 487.759 li
153.831 487.881 153.448 488.463 153.57 489.059 cv
153.677 489.579 154.135 489.938 154.647 489.938 cv
154.72 489.938 154.795 489.93 154.87 489.915 cv
160.674 488.723 li
163.953 490.885 li
163.415 491.992 163.104 493.229 163.104 494.541 cv
163.104 495.78 163.38 496.953 163.864 498.012 cv
160.667 500.114 li
154.864 498.914 li
154.267 498.792 153.686 499.174 153.563 499.769 cv
153.44 500.364 153.823 500.946 154.418 501.069 cv
158.065 501.824 li
155.679 503.392 li
155.172 503.726 155.03 504.408 155.365 504.916 cv
155.576 505.237 155.927 505.412 156.285 505.412 cv
156.492 505.412 156.702 505.354 156.888 505.231 cv
159.274 503.663 li
158.52 507.31 li
158.397 507.905 158.78 508.488 159.375 508.611 cv
159.45 508.626 159.525 508.634 159.599 508.634 cv
160.11 508.634 160.568 508.276 160.676 507.756 cv
161.875 501.953 li
165.026 499.882 li
166.346 501.479 168.247 502.573 170.399 502.856 cv
170.399 506.782 li
166.209 510.972 li
165.78 511.402 165.78 512.099 166.209 512.528 cv
166.424 512.743 166.706 512.851 166.988 512.851 cv
167.269 512.851 167.551 512.743 167.766 512.528 cv
170.399 509.895 li
170.399 512.75 li
170.399 513.357 170.892 513.85 171.5 513.85 cv
172.108 513.85 172.6 513.357 172.6 512.75 cv
172.6 509.895 li
175.234 512.528 li
175.448 512.743 175.73 512.851 176.012 512.851 cv
176.294 512.851 176.575 512.743 176.79 512.528 cv
177.22 512.099 177.22 511.402 176.79 510.972 cv
172.6 506.782 li
172.6 502.856 li
174.681 502.582 176.521 501.546 177.834 500.035 cv
180.763 501.966 li
181.955 507.77 li
182.062 508.291 182.521 508.649 183.032 508.649 cv
183.105 508.649 183.18 508.642 183.255 508.626 cv
183.85 508.504 184.233 507.922 184.111 507.327 cv
183.362 503.679 li
186.097 505.481 li
186.283 505.604 186.493 505.663 186.701 505.663 cv
187.059 505.663 187.41 505.489 187.621 505.168 cv
187.956 504.661 187.816 503.978 187.308 503.644 cv
184.573 501.841 li
188.221 501.092 li
188.817 500.969 189.2 500.388 189.078 499.792 cv
188.956 499.197 188.374 498.813 187.779 498.936 cv
181.974 500.128 li
179.046 498.197 li
179.585 497.09 179.896 495.853 179.896 494.541 cv
179.896 493.164 179.556 491.867 178.966 490.719 cv
181.982 488.737 li
187.784 489.937 li
cp
f
152.256 107.763 mo
152.256 109.073 151.984 110.321 151.497 111.455 cv
145.633 107.59 li
151.374 103.816 li
151.934 105.018 152.256 106.352 152.256 107.763 cv
cp
144.533 116.996 mo
144.533 110.861 li
149.652 114.235 li
148.306 115.646 146.53 116.636 144.533 116.996 cv
cp
135.871 114.007 mo
141.197 110.506 li
141.197 116.996 li
139.095 116.617 137.238 115.537 135.871 114.007 cv
cp
133.475 107.763 mo
133.475 106.453 133.746 105.205 134.233 104.071 cv
139.565 107.586 li
134.122 111.164 li
133.709 110.108 133.475 108.964 133.475 107.763 cv
cp
141.197 98.5295 mo
141.197 104.665 li
136.078 101.291 li
137.424 99.8806 139.2 98.8899 141.197 98.5295 cv
cp
149.456 101.084 mo
144.533 104.32 li
144.533 98.5295 li
146.433 98.8723 148.136 99.7815 149.456 101.084 cv
cp
167.551 100.783 mo
167.665 100.807 167.779 100.818 167.89 100.818 cv
168.665 100.818 169.36 100.276 169.522 99.4875 cv
169.709 98.5852 169.129 97.7024 168.227 97.5159 cv
162.698 96.3728 li
166.847 93.6453 li
167.617 93.1394 167.831 92.1047 167.325 91.3347 cv
166.819 90.5652 165.784 90.3513 165.015 90.8572 cv
160.865 93.5847 li
162.009 88.0559 li
162.195 87.1536 161.615 86.2708 160.713 86.0842 cv
159.807 85.8972 158.927 86.4783 158.741 87.3806 cv
156.922 96.1765 li
152.279 99.2283 li
150.303 97.0505 147.591 95.5613 144.533 95.1584 cv
144.533 89.845 li
150.885 83.4939 li
151.536 82.842 151.536 81.7859 150.885 81.1345 cv
150.234 80.4832 149.177 80.4832 148.526 81.1345 cv
144.533 85.1262 li
144.533 80.1609 li
144.533 79.2395 143.787 78.4929 142.865 78.4929 cv
141.944 78.4929 141.197 79.2395 141.197 80.1609 cv
141.197 85.1262 li
137.205 81.1345 li
136.554 80.4832 135.497 80.4832 134.846 81.1345 cv
134.194 81.7859 134.194 82.842 134.846 83.4939 cv
141.197 89.8445 li
141.197 95.1584 li
138.043 95.574 135.253 97.1443 133.263 99.4353 cv
128.291 96.1575 li
126.483 87.3591 li
126.299 86.4563 125.416 85.8762 124.514 86.0603 cv
123.611 86.2458 123.03 87.1282 123.215 88.0305 cv
124.351 93.5608 li
120.738 91.1785 li
119.968 90.6716 118.934 90.884 118.427 91.6536 cv
117.92 92.4226 118.132 93.4573 118.901 93.9646 cv
122.514 96.3464 li
116.985 97.4822 li
116.082 97.6677 115.501 98.5496 115.686 99.4519 cv
115.848 100.241 116.543 100.785 117.319 100.785 cv
117.43 100.785 117.543 100.774 117.656 100.751 cv
126.454 98.9436 li
131.426 102.22 li
130.609 103.899 130.138 105.775 130.138 107.763 cv
130.138 109.641 130.557 111.419 131.291 113.025 cv
126.443 116.211 li
117.647 114.392 li
116.743 114.206 115.862 114.786 115.676 115.688 cv
115.489 116.59 116.069 117.473 116.971 117.659 cv
122.5 118.802 li
118.884 121.179 li
118.114 121.685 117.9 122.72 118.406 123.49 cv
118.726 123.978 119.259 124.242 119.802 124.242 cv
120.116 124.242 120.434 124.154 120.716 123.968 cv
124.333 121.591 li
123.19 127.119 li
123.003 128.022 123.583 128.905 124.486 129.091 cv
124.599 129.114 124.713 129.126 124.825 129.126 cv
125.6 129.126 126.294 128.583 126.457 127.795 cv
128.276 118.999 li
133.052 115.859 li
135.053 118.28 137.934 119.938 141.197 120.368 cv
141.197 126.319 li
134.846 132.67 li
134.194 133.322 134.194 134.378 134.846 135.03 cv
135.171 135.355 135.598 135.518 136.025 135.518 cv
136.452 135.518 136.879 135.355 137.205 135.03 cv
141.197 131.037 li
141.197 135.365 li
141.197 136.286 141.944 137.033 142.865 137.033 cv
143.787 137.033 144.533 136.286 144.533 135.365 cv
144.533 131.037 li
148.526 135.03 li
148.851 135.355 149.278 135.518 149.705 135.518 cv
150.132 135.518 150.559 135.355 150.885 135.03 cv
151.536 134.378 151.536 133.322 150.885 132.67 cv
144.533 126.319 li
144.533 120.368 li
147.688 119.952 150.477 118.382 152.467 116.091 cv
156.907 119.018 li
158.714 127.816 li
158.876 128.605 159.572 129.149 160.347 129.149 cv
160.458 129.149 160.571 129.138 160.684 129.115 cv
161.587 128.929 162.168 128.047 161.982 127.145 cv
160.847 121.615 li
164.992 124.347 li
165.275 124.534 165.594 124.623 165.909 124.623 cv
166.451 124.623 166.983 124.359 167.303 123.873 cv
167.811 123.103 167.598 122.069 166.829 121.562 cv
162.683 118.829 li
168.213 117.693 li
169.116 117.508 169.697 116.626 169.512 115.723 cv
169.327 114.821 168.444 114.24 167.542 114.425 cv
158.743 116.232 li
154.304 113.306 li
155.121 111.628 155.592 109.752 155.592 107.763 cv
155.592 105.676 155.078 103.71 154.183 101.969 cv
158.755 98.9646 li
167.551 100.783 li
cp
f
400.655 416.37 mo
400.655 417.268 400.469 418.122 400.135 418.899 cv
396.119 416.251 li
400.051 413.667 li
400.434 414.49 400.655 415.404 400.655 416.37 cv
cp
395.365 422.694 mo
395.365 418.492 li
398.871 420.803 li
397.949 421.77 396.733 422.448 395.365 422.694 cv
cp
389.432 420.646 mo
393.08 418.249 li
393.08 422.694 li
391.64 422.435 390.369 421.695 389.432 420.646 cv
cp
387.791 416.37 mo
387.791 415.473 387.977 414.618 388.31 413.841 cv
391.962 416.249 li
388.234 418.699 li
387.952 417.976 387.791 417.192 387.791 416.37 cv
cp
393.08 410.046 mo
393.08 414.248 li
389.574 411.937 li
390.496 410.971 391.712 410.292 393.08 410.046 cv
cp
398.737 411.795 mo
395.365 414.012 li
395.365 410.046 li
396.666 410.281 397.833 410.903 398.737 411.795 cv
cp
411.131 411.589 mo
411.209 411.605 411.287 411.613 411.363 411.613 cv
411.894 411.613 412.37 411.242 412.481 410.702 cv
412.609 410.084 412.212 409.479 411.594 409.352 cv
407.807 408.568 li
410.649 406.7 li
411.176 406.354 411.323 405.645 410.976 405.118 cv
410.629 404.591 409.92 404.444 409.394 404.791 cv
406.552 406.659 li
407.335 402.872 li
407.462 402.254 407.065 401.649 406.447 401.521 cv
405.827 401.394 405.224 401.792 405.097 402.409 cv
403.851 408.434 li
400.671 410.524 li
399.317 409.033 397.459 408.013 395.365 407.737 cv
395.365 404.097 li
399.716 399.747 li
400.162 399.301 400.162 398.578 399.716 398.131 cv
399.27 397.685 398.546 397.685 398.1 398.131 cv
395.365 400.866 li
395.365 397.464 li
395.365 396.833 394.854 396.322 394.223 396.322 cv
393.592 396.322 393.08 396.833 393.08 397.464 cv
393.08 400.865 li
390.346 398.131 li
389.9 397.685 389.176 397.685 388.73 398.131 cv
388.284 398.578 388.284 399.301 388.73 399.747 cv
393.08 404.097 li
393.08 407.737 li
390.919 408.021 389.009 409.097 387.646 410.666 cv
384.24 408.421 li
383.002 402.395 li
382.875 401.776 382.271 401.379 381.653 401.505 cv
381.035 401.632 380.637 402.236 380.764 402.854 cv
381.542 406.643 li
379.067 405.011 li
378.54 404.664 377.831 404.809 377.484 405.336 cv
377.137 405.863 377.282 406.572 377.809 406.919 cv
380.284 408.55 li
376.496 409.329 li
375.878 409.456 375.48 410.06 375.607 410.678 cv
375.718 411.218 376.194 411.59 376.725 411.59 cv
376.801 411.59 376.878 411.583 376.956 411.567 cv
382.982 410.329 li
386.387 412.574 li
385.828 413.724 385.505 415.008 385.505 416.37 cv
385.505 417.656 385.792 418.874 386.295 419.974 cv
382.975 422.156 li
376.95 420.911 li
376.331 420.784 375.727 421.181 375.6 421.798 cv
375.472 422.416 375.869 423.021 376.487 423.148 cv
380.274 423.932 li
377.797 425.56 li
377.27 425.906 377.123 426.615 377.47 427.142 cv
377.689 427.476 378.054 427.657 378.426 427.657 cv
378.641 427.657 378.859 427.597 379.052 427.469 cv
381.529 425.841 li
380.746 429.628 li
380.619 430.246 381.016 430.851 381.634 430.979 cv
381.712 430.994 381.79 431.002 381.866 431.002 cv
382.397 431.002 382.873 430.63 382.984 430.091 cv
384.23 424.066 li
387.501 421.916 li
388.872 423.573 390.845 424.709 393.08 425.004 cv
393.08 429.08 li
388.73 433.43 li
388.284 433.876 388.284 434.6 388.73 435.046 cv
388.953 435.269 389.245 435.38 389.538 435.38 cv
389.83 435.38 390.123 435.269 390.346 435.046 cv
393.08 432.312 li
393.08 435.276 li
393.08 435.907 393.592 436.418 394.223 436.418 cv
394.854 436.418 395.365 435.907 395.365 435.276 cv
395.365 432.312 li
398.1 435.046 li
398.323 435.269 398.615 435.38 398.908 435.38 cv
399.2 435.38 399.493 435.269 399.716 435.046 cv
400.162 434.6 400.162 433.876 399.716 433.43 cv
395.365 429.08 li
395.365 425.004 li
397.526 424.719 399.437 423.644 400.8 422.074 cv
403.841 424.079 li
405.078 430.105 li
405.189 430.646 405.666 431.018 406.197 431.018 cv
406.273 431.018 406.35 431.011 406.427 430.995 cv
407.046 430.868 407.444 430.264 407.317 429.646 cv
406.539 425.858 li
409.378 427.729 li
409.572 427.857 409.79 427.918 410.006 427.918 cv
410.378 427.918 410.742 427.738 410.961 427.404 cv
411.309 426.877 411.163 426.168 410.636 425.821 cv
407.797 423.95 li
411.584 423.171 li
412.203 423.044 412.601 422.44 412.474 421.822 cv
412.347 421.204 411.743 420.806 411.125 420.933 cv
405.098 422.171 li
402.058 420.167 li
402.617 419.017 402.94 417.732 402.94 416.37 cv
402.94 414.94 402.587 413.594 401.975 412.402 cv
405.106 410.344 li
411.131 411.589 li
cp
f
885.311 275.481 mo
885.311 276.222 885.157 276.928 884.882 277.57 cv
881.564 275.383 li
884.812 273.248 li
885.129 273.928 885.311 274.683 885.311 275.481 cv
cp
880.942 280.705 mo
880.942 277.234 li
883.838 279.143 li
883.076 279.941 882.071 280.501 880.942 280.705 cv
cp
876.04 279.014 mo
879.054 277.033 li
879.054 280.705 li
877.864 280.491 876.814 279.88 876.04 279.014 cv
cp
874.684 275.481 mo
874.684 274.74 874.838 274.034 875.114 273.392 cv
878.13 275.38 li
875.051 277.405 li
874.817 276.808 874.684 276.16 874.684 275.481 cv
cp
879.054 270.256 mo
879.054 273.728 li
876.157 271.819 li
876.919 271.021 877.924 270.46 879.054 270.256 cv
cp
883.727 271.702 mo
880.942 273.533 li
880.942 270.256 li
882.016 270.45 882.98 270.965 883.727 271.702 cv
cp
893.965 271.532 mo
894.03 271.545 894.094 271.551 894.157 271.551 cv
894.596 271.551 894.989 271.244 895.081 270.798 cv
895.186 270.288 894.858 269.789 894.347 269.683 cv
891.219 269.036 li
893.567 267.493 li
894.002 267.207 894.124 266.621 893.837 266.186 cv
893.551 265.75 892.965 265.629 892.53 265.916 cv
890.182 267.458 li
890.829 264.33 li
890.935 263.82 890.606 263.32 890.096 263.215 cv
889.584 263.109 889.086 263.438 888.98 263.948 cv
887.951 268.925 li
885.324 270.652 li
884.206 269.419 882.672 268.577 880.942 268.349 cv
880.942 265.342 li
884.535 261.749 li
884.904 261.38 884.904 260.782 884.535 260.414 cv
884.167 260.045 883.569 260.045 883.2 260.414 cv
880.942 262.673 li
880.942 259.863 li
880.942 259.342 880.519 258.919 879.998 258.919 cv
879.476 258.919 879.054 259.342 879.054 259.863 cv
879.054 262.673 li
876.795 260.414 li
876.427 260.045 875.829 260.045 875.46 260.414 cv
875.092 260.782 875.092 261.38 875.46 261.749 cv
879.054 265.342 li
879.054 268.349 li
877.269 268.584 875.691 269.473 874.565 270.769 cv
871.751 268.914 li
870.729 263.936 li
870.624 263.425 870.124 263.097 869.614 263.201 cv
869.104 263.306 868.775 263.805 868.88 264.316 cv
869.522 267.445 li
867.478 266.097 li
867.042 265.81 866.457 265.931 866.17 266.366 cv
865.883 266.801 866.003 267.387 866.438 267.673 cv
868.483 269.021 li
865.354 269.664 li
864.844 269.769 864.515 270.268 864.62 270.778 cv
864.711 271.225 865.104 271.533 865.543 271.533 cv
865.606 271.533 865.67 271.526 865.734 271.513 cv
870.712 270.491 li
873.525 272.345 li
873.063 273.294 872.797 274.356 872.797 275.481 cv
872.797 276.543 873.034 277.549 873.448 278.458 cv
870.706 280.261 li
865.729 279.231 li
865.218 279.126 864.719 279.455 864.614 279.965 cv
864.508 280.476 864.836 280.975 865.347 281.08 cv
868.475 281.727 li
866.429 283.072 li
865.993 283.358 865.872 283.944 866.158 284.379 cv
866.34 284.655 866.641 284.805 866.948 284.805 cv
867.126 284.805 867.306 284.755 867.466 284.649 cv
869.512 283.305 li
868.865 286.433 li
868.76 286.943 869.088 287.443 869.598 287.548 cv
869.663 287.562 869.727 287.568 869.79 287.568 cv
870.229 287.568 870.622 287.261 870.714 286.815 cv
871.743 281.838 li
874.446 280.062 li
875.577 281.431 877.208 282.37 879.054 282.613 cv
879.054 285.98 li
875.46 289.574 li
875.092 289.942 875.092 290.54 875.46 290.909 cv
875.644 291.093 875.886 291.185 876.127 291.185 cv
876.369 291.185 876.611 291.093 876.795 290.909 cv
879.054 288.65 li
879.054 291.099 li
879.054 291.62 879.476 292.042 879.998 292.042 cv
880.519 292.042 880.942 291.62 880.942 291.099 cv
880.942 288.65 li
883.2 290.909 li
883.385 291.093 883.626 291.185 883.868 291.185 cv
884.109 291.185 884.351 291.093 884.535 290.909 cv
884.904 290.54 884.904 289.942 884.535 289.574 cv
880.942 285.98 li
880.942 282.613 li
882.726 282.377 884.305 281.489 885.431 280.193 cv
887.943 281.849 li
888.965 286.827 li
889.057 287.274 889.45 287.582 889.889 287.582 cv
889.952 287.582 890.016 287.575 890.08 287.562 cv
890.591 287.457 890.919 286.958 890.814 286.447 cv
890.172 283.318 li
892.518 284.865 li
892.678 284.97 892.858 285.021 893.036 285.021 cv
893.343 285.021 893.644 284.871 893.825 284.596 cv
894.112 284.161 893.992 283.575 893.557 283.288 cv
891.211 281.742 li
894.34 281.099 li
894.851 280.995 895.179 280.496 895.074 279.985 cv
894.97 279.474 894.471 279.146 893.96 279.25 cv
888.982 280.272 li
886.47 278.617 li
886.932 277.667 887.199 276.606 887.199 275.481 cv
887.199 274.3 886.908 273.188 886.401 272.203 cv
888.988 270.502 li
893.965 271.532 li
cp
f
611.847 514.64 mo
611.778 514.64 611.708 514.626 611.641 514.596 cv
611.502 514.533 597.607 508.31 581.354 507.563 cv
565.527 506.839 557.335 510.696 557.254 510.735 cv
557.005 510.854 556.707 510.751 556.587 510.503 cv
556.466 510.254 556.57 509.956 556.818 509.835 cv
557.156 509.671 565.291 505.823 581.4 506.563 cv
597.852 507.32 611.914 513.621 612.054 513.685 cv
612.305 513.799 612.417 514.095 612.302 514.347 cv
612.219 514.531 612.037 514.64 611.847 514.64 cv
cp
0 0 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.3
%%For: ( ) ()
%%Title: (m0045_33.eps)
%%CreationDate: 7/3/2019 11:53 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",K=*NZFf'%NGCRtJ*c5;2!"#u.uCh&*='Hhu6_?.<HkMc=*GOI!f"9pF'R3'.r]5:AY=4PTi,aF[^@qMW9W&.+$o8e\\,Vg"u
%irke?K`jkSI(UT.s8C:7nj2BcBRKkl_S!ZW"?n@EP"7[^7c%jtmKk],W>gh?g+r7hWtdR/VU^S!ikP,?mo1sV);TLLe8",A?`^-f
%X3a?u'OOb'RZTA-]&*-P@>6W00;S2>$[TVhpt]gPCufB&Jrtfe7cCQ]k?I#+r'ClK7_9,>_lSNabPdeIR>?nIs4/5DNDcV'[e+a^
%Cchk4<'-?.U`#r,dh=DPN!'+2i1r#7'_P5'9sO6]T\sTIi56^i^@N\[Zq)hV-=Y(]`r8Jh=Jad1r!Te)^BaK&)h-st]MG3lUsfX?
%K;/Dh5s^1QSDAbp0EJV`&L7[$/[JU3X_R0;o#7b7UY`*:D1a<n+Gso9+e;V`j(RV:ND=*t[,"Rk5h$4ZL_:Y-):FY2Ks7B2XLtWh
%7A\bDVc^s"MX`L^4#$;Y@G1LP=m\oE:XBc@@2SRU5&o8T):hf_dKW#ad\]nST:,qY7TIAJ+B?lfC#!MPIr1"CDO$/=(l)8[TS+OR
%V)uk'VgbB?1/QF[H]mutdE%d."BFBaMAE))LqlqT"t?e[:L8!^JHnKHS22`o)1-<B$-.$tOC_CA1hc`r<@Lod&^VLdi+s(Z[jm*'
%"i*e=rBj$a/$<70q6_p]qV,k^iUDN^?K.lrOVfEmR^)%sQ94bE6a%X43/.8[Lf4^5WfbZ_3jss@">]hk(]2`0p'EK_GTQlW')km2
%r#:\YXZVZ:4HF-#*maC>4e#'+m^/H/+daP6OX)*;,U&O#V,GU3WerL1MD-OXORB-+@&f)lp^R6I=?MUOnMk]Oa72hcN\IFHSkZ%,
%M0)Oi&0R74SLDo#AVq(jPFfarc?Z":meD?@8/M7o0VlmcQC^I<n1VX$;>?L)m]_=e7_8(B*[+DU(Pea/U-g/&pm9?f?a(F4_HA<`
%.0^'4Uu>[68YrZ9OV0sOEglQ^Z3pW[Y*=6)!(EMh8*;8@4/-a\kRW7gNVF<FU4T2*drVtUn-agkNK0e`CM7@V&c^i&&kMZqs4YP(
%'E1ESU_3W)@8_6AbbZ07S;o35j;gs86q:+M]LOZu4GPk[H:e0'St\\eVIM\sUEIhm_B=DiNZs%M4/JI=7N1eMJl,fD)C]$,BDdZA
%80E"u[+qo3b!%ikeT=<P*MmcJNZ_+tL+7me,`Z[ipF1QUpN1#i4G(3j(l(;45(Yfde)BNkoK<)WOf*q+24Ma[15HF&,!T%lHe)!i
%5^17pHZnO*X(MZ:diBCkBd2fudjE-+Hd[(^h3/'&jKOhin$0esf0S)XR1;p&@PkkBr3T`UC]A>n4k9G*5Cu.]H_9p8\r.bLl@%)&
%=f06Q:\ph7oN4u%ZRba1VU8>U:\k`_dGs(2rIOBn"E!FPd[t'5*qqk_&(CK^rB/46s&/[@A*8Ys,)r*((W98sKj5YoQP3:H:"<,[
%Hl%=bprTj15gTcGMF`10Jj`fW&R,g*9B$hKr+Zp,+UE<&]%c'!5`#MT.V3hC,;PL@*Ut6=LkFAt0tTM5M9OZW8u5F-Iel\[":#;\
%7R%K13aO:)&OU)3)sJt].JjO7B4,[:79dn#p3_NR3%jSLZ48dWk#=[-d2"]Bkn,6B2C18;QEhC-&OsnLB4`Uo'h"oJE^Jh$5u(g3
%`=WA#3:isZBFQ.=W]`D6:J(sW-F3e.cCo2K;8kib.E_U,=+To`?iau/>u_">1F+tP:CPMn-TP>:nWFUQU+)g/n.@V`O;H%*rGsE^
%Lh8r5Tpn`\!pCnQ`5/"j0(K*8$9"'o'g#"rSS<&3Y1gCTS;n^Y!AT/?h4Z:_SAH^"AuATp-U>+Y/jWH$cL&tR^4Is`Cni/ZGLP3n
%H91E>fb&3^f!?uDR\JM#-R[q%Q.HSm;d3b><)4H53Y5l&S'e[i'3S4JnW^&n>WP?0EpR%Pj$UD9R](gCGu!M_P`eoa[]*G(U=uK_
%,R1X5`X)jSN<d(>\^$$#_;QLh4VSlX;+X&/'(H&Y(&lnB3JDVs&=,s"_';d%OD.g^&jn\*Wg^%*5_R4P0mp>.k7`hI:f92EWP.&&
%@ATPE%Th)@8dg"J&d6nT@0iTJC*Y,/q(]qtaDF>qd5i,iFYmJ]k[!,=2B$"7+X?^q$>BaFq,j7n<%68FEK4X@TA87pU5#1G-msg2
%nSuT`CY`C;8p6<eb3An$OlS2&7d;oC51-8Nl=fh%(,m5/b:;8uUBM*l4+\*:O$d$2]:=YM@WmhO3j1(^jlC[3V_H7a4?@!,L-HNu
%a0=P%,cm14&s0J?>Sn]06:mO@PVPiS$:j.tQgkXi([W;/afqLD+(89jEM_lm7^?q(Vi>EB?-qM'%C=)3Q+GuFU)ZGT6.XG"Wfa&2
%Z/[o;%*$p9d5\ta4)F&:1c\E'Tn`D/]?nlbE%[]:nIpq6%`<kW(f/+.RZJ_5,>A@HM`^hWL7RJf[$hV/i_3TX;m]L@Ws(,Z1aKdK
%%E-[]`<#!Mrhf$J7jos_3gL\8A<2FpSZF/H5T!Ue#A>4G63^H1Z-lB>;lNk]-GmMW=ImO>@a&hK6T"k7R;H8RO92&?FOXn^!Epro
%;gC-T-pV7#s#?"&"#SsX_/7Dj"U>juI3s<r+5uC6p\%ig2Sr-Y'_r_%3&6uUdsi!K&u2;_jRZ!68(ppK'cagKkAX^N1_WrGKG:[O
%S$E(.(UXd^B+q.o!&-\0S4Wo2;VFUp[nW6R9I-U0GG,+VEDYOXF^d(.OG,Zh.[UR!/>qtSJ8LJf+Z?'=@QuJ%p@lNcC(bLp#[hqH
%?!`PtHVn`miC7/;cX%VV"%XdOna<=?p`J8FE2d8\$F<"m)P"E(c_g4QK+n^,3%V;lPDqBJ'fm@i=;r.U6T"nL2:^kuYTQk9SF;2)
%/r?O)W5XnK?NZl0eLR;/8:KN*A.+ENBV#^]97a?o,4g\kJLY+O9TV7uaM1djP-T#9a^Dh6-QOoN:D7PVYsSk;!Y>HVV0^+//3/$K
%=:c.H&86XgYmdusM^KqkQk5+f-r;<`3QuI\[@7JO/-G8X<?@IT@)7Fa-)qXa;?Do#OFRN)kdI611*@EAm3*-e_'l8p:0HYOMB87W
%d7T:o>!u#bd7FY*"Y*I[@SBPE*`VHi'_r!5+R2(&D)YT865XsFDTO_iG//rJJt*fd+P<3^/->i!U;s#e#V6%9Y]_6`/)-J9+%b94
%'K(=Re`^qfRII"WZ:3?PpYfBtTlCX%O]`AC/5eL6+@3:RKk)".2@YXgOPPme8T@T/9nl[8<6%RULq=_E/=TQ`7#Rk$'/:9V?&8P1
%@N&Bc_;uHL2Y!R"F4]k&F\WTqP2iK!c]sR8*L7Vs0c%YBl59Jn@\aitS0l3$NF%*+.>2]X\E'Ug;q-o)GY1[k9&!''m3S>Y6P,@m
%@Ut)'lL5diMI%s=`FG!Wb&IaZ3fTiahk*u/AKBtpDoY&rI"pD8#HabWJSn&>?gBG+i0@:#+,"E$9o?HJgi\*Q(ai-ML#c]T9agHn
%f%KmXFpKID&m8?[JjVJjO[,D1CFCHDfAnn[MX*`Z!LI>Oq"_W8b`UVM/1E'c.!t=03m'-Z&/h48<6K9,#r/_G6WWLWSG,8p73+^E
%"ljt?VG52]?g$X$4N6"+&99TW6r$L"QWg(E"T)%kMCcCo$'`MMQk*B`BJeu;b_t=C+f=@s#9$lq**NF(P'=\@EIYPErV.5-g+c?r
%lZfj+imbIL)d@:2<=`;],(;^II>qlP7H6J#OUMf1FTCSug,O]I+1B87j-oclkrU%T)4hlXEQUm,L_>!OHcIOYQPhcOAc#YrXOEie
%-cbM"2_B%u=*h5Oee*,&O@<!dnp-7?)p"0r3MR:LQ8e=<TBa's0DDL]#FE)eG*j&dRVKUN@gGO-A\%=[$MbBL]Wi,j??R;tD]Utl
%;#6C'5sa5=m\>`Ql01a(7KWG;0$r%X\s8pj:^_JhhX.uB'f2X$]\43`p7Va8CV!V33lOX62GLHQ/!;2[_2\(W;%EAH41c>lPhS*i
%oa2Jd+u;Wp"OGbM7^2hb&"fO`3NEDOBRf/hIkEbFobE$_<2+u]fsl\eE<13QAZ41>p-p.PK-C5BBGK"HGuB;))r7Zm^heQ@*4ZuC
%HK`4\FCo);!iF!/KNs9Q_(PV"'\6EE!:t!>9#ADp"R'i'*q'3peU`ja)3pd[O[?2_;/[\>68$g%FQRZdiof\_3$\pb.\i!7H=:mO
%W?KC&>HR'>qGbLlJ$'-^021#b%Jl<D?H="ubh]a#4HsuWSA`TS+0f9QFu>C[(jFLc8de+BM.(05NoGHKF.k[u("*7s7*i"U]&![?
%+/cWi_TRC6nj]c^p-(uPAj`Ek1r<uYY)Z?i6njj20n?%%1.c'C8DihdN3AiMK9StS56Oq&D6coSUXGE!NRd5e&QJciqn$Sflm-?%
%<5nS&3#;I7o6&P1e;q$a%Sb/2)a`(oW=^"?Y>(t/,t*dX,#8eoigl9?.rI61bNF4RV+.`4M*Jn!)h-S*%t9\lCe9V#2MUqe4N_Bh
%=aHgo7;/]odUEC''j@n&+WLUKaIF"Ri%YN>XsJ%]Am`FScuj/`V;,.g(V$XM]0:e-GY\CdYHo&LZ4I/gP8LEp7?&2*D]5d5\P'6L
%9G9"X8M3#:=A=kN2dM'd5+pVpLQWQB*rVmT(W_18!s'@>U70(n\0;AMNJK?Wq2jpH\-@`S:kMiAl#E>b`d:FMO=&o]@H@KLbE6%B
%,gm0"1q+>k2uLZU<Je%ILl.+Mpkq!^&1Iri*3Y="GgW&!PqcMW+\Q]L#&"@@a=cXA.VL"PNb3[;Q2RkKgls#VFhrb;Ec[=7LBd.d
%bhkTK*r3'-do+KQq\3"oRZs$?.2h=(2Q*G%PfA(ppX,br-_S\I4,_1^"kp3659"(um*6UfTD[\["\&Uo&Z:NiT<dn6hg_^h]p3&W
%"+u(%Mk@GUrMr<`]sG=Ne]Y-X9`0V%J%0haAOuL*Vc)r[O.T`ks/4pQDdF<4]N7:mkUjiIh2\Lt`D?P?:,WISS:phuDV"@*(48`+
%5!tI@baM\?ch7ji\W"r(2#g2j%3Z06B-q`!2"3ejs8M2?Sl8tD[18_^\'.V=YYd7Wqk#aJ@-.mT[?5Bs<om,Pi&f8u_*PlG7\6+?
%AM$%UA&*(#-EL:;JPQJDeTB"(dBh2d*'0]uqBq5rC"7P4d+2afLJ]jsY(8$lQP%\(]qJXoEhYYR8`^2Id=G*,+VE(7hg-3iYZab/
%$Q4Z6%#dCT^idfC<%!sNLET3XDRFt_<YYd=X*)LiCShh)r\-MT0iKs`q=<I2G3`KQ[FO]PND(gM[?'?)ofT0=V,i5$\65k4$AOhf
%>Et^+Emo?Hm#0DQ7\S@D-9^]%$AD")]Sm]Z!Jci72p7K!04o?1ARF"FCYdBnSF=ba5"A@V:G7oDIarLOXjX4nVfB2AJ]j=+c,fft
%[1.%HN)*qdNUmA9cUTI$J3a5nX%iJ=$2]3q[Vi9W1Vq19RO+.FS/F4Ts/GEKG4Th#67hs[9eH4=;?3k2g3UHs*.>r#M5DO+'lYEC
%SE3k?bYK6!dn(k[M7'+[MNnBj)dfI@BcB2;2sX1cK\;\@lV3#!T*(MG%4T"VFEL+";!?B<atiU"k'A*h?5jtOh<]Ub7H!D'o]44I
%)!$%<P/g']FmIX,VkUo55O,W\S.#F2JC>VLn:hk^W*,EM#a6oCC'Ddo&.$RjGmH^<HP6@cIj*KaEfF33pbjo^A>@WbnjBU'Cm\QS
%5T4s>6GV*c-oR83JRuJ*;)To#En^[B%cF/(d10Nj>-k<FYb)S/.<ls@JL3gE(WlU6JVHCd?+k]]'D+PG%6#_F9Tmi9p2B_rZ6JgE
%j;E4Ro^tLgGU$eRHt']tjZ_jcA[FKU0+Pr%S<V6[S.6gbH/it?BWk3'l4,uiK"0.kBQWP&q6p:?n=m7,i/'J:0I)$A<_dQN.Ecu)
%J2Fr-jT5-J&_A]mm0]Y*T+fj$E4?:3(W#c1HZV0@-t((mn@=`>ZCb9f$h<b-R#$PRB#i%5qm<U#OE`Up,T_re3^#-,N:J:nFE!Eg
%A0e'YA=-)DXNGd\V$B%iHQb7KMc=7/biLcl6'@MZ&_Kbo7:1.Cb"YI14aX#q0JDPMV;/_JS(9E(AkKV.V*gqS4#8Chmo%ATE/cYU
%b^!=&S(D]P>&IZic"jij1?Q""]U&H@>)<%ceXZ-bWk"Me_l..hHGTOT/M>@p;mU2Al9)'!f;lJcXES@A-]8Jl+Rj`V%9i-c_Y?tO
%gT5bE1>UlPU+9=2N/CU7@oYS3/7;iRZs"3X&K=I#FQ^mie?.XTj;''ZF1orY`Ldqnkg7#2a4,GhZWM#]m4m0G_mY"hBU_RDpQ2lC
%h:S9eDT0jiX0"=naQ6ouM5<RuG63tX1sLdF,m&F!-:M;Ob5f0q1J_?0o!:HinE`d^Iau*4L>$U1,0n)#+K^Z(eFQ-VYBqLm%t*fo
%s!KSK$I1`.m,]=.kgSZg6fbo_TC_)=&$5PIJqYoENJo;nE=%JnW:4-?:GTs]S!?J?`7s:u`pZ8>@gB^]47(1%dc9#!9t^f2iX3`@
%qO53AX4jZ*4C>_C0l7uI6ePE"4U;.@-<AiFTYZQ&=!q\M*l;u@'V0Y/YgZ=aW.h06)MC]&Omd@Rr!O*cl=6Q+<SHQGdIncOR>R!3
%8t0WO0Fs3D'D&+R[XMeapFD87Oodd(XHJ.)SB5Tf]:jXKH2L\ok'-Y!?->*smTc.M25fneQVZBnCGF!drq(/4@JXp4&NrZtg@+N>
%kKe#C]:Rbb_]Bli[e)n_j+S]fi+-WJmrDK1Ti0@Q>]H=6b05KGB'(Nc01tqlYVjh0f<guXgu$IG&i>;RaS0^bF6>EWcKdPTiooJq
%T=ORiB<'F!E'LG%#KN^sBB;6\pR3-"rgTOLRA>D[n6N8i`%^k=i?c+)'uTg$ch;^qR<8_+mJ!8qo4Rs@52/<0c=0fUc\ud=E9Ue"
%3aUAV%AT4DC?/q.?5BJ(FIAAnBc\nlI%A!4>p`"tW;FNg%`7P\#nqb=iSTe&c+mUL3=fj^1YJ97@V-q?,V#p.:!XdR&t2b43KkVA
%nN$Vs+25%/?U'krq<B9pE<)n?$)cXlH!#fi)7NGo@5nd!HtT1do-0T*nSrPrQLo9hFJdg-H'6.RS%=qVZY+<n%hB$k1ZQ?b&G(*M
%rNo^s?Mg`%)O1?q$am*@*i2IP-RI?<`uElmj?7BeDF1?tNYp/rC^OKlWM*.P,(oDN7a<E-o'83h'YF(5A_+P.('0nlApMJR9J;g'
%3B8!/K9UGL;kb'8'mqO.#C:]hPG62eB&G#\RJ`!TnMu$rn<5'%@5bd>/YDL]4(E/Ml(cH+4=RRNQ%kuZG^(R=fCGi:QY.FGTG+FY
%oL>\F8Ic]S$\NB%0j@2:hha*'"^:meh21-FQs!S+R,L,(4GdM3%:ai7b#C#oHJ'!N#&cqu^GBgemmZd+/nQF%bjRt<,+&,=./t!0
%*_M&&\JO@7P6fFK]dW^FF>&Lf@V-q?I*6k6fRL`N.%ZZBlFksM?Bcljn@V;(<d`](hi$Jc(=R0dht:<?r-,^g`="E,@eG66<LR('
%VoFoO^Ygsr.EgE$4O;Is??8]^hMrP],Db67`?[25<r3\JLG&t>T?>=[<Z%]n).$@&An@m4n$Y7Mn)!_MU5nn^]?JLtg/n3@2"tc,
%=>9JbF2'X-CGXr$OqtFKe$XJ42U--a5UDtJ[CKB9RTGt+C\)(Rma^H+mCRU#pD'Bg$!cAZ2O8Sq_>egQG,?klcHYS=AgG^Ia9)h4
%Ai)HA5+N9'TBP6O6q[*JV]-7SY`m5N^cA2@Ii,S8:&jnW2a7a2&VB06(@o8:8u#c..uhsFWpI>2WbL\aKVtq=>d0ETs#8`"`\QiA
%a;l[@D-n44bDn4HNG8AprVDPDTmRW3k<#@GUML9\6>8;s09jchql;fP9ZHJqfI4f8=:tNf55:,SGPI-6$/b2s`as0*aB*P4RC:W/
%HbHBI+"24YF+:?j(QHbb:&Nkhq)@0M5L&2TG2rVneYB*n-@$l[s+ZG%PBl0*X>eB>eD]S];1@e[oOjA0"EB4.RIgP%<l:r4DP;%X
%"+_ebG']gtMq(lVB_3>]?)saam%]-&DAkuMgZtV#Qk`sc,LOn[U-J=U;7A%BEntDU$2$(n,Ce2)Mr,^LcJjP60?SJ;Uu2)A^\RQ[
%hfetmDr-XqIf4Ioh<t4;n,3%Nr;,m[qJY!&kLY4Hf70^[qX<m%'?9+=8%\oI0i=""jSYJ8PV*,6q81_\Rd^0Cn,/XCQh+)c=_X^7
%m'M_]fmn[IiC1dNoU(lKrA&+FoB59^egdM:)ZW3MgjmiUKnCBm<`XJ<$lP*fU%^iK/8Ob5au`W9P'=*?on-&Nn!j#ACRb&W$;-m=
%qX..8bu`!K.qFhNAb0!tc<&*dR=uCeakhE5Cq`U::Y.&CP%>Ji-tJ0('EW9NA4D&JbaQq>>"0ZM>'a]>Fm]#$fd%c-iaFiGs0GVl
%Zq%gRY0X[!a@U*>jFJ;G#"K`dcWm[f?D^:na?mfOHN&cXS!'Fu`eb^fAlJ([W(F%(j<7?%?W]/]fO])kW-8<,Il&=oIYkjHQc\?3
%UWV5-YpMA95+:cu,KC9@qWu803S!rBbC&8[^@3mbGaU4tbSOUJ$SVNjfYqD;]'s14_N=GWq81<3=.o/=QS0o&9[;7>TDO#5AcX>j
%(Jcj#K(PlHE9ccBn+K0:\(bb/.Ma"QQU@/-bpL)>&2<L@9mE@?g,GMjZ=1b#Z\a/]Q@,;`?[0>jDYiDQ\(tbm<b\K)b/e@#oADUI
%:3kQGj*W5OH#W]ErRB?;`@k9-o@Q$:SX])`oY#EUqLVu8]._EQ?^d4JC54I1Z<f57c<jK@DqUrMHTdY_@;i:D;u'@U'$U:6llKII
%=n(pX;?A[(eac&E.*pR:_]R?F*`MO@b[Rhg[*]dCUYsNGc^N+N',pn128ER]me87:VG/h\nM82P#\@>9bsI+"@`@HT2:P:E0u9*,
%jV\RsPRVQ?5BQuS78C%$rXN00HIFQ$);t]36<<TM@6Z7G:NpX/E:\42.F,*1f/eXC?cSP-RV(^60pHU\No>\Hq)ZOF<k>VLoCI*`
%q)ZO&8S5\s0jhtgO`_)6RG5<N)gJ6o@\21a*gi2lRr<_C$kXNrG\1P(g7kG,gNr82XE_9cT(`&GW:'.R]2qt,;a1MuIs?9_g'p.n
%U6r0?*JST\b=GdUHcKg\]i8_Kn<9TK@:n5YG(.pb>i0Q,_IY5T:NGcRSn;mqhr/jpd?$F6bVpI:qmQ1t-Mn3sEW8JNXEtNb!Lk&T
%*aY;a2SEW=js4g)4)UAF-%D<NPr+H*J&,G_P?[t\b-jUNCZ-YqZ#ZBRfYqYZ$@9i]VnMSkDgF1)QG*UU-Fm+Q[>2EW$`+o-VWHLG
%h2D)H[sRd7_TSl*ib)s+gP^<RrIut$3]=b3X':t;quqd4f\e\lNGj<4A^9"5]SHB(AoK2jRBOU0YA<ZlbYMlaQLj81k1/8"R[[B"
%o4i/Lc$d-ko+9a@e_IOqfY!ZB=*%;Dc$dKVX$#_^0n].h#HHqJgq9/HQZMb=DI1W5bIIXJ$*iB]TG,(E6$Hh-Kp&9ZZ/_gek.I\G
%[+BAj<,>meI@kiR]=h@a6_,pgOC@^&\&Sa;BB1ph1V^-3I"0B9^(N63YJ^R#q``<kn(Agn197lA-m7_hUEd=<T!(V3[)m.Lq+CNc
%`7);+X8T*]AQdW>S!;cTHoq&GfTA[MB#T^,W-C+47:$/f*M^opI$Jbbj>8Z!X[P,bNINV=p?gb(B>9K_DDoT5]Y.8NK0:QXE'MO;
%T%U=#0*VrHoCd&'#<PV:50n0"b2d\@Bj;bPUo<j's&,n-(%o5uQ)oH(Glde,Ol?-7ZniA^]YAI\Rr<DcnfDUCs0GVlGe1oBKq+B8
%,nF3/))XDE\D6J'SJ4X@oLrXgT&5es,q:013:V0#G2mcj6CbiJ*SS8D2Wq_AoaC$>a"A%KG<FNaK5L1?VV*Z;6t!4A4COeYG5oG/
%mRs`cr`u"!:RtFT-UfhR'[:]n^E&Gqm13ei.Ji%Nj/:[$cgOf(neM)%LnXFZmU;j[&GW9#[_d"l"+_eq?=%=7@eA1Wg:W1r[5nYl
%Ns9d=jY6!!MEVr38]R"_F+:7bFkl5BMn2o&Qg9C(QV5P%I&p?%BtZ9B?"P,tVq<FoHZ8UD_mBY=07d[U*2gnS9mp:E@KelTNRP(P
%s4Z*bM^um?QOQ]*ddqgUr9VMb[ph(U)Y(LI_>WWT,-uO+ei2BNkZbdmD8+=I8\X@,'2?QFI#S#BfXGbAk7T%I]a2pbS-<gqoq?.C
%HFLoL">l%!X00?Z*k'etC<W,_AQL[idrC%8\"!/!$/]s_ioBbt&N<9#Re]*%667nqWS\sGoGr+spjK2:'-ZQ:+*nuOP1Dk8RnS2Q
%8c+gR2?Oag^>06AGUWZiPl5I2D1@HO,r6[5WHSZMQe,9aA3TArP_Z.CB?c<G5,%sNJJE=p[V/dBMY3GSF(Xs:0^&&3k24a22<3EV
%qI:W>Ung_Hpg-TuWD4[f3Kn>+/Gg:A>g6kNc1YdKc.KQ_RjBYE:%[QZ;W?VUp/t%,[#/2HUbIK`s0\q?lBAS.5795Rpm?`S;)(d'
%PFaFU%$M13j\;f+jqZ0Ke^sUKQG;SubMRuh(LMd$X<"Uj9<qFY^'ok*M:hH@AiA'k$JD.#A@KU<;Pi>9oABS<29@k4SkIZrnFrHc
%aTN1'$>.TQ`N2h8loW`:HHEC=k>hV&r9U5?SrN'D>,=V3TFI>Ic.XNBmGuGX:2^>a@2g@4U*#r`5hZMAOFg=H#425[35NWj%/Ikl
%*5214mmg`]k;961_%"4b@#i8:o4N[qThV[QJ3)oPeXf$Ic9P$Ya_!$qB$KN@0tq`,j4pqos))sq\V*1U8Q@_SlIrHf$\BY^(LE4@
%&\c?!.e%\?j^h3*(7&H!8L7_361s&K3/hnpf^1=S3eD9gd.S.*j#cos4>FReJ)TH7=pW>W!!LD<ii'h6F]OVj/lFps=^&!HmC#<;
%9BVBT=\r[i-.Jlp8uRjiBS.rf_[<,Sj1=r'#pZh2(0NU$mNEIWIj.D[:]0rOl237'Xkf)PV<l[&k9XCe[i+'er5Q28L,h:_3nC(9
%9@qeFirm`s;i-QOV'(7b)o:EnPF5eNS6<b'rh%pU%CD.a_+$Ioju[]6=qZ-#=L.k1kqo'QiaH1nKa(W"*HHIJ!!D.s#lCNSq3tt6
%'krt@`b#S$05E(tf#nT[C.1?]'*&kFI(G!X`MV183:j4d5jdol9/SM42*TjdLg]4mDG14b\Ols29(r(O\H!!uP;1d(KGkAS]#"DA
%V>/r91,^"SIdtF8$8,D*Z4&CLT"#tlh'ka@G]sN$3unZhFQPZe[TT4(p\.ll1t'f,e&*"0G3E41rs?<ZI!uUW5E4"`1?DR,k7m.S
%%!_>DXci]JDEK0u//sll"lM!B]f(W7:[\iAB`+;3^Wj&HYCn3&rL>Q[0-2IM\6_<\GnNJ@@WP@H1WlU@IX5K\7:Spq@i8D]_Mftc
%T+^;NNP5O\hE-.`J3`"(bV[AfPr%0VEL[lbp:40PID5JKOSROCC6Ata2<fECH*?a[A/>gLV?2gidFJ\eG5VlkW;eY/MZnIp`08KW
%TIDZ")Zf>fAUWBG(s&%):#Cfa.!>0FiCfZb:=E(V+m.B^c[f#a\F[=$0(s(_(?AcA`in@T]5Qqf$D";2jP*/?QYDp`hdN9fr8Hu7
%Eo][)$O@h!L?$IC48#*QIb=/WV[(H]=/UGb)H`-L0J$SF<b_F$-76uepai0C7'o/Bd^4t!@Jqm-jq#@Ei`_Ys6Pb$-F8)p2<njiF
%5Cam*o&]M4:*(RTZ?eJf$C+BBGA4G.>/srslq2,^#ZBK0dtgWNkGl!oO`;ADG,Y74NE4_V8Z&]h8JX!co@R>nVQ\0gVqp^H5O6hd
%&uum>+_s!>?2?K&;pB(SY-&6J0):?!p\gNer4"SPSQ]gYka*-jqo8YtJdjW>0k"B&"\FhF#(Becc+2&O#qNY:#V*k=S.!F'0%L#]
%W\Q?M8YX/r_3?LgE4KW\m-IE0`Jgb<o&\-@jdCKFVR>:VF?Ce07lf%`I+>If'9Xd74f)#(]%,)o\lJ6^pB^OrT6h?9'0'P[0^$W=
%@1hO5ZX0]>H>KHqFhLcqeG<4pF;t?83V$kKKn<NG#VLgC-#>M$Sc^[PHF.IC5-<9l]/jL3=Remj"qa7ZVVVH@DcQ(nRdSTlc8A-3
%Dg6!](@GH.XK*$8]K;Tu0X*"HkP;+e1LE"*j%G]kF_E"-.prO,gAj\^A-pM]@!_\AWPDdpr"QRum&(]1on_u[0($0TXRSg8QRl+O
%9il(pG1Y8:]Y\lJG$ImLDu@sdR6Fbs#F0_*:(uGob==1Bps'mUl(l!7rAV6JOj70M;._mS1r5*1Nd1CqN#tO6@>*)%*GNF.NS3$N
%+3$LC_@(?.aZnLm5W8la1U'&F[min@hl\ol'd)A-Ik[mR+93llX#(5l)qaL:(D]p0YhQ-V[DPtA<cbcu%9S1Y_q@gpOu%?`D4/pl
%AghY)_sNB%,R2<4&BTp<:>HXbRA&POJ2-h<!'U/A^ct0Fi-iKu]r9#cAAG=o8(u5)BRek\5Tgk&d+^8'M4)t2)!tK0@!K3G6GoUR
%FdVBFFe?uh5(Z]DNB/niE/1"`o;Ei#ZV`iS2m!/B/0Ck^D4[0_rpsJmZWtr)kWb$T:9@fQ`'q"l]qs7o:>.NU*FLlLGiEUqV)Ja)
%IP<Z)TY4)s].f=V0B+EEo]i',od/(TY>7X"H'te\M.*<'gBKE]2UHBO(l?UI2)NsW"91Ii,>8r@Ge%l[M@Y\iS(BL_MtLY0DX>Kl
%EQgf1Frkt_Q\R=@.F%Qk$1!V9%C;CjqC2r;hqC#<H-SEiSoOBXK+s87WZS*F7%Y?Sj$,GKV=3Q9R1&1-mCJ<dAjgD!L2WCCeSl#c
%egqTS[*!R)j@K'WDH0m_i7T:;oFKhn).:b.9/naXS/PF_:=QYfPr`%D^a.][i#6h^`tbXaQlcY&?8GF]2QVpllrt;G7V'4SY4nGE
%bCr/J&h5h1it=fn"CLZ[IeaTl"BkJY9nT!Be`h%G<kB+ob&(8;@%.<f]]K8:7N[3tkcGKEUMDB_)et+%!#ZQ`>gP^%FbgAh7OF?]
%egKg-UI0kIN4+LhbmJZ35$-5)ePC^$OrS%?A1YD_c"nqp&\?BQ)b(?O(+Ze4;EtH>A<.T<U$*f9EHGB<Y\@PDE>K%Yon3h-PPlod
%jin"6\r@G&lP#Eh7]TF%kl'r6j.JpQ.:1$i0EP64mG/3IMP$T4cIo7?T8`QODo=@dHghQkg.8sWX8;Y10%Vq=&/Yr.^/m4o[4_2`
%^;FJd@T>u,JHHg%PDG'"d=sEiLT];_GHFLXTh$G\IM-4j_Ni""1"0;0Wtd71)YkF%57U)4m-raJVdoqYBOE;o(rON]Rc0Q<PEC&3
%p,qsA>[Uru:Q-89b\!R?)+<?Z%&3F:/6I&ZrAiXeN<Dem<_:=$#q4kBj/99iF-U^X<KI5XlU+uFo&F/OV%96i0I6kCrhVuJ)6&;M
%dH7SMIL>kfMc0QlB1ld6Ah?6W5l2-Ahe8!jlj2+De9Z0.ONtD"U!XR)i+dRZXD*hpqebTHn]#R&N7Yr$/B<Jd!_-[\b@QZa"V9Ln
%[)Y5:*eQWYb$/.Y^k=^f,e"pDA+&c.g*=XS6@MjI'ZZV%SJr@HEk4-R_%ArUFUP?r^$+RM*ch2)Pc0(FGOjm)n/`po%&;HgLC5t@
%7cn,I2ZglsKgZ-Yd4iV/)kFQS(!XbN>R'.jSQscgq-fG$!>BfQEC5r%(0#-Qk`$7#.uXW^L8scH'*'qLP)a=$j.U3=%]GH5-ZN$T
%:)hJTr,A87E36EP0J$_8c2s6X`q\qYhEqBnPD8m/Jil(6YeF`&[/Tu.k'_Mp[(FP?MZK7Kl>s(SI9]A^ZPrAuWn,g3U/l>9VH[Q;
%`!u`\h1<;[_PPIP+e>Ugd%g/T$P_9/)('W^ANV@VJ9q+!!F+)H'C)kmFf8Q*bhOB:b5nSa=&$fjal(]=(P'1M1^MLDp4XX,(;JWT
%=(J1J$Wh+[8Ej>.)S-K*l/FDC$A*VVmQtQTB';G17>/of`DJ0<'0eTY_uqJiJNUlVm.^C@*Ar6ZHh$"\m-okVo)gk=d[.*'=Jg>S
%Geutsr-msdnZN3'Q[=kd]s_*9SNd%PSDSJ3WKmFGk+@/&l1YEh'7TuXl@Rp.G-h7e.cO%jr6O419]P=0XG]F]^+<E3R+:8q;@U>k
%?bi9;AO!V9lr/jDap9-X>sH"-i61C83D@0L&!-368e,@D'&COEEseGNcU[IY:C]8DJoAMm[07Ot92j8W7JIYN`ks?$ZbIF02W.s`
%Tb]9TQ`Fa]I+pWum`B^MQ/0AGJuY1D?\VbR-,btQWOQBMj5C^oL6A`%mq_\eLHhdUj2sB?*)^NN^eGI-4b-MEppC!tF>#Mpa]t-7
%88TY6>*qP-?0>^eTsU,6D_7lMZ#pQO^%R]7/O^]n`RTV&`,UQ^-<qenjC*9WJY9I806;t;rfg&,4[b[hC\I>F5?F:Het+--<D$.I
%FEc%WrLqkU\\8`!A-1TWK*WAaGZD+>\6ckHNNTT\(3!o+!I5]5+cY+pg5gd6e`1:UY>uY$Ka<S"qut@c?M4qrM:0<p1:mnnGSXoc
%@s@[6g1=]:-'m=k'F70DiR7UE0X4R4:9KtnlhdqWkquM$'K5[Amj^&Y7eML!7t&:;>q@D*<8Y*p=mDfk;MXFuFI^++=1/V`_;she
%]D'%/Q\3DDe="6.Fn1%]\QM'Vp'5fqQ>CWAE>6eU)gdQhV,Y5XH0"h^:,l[hG3.e50brH$S@qo]O,H:iY!9-l"8JBU%pK;%aW.Y7
%d>mZ2M]g?T?nA*[4<tCELT<+6XL;3j@l86d-d/!],-P/F6T/%HT?pCM/rj?-'3!(rr8h<;aVFP-ed;TTii>(6$&'0.`R#j%Ln1.*
%$jtROkat82s7@rKfT:Rp8ojquiS_uL:YZ5K]N3hVh`Y^!V@0iJ!p`VirkR4S]72u<XqPBEdKL3:HInbXBJHo,.a4O59rJi_CB[<;
%SdM0SqcE\'.o-cWi^VqO^Vg:sractKG\-bW6n;B!0`1jWh:dKGONa*kp#B`<+1t^3q)>IKYPk08jI8B($O-HtV966=WM_EICeH\a
%r*k#pcZcN;^UURljHhb?TD^PB@el;&;r4^TKEH_bb5^ghk/lY5rp>siftXk7FRJ&"hCeWu)JmbBMl\<(nV>("Ir`M3nu'q)HiAZZ
%k+htG]Xd5j%WsW.M8&oI5MHVOr94s\d!q2,.fRZNWSkO#DQiuiS[Se&XgsSdhnNuoELOr&/(srM;1%rMB#P4/meS^!0AJIPr5HOu
%M8*llD1?\^3UkWFGOL"P4M:-4celD4gDeqaK)\[9/1`\hV[G#[`Kc.bo'Oso0YY^]KNcR&$d>Rk?/XDb3_Zk&^."%tPdAoJKkR:P
%\?N<>D_:<YGOGq0nmuDVomA;A*'PCo(/>n]c54b6Vo$;^m@pk)e\9<]gbCM0UK1T$Gff_f(34Pb\emTk(+NB>5^fp5[*VJsLH&"T
%oh&CmaB2)n/&H1L0i6!J/;>q._'7([.?!0m+'_e1H>@Nd2-O8?]6q4t9Um,o0-4YkeDeSEFaGkAGTeVMhmPn1GDh%&`@&((Yc+IB
%CXFPAlAKT9nJb0.fXQm,(L&CnBkcOR\%&fV&MG^>TD-N%9_A*s8b?B?Qdj'BpSFG@VLL%d?rr[)GV-:E)S?ZK/iQtg9/khNrmKih
%Fa?W?/3YU":QN[le^mi7WS-,=0DhN8D4"p\jnA%O3S7J_>\;=S`j4+FK$.A2.m(p/VO1NC040s1:QMseb8E=Q[sY[3^0Q2j<Ss,N
%D\[!^mH$4=gaqUR/,k,QXK5G1(G"I0H?2N:(SWFB2#FM_=4,T,R[&<cqKV,o[b=j*Y&%pXggBF2<ck2_XHX.`@AT*r$*SG;JXb2T
%ekKg8A8L,*$J/)4e`]HoEA_oU$EJsFRDN_8EG'LgVR"cXII<=q=,YL4E4(.8pp/VVmd6`->i"*,YD%o"m@'hCOgXR8V7i0g7;pdQ
%_+1Y>)juu!a%&;-<]FicXOUd=[+:6X0*G<c7R"$o&#KI"aiR:cpUM"Km(XoOJTSD*#i$K?DZ[,>s#<j.al5..pR3;/0.5V/lf"+a
%`HCDon\2_a+B6r'pa'GK@`?jKmnDbe*HJ:&okNUQ@D-Nl49Pb;dSl6+ba2`0?m-=[]J@Iafg_\O]K*[5K).fL3V[ctKS/ZG9,XV[
%=F420D/cJlZ]2)Kq65utV(*GIq:=QFh,Bd"aM7;fNI%aR'3]'[X.do2:,!q`6<ZoAHbTk-f8=2(>(#BuYE(W?TkaA.*9rdVR;akR
%E#P$CEjbCC\V\dgO0@/Q_Ug/>94@eol6'=nC=G-XNqfa$d,ehV;^j8TS+4e?oB(=oc#;HG*Be=m3f9Eql/s%m[\dmrr7,8AfbO/o
%F4<r<1=rA@%?nE^7A^)!Zce,>-SQ"QScq%*m7a1s*pUruHY(>>Rq(J*gGh`2F3F"eNT7HKKA;KTXDu;Nk<&*T4hT)UN/YuoT.I/9
%JOHBO91%R%O,L2CHs2ONnPAGu*rgC];M9anEsAKR2V[bpYe;?d#Y0*T"lXWQW@\s29.cjV0=A`+FhKB,2tDR1+-/(5=.A@R0cql"
%iqpa,/?Q+rFsVij4ciRHc&@n#be-KWg0.3s=792Nog_<2eNb:3&T7XEpf>,ciMpq71=tVg!JAY]q2M\&E6qREj"Wj1hhdpRQ/fP:
%Fn'j?;`WktXi=DES*EGJ]VW=\947S<eja2`Ed&+PU_`md^395qG=K+\WFWIO0MQZR\7S3apjO]]8?B7ofu2?2ZuC)n)K"fabndXo
%-uSFkh^VjpErL#N<uqHJn&>1UmEk9,I!]M>&D01qbPCOll_WY/k)maRD!W6J455VIe'?Y:qVf`Cr@+b^::&ARfaWYpe_QcPlY6++
%H'7%7;]CR!X/W.HS*0[<H^`0^mUat8rHj6E[AitoT;ig55?,"#iNB!4P\uB4gT"S?X_q.r@d6C[*]n6p<pViT^DL`iq&i?E&"fuq
%EK*'5M.bQ0UNeN&J"9]Qm1^3(q,o4fF<1o>So2\SUA9,(8T(]t<0AtI4cm=&oP;RkHMoJ(HLo][75rD)lHH25V/kbdf"O?]f\RE3
%b4GU@i!cO:Ip1-im_8u/ecDNe`t&esX*S_h:@9+Of5%5#NU62\Tb[pH*F:nij+hR<^3(.RE+_[&`a\EcP:]!>Q*61<j0eK6f(&J4
%oCXh;bUPTu9)E-nZ0kAq?T<EaqBWDIXe1i]+5T`pXT/-=V\4o[B!3]>l!#_(57>W1nsLgN+3ncB`NuoIemm]%I%#qa-_;4Dr*c;*
%EW2Q2Y,8b8^6h+>II*b:g<]-os&61DTqondMfX#X)5aqm#,T,sg1Heagu[GSbA1[1pTf6kFd1Q9<j"4TS!U\0o6I!soe/E3ZV#Cb
%/";R#SS(U_@d[toJ%^(AHT7$jh.QF6Y,lHHH7_=!Ze),:S^Zoa9(M?r&Bb>5c&GaR?JXBeb6p70E@6#^*B_$kSd3lA\#&A(r\!uW
%,i9o>Y&\_^&"I\/f.4i;8GQfj5._C]n*A*2aTGa`XZmfsV<<WNF)L.qYatMQ`g84MO,pj6cBJ8W]E6PE7F*0gVlPa"aci-paj5Pk
%/O#g(mu,L,H2["SI!(^%3F$(UQi(\\p_j\R40S/Y>CCpKB]o&b_q_$$]6A[uhs[BtHKQu1Oc*PCe%+e]FZO0;k:ZAK=o0,7a_+fD
%6f'phe-j\ol)eoeB<4GuqB95P7uV,W\*mfr/KVSVnd"XZiq^i9VcYP=nKjde%nl)RQ'YCVAbsUJ73bu2Dq;,8[Ame<KZ??bEcDh>
%W&2dp0JS!>deUeib[[mVegqhZ=4NR>TmE9VjD+"_WRnSA(J=(t_]&3%g\OZnD_"bi5BEg!`p0#(g.8BPO,a&aZYaU$iO4#R^u(O@
%gs/raA'Pm[l-.=ddgZ)6@%)<$F[pho3Reir59Deb^$sLYos-4=[fX`Ap&B2]V>QFt2F6a9mk;WbD`#WooH?.6%]u`9QYWhk9c59=
%21IkKrmK<Njj?>]]O'p9=u(%\@Hg!^GJqi[1"(oCII@Cn3h+AP>m]f21Zld&q9J6(^,oe7[;QMl%Hahhs2*S6Pt&14C5;CmVgE:-
%=\h%o<.2:>J9r_Vm';5IHbT%^gq)0FNU!tl8,UMT.(3dUf?9:S_gdpADlg(\.se_5,[DE9V8^O4ec*jnYT#TJ>WpoL3dE`NjA(tO
%<Y-#aVNlC!PW"o*^$'N^I;`nrg"L3^F.4l.?M)0S3D`65=R"c'A8b*p1/R?)j:gMAC?`W@-\XXL:emgP,P(e^47W"Y'CJ4,:bA9G
%5Y'Pii/Y1s8L9%dS(Lq^o`h9b'Ub`Od*\.i[4#Bh4?RB3GkcUWXDYPhe)"+_os>NLL$QRn`c<H7[U1H"1k]58f9c)(UA/gTA!M9X
%.E9NtGZhanq`+/XP/ssWmsA9#514u^kuR_moPDCRQ$9;drNVIT[\RJ$M[bQ^X^:5,2!Wh!0V?RI(MiQHn.OR*QMHeRltk\s9?aG9
%gutj.>TYP`Tr?D?poP0&(/N(pC6mQ&AZN-/)Q>h@'k4T4h:7T%I-bMoR?_tA+KuYF.c\s1'YStLdi/&4H>ra<\d9\TG,;CtNNh4^
%o806n2/l;s2<5^J.7>ZU9c\o2So1`c2N1a4:=gp(G:1R\n\_KJS)f;R@[3BAI#o+fjLG"*gq#+#7(D%3',c"lYm_oF8F)0^Q3ZYD
%\nE4eG%0!P'XAJG\o>Nj:Q)--9mpe'jU^3P3/rS=T#iA`"K#UJ$\ndD#k"Lslu-)ea^YZ"hakK0dC;:+&2a0J$1@.*2n6eDC"j]m
%ApZ%3GWU7!dd1EOj.44YB,Z;X*Hb5(lCl"rD-nKO+cnV0+%s6XG2oTU+Pf\/GqGM1$RUb#a6uT*?X8O\\Z:XjK>brnQ7_:S>'_WI
%Wb"13<Bub?mM;KpiBDPa]%cIiM(3G9[Q[c>UFEUTFl3Pmc:ep.aT>m"N2m284,_K*.O?&PVFeM+_<[J-H^*6jXR_Vf3PF)l;GtGj
%-%Q3N2hEb_I3.H]5O!(:4050n`M"ub$uU:?;Mc;2@ueJ5r7P^4FJ'X'BC83pm0,(geF%_Fk(#9oXEUIiC\b4E<t'fWE((^V<Td7;
%;JRf-5eJXRhC!Bgep>3;X:5ACEjU`2j[b^Y-i;W@&PI4`/+f8sP<BC'%c:gQp&\3n9'3g9XIVSr:/g]BOi"?C\O%cPW8A1_3^aJT
%Z'r%Jdi2P,T0Qk)OBpW_5Q]Q1KNmJ!Z!Ucp@'5D>Z6[C',<+aTHjAX$n84r6hd"7%C+q--%IbWhfJ8BT8uj-Jf,8m*F+M<JK-";q
%,I12PS%]<(P+;fdO7&(!=\Fh6ds*jaI'UKDIOWdSbj/,8Za.91U&u*2%jW`RC6nRrZ\NiVWEe5q1g<6mq:Oe"1V$qcEN'[%EXRKf
%W6'G[IDqV*(eRN#DL1DQo`T[(p8W:=CTb;.0(]6bKr]fQ=^DVSa*3pU-N$#fmJsodA`]3KprRlKm0b*'.uC"/qV2l"/lSa9JA4b`
%!=.C6^pM&8^fa/2&>7_nH!K1W+ft+$ac1+c)]3j?""&K/'\qB-G]MAA]W>?PO>oIVA/!#(#GKXJ;@JYnKUU>8K>M7spQf<s,:8B?
%HKZ6HXR'!=KtZg-VOTh0]ju31<uSj5?V5?iV<9hM+$\GrD`aWVlo&A7,.m3]>(!g6L8eF--ONK"n1]S<1/<.Y6Rd)n?/XCQd_._0
%*8=qE-uCK!P/U8WP'a`X-4sbr4Z(#c9;4LL%&(sm"4:h%_Yu:`]'/U)HUJ/GU6?o`&L<GV(eCFC+Jk<76jjls`O704XZ$\,@us?>
%oWVK?Tu/],1=OQGdOC&d#pHoDDGjl\N\[n;MI(CmO<H1B::'&ZVC03NZ1@Q=MucMc1]tUfSWI3l_$M9<<W*oj-?Snja\^fmpNoHh
%,"A1iGD7R'=Kt\uagWm.FOo<BX_C/Q_h2hLn4AtLT"YVJY"d/3IVi"eM$5mZg$V^s^urW13af6I9p^jo"-du^''UKJ[i_/cY:hmt
%0WQFfScQFpVGFQ\4ln!*a:)pAa[E`hVRp`!WiAcfMXZdfl]p9Y,fV;CiB!t=o!1@Pc7j0-M!NdYf9DE=`+I_(G6WZ\V51>HF7P<J
%TM)=:?&+?rcJNk.&?8o$].B8.+lPP$%`Al0H[X[?mBLIB(RUN_?[s`fRcMUn3Z#tDWL%dOI4ra=rOkOOFAJ,fJR+^IS]>7)D?`u\
%$&;[HGq"4uU>cM3p!OV`Q84@Tq17`MF;9(;m)@=()hE7H@-p'Cn@q*L`G@P\ItF,d#r#*7N(m7oH<tOa9uAOM?*CEu-\H&DiF)1r
%4$%==<ibJRFS"u98K;UEQNkSl3L[^oeE"Z0!tmbP8+n'),h_nm>$])d)p=KZ`d72r<,@<jnsAU.E5P,VKu]3!602;[#G\h#=oQ$3
%C6EW0A_"OAV8g\7rE6Ol;A8&'8K>\N\-i%=I3n\=Y:X4?gV@&mL_T.)="4G+5jdq5AGnKQ#S`;GI):",B=,EMm!5`*:cA>@Z0/OC
%K5%p9?Ds2DH7_8U=EX,#30$S2TI#./d=-i)h-VJ^O"/L(LHR,=qnceb?7I=,[dN$o2ZoGG<T@2'qZC%HBj9DsQE.G75Tt[n_5Ng?
%KkgIWG24YnTVd]KioPqTPaKn`lc4#"ku8d2Ml%-H4Vuo,IgnE,`iu:n1/<4efXsB"Kl\%Lr6!^;KmhNW@H;/NQY'!QF%pU_+`=*(
%7@DuqCTQ*sN\a*]Ib7SMc5emQB'^WeFCGZjERjVAL@Q#_ffVB4C@jL84jhgUSQAt>XrAL`Wo,?TgWf4VE;*OcG=K]sA>/>aD?6i3
%m-j4@";bFj[EO*Y%C5hIMqbl7Ws$tTNMXmTmBmF:5jc$YUaL?/XU\bq.H3&nWeB>?X)T"%;ra=kOP0[%WA1JsB6Q12MSVQ=iU.+p
%lM5.B0pQQs?FaXTY4Mp"jS[+slls+JiUX.#AhU`g&2)6`f0o/M$!KeYZ&f>^bkPV@Fpg?O&^muTX/i&q=pbItf=)!Fqql>\hf$5t
%WO:db$;1>S3D.$+&KSUKX6l?:;gWQ/PMmd(-'8k"bV6_-6T`9#r\YYhBHGD8QgK)rENCGg+U=^ZOgY2b\J`"55r6N<!(t'o&:Eu-
%RY[NIPaU%]*oB1-Xtl4_H5>+:XG\'<Ts]Gkh.@XQ\0NW593_K;`apY<>aL>]QkaAM`1H_+QeH;VK%n?!pV^[$h[Hgrf,G!Y"l=nk
%qptO;%5m%r>Tg,BOahF\$b\fT3[1F6)cAB,.fQbRi%Ei/LTm8bVCMj)Xh,P>1)kU7^.QX.IX?,H7K#0IdEujCM[>03<CP(OcY_$:
%14Kng`oRFG3oqOo+3gl4;Ce5LUb,VG<WfN#a\kni&`>rTpTfXNeci4V7uIV_dU)!H'C,NaBcV+P$Fg]c)ITAC[66%9Fs$mdh&o6L
%REMb9%mb[Y16iLijmb0kfY?/k-B=.n/1qBc,"Ao.oggpQaK@(*;D3qYcQGkTr&F">-P='DKZL8mY'>`mOqprT\@k.D\"W*r]k='2
%:q)?X,(?c+gcH<-\'f(ogaBds94S=&%@#kK;CSO6D1<I+%rpPQE>/oS1]f/*>E+bA'L^`kIiSTb`bM"B9h[pW+]!P"JX]4C#Ym"j
%">TK8G_)Hmq5?r2r?@W4T^chEF.;pK+US9b-Kso!OHIuFGpI[J(QC:XBk'*YYjm^g?M*J3%ASX$O)e(K5[2[_HWu[5+hFlHfkuCX
%$W<tBo]0ed<.gib*)8]`R5@qN/k'g/6.@2Fd60q*U,V/]NO14lm`3Z5f5*)l[oKlD>Qrq[(ViBG]:cY(?(tH6i.eJ#hqJM6Rj8e0
%Y?n!=<VoeYYr=;NmiHZ"5I&hM**&^#l(aPph-BDLpU576Gh2u+Z`'&"cfa_%pi=gB!n`Z5g6::8c+[4B'iP#rojK8);NBVRfrKG"
%]3%Y8WE-E;<g2',e22tWqet3Y:$ct0$rEA2#F,4%XF@l.HDB$9s8#627A_)BEsa.L>7`X?OfBY+K@&KJnSP,3L5K&VipJOEhWnQe
%,sU8dB_9Q\g<l-iZdc<A>6V=<Fh4I:0.5@sQO($\q.8^X@=QJgDJ/R*,EXdZp9M#ffs\=Im^>%'o&F18EI:`e*c+%Jgjmh7k]sF6
%dF&OeO'8EEmFXFhFMT6oq&M@oHRi(-;H:(tD/W?7=%c0`2#I>^C@+IbBEIoIBVQNbZ/VF$42?@m6,q8Xh:pYdB#+gt'kqAjF'3p<
%f.Sl$^1-&2OJV5QHf`WCN;KVik>qm;mF'd=dDWq9Na1E*eVGnRNt6Ks-+4Oj>0]L`aK.p*M`Es9f:GU6phj&O)5WN;8Zo]6#6:rQ
%!]$".P58dmhN!s-Tc3PAcuuF/28n-J2*&!`PUL9<82#iRgE67!=Ok?BVaJ*`FIm`Wgas#,k&a>@#VZ'"``QqjRDnr`ei6c]:Mls!
%/MAH/g>=Cf`u4s$gqBK[<U#d*r6=YPKR5l88fU',q:(jY_7G1tXU^51ZXi5HcUS.ZfBr.s'r2fcSPWf@gF_d5l?=bC3'=iZ_FgSh
%0XdPh[#=V%C[d8D7Eh<)Yn>bb34-9K.[X[S:Isl<[Vna.5=EuUU&:nrF/8s:P/\XuG]Fu8H-E[%:eCtNRM'(2q[t<,eTI^m)fOps
%[DbOQ;h9IDH*o@P^kBK;eeTs"h'7eT.X??BN6;P0\,qpLhRLi:R<K=(pAeMu\QVTFSO_5XE1gQ6!6:El/1*/ll$ICCrV42q@PR.?
%cj*&k,k?rr%ap48-6.i3#5JKURpEbl"_hHC@eDm5QFnWbWi*ZZ/DXBIH#9V.he(F?bNu7+C`LGLhU_0?8s&#`f)kYO$LQS<OK0eM
%Uu4g_C4T?"+7n3[afXr*Z^>/b2#!>8fk.<d2jJjT>hgkLc`[F_dA&&%'&;'`=.bX!8N,g5*pqBo&`3./eBsPN6K3/!ZBt*f7-bn(
%74`btP^#lt[$@E"Xb1kC@%*"o7>TGJ"aj]+J_%7.;)YTZ\@?!H]52;dCd06jB&^%6d7t[`Xej+(k_.o5DP0WT3;4LG^UOu(3st1i
%6!e\XFY;:<oW6[4Ui1#8:qth%"`>,!hXF>!O((hm0nR(ucGlh&de@eUV:.]][@J_&d_aR)kHQ5u]WW[f4^$BnFo@X?\8@S_Z7AW\
%#>DJ;-SHad4UQ_`;d@T^bcUj+dW;@rRM[Ifo%=;HYGYm<&=_Lj]t\D0MAPY^Db6.ES3?$rWRn%CR63]!<_\ATZ^E.3n#Vt/*%-qB
%m4iJ6IRmj&F9AVU>14D#;D2nO)tKDtVrG[$hK:IVoo/U;f31XkmSKO!\*S:/2?;5M=)tai5..urFomo[Du'fVAFo*rA;j6[V(l1e
%:"PO\;;^$k(1(EFXB.=OO>\*!d-P_mQ&91>ce!MU1lD0jJF$Md$-?p5YFQaWka2q;+X]7$':--d=r.Rgr13?heSi[@`+JQLaAgDV
%o(f_A"m&MCY)`bor$l!C5J5ALOZc9!%Lh1r7]$@C;)=W,!b1LQ&?*[0_i*HnKl?8P=2FTsmZX>+V%aS\plJ,P.aK%[n=$J%l2=`A
%"fjE0+<#($+/nE6[([R*7B5+U:d-RpHsJf7e#M$QI\aRXn/(Wc?3*B%/UjI_>&g\E<i_fB8De?Q/f+'ogCc,NX=!P0KhAOdl<X8T
%S,-FlLOF\=RT)/i>40)8GB4@$+h%UIYE;>Jc@4Np)S>u*,_8`2)T?4GaBrI_f\(nl4@]q.%ka^"m8XXp1%6(^"P'F%I8i2\FW<+^
%bb>.m_dgbVWt\]anoQ7CW4iCuVa2'!0=V%kPf3bTRGWS&4F4E`>Z.bg%ng[%`WFp*"=sbKl$YRBAcEd3mT]Nm2`lJ39:mp!Q9Ms,
%0:bYIS=0mC?ae0>H!R-B&Fa\9dG<T0)n%\Wdi2Z[ShPXPk\C_>EM"7'BDraWnUo;UCeElZe)"ALlr0b%"RJeU9T>O$!nedY&9ft4
%'J$k65)2;tlV)\$[U2T,adUcZBj0%[pHC)p2iSYLm]\k&L3<1!s/knsB"8':KagJ@d<^.#dX+]Dmq:D4e(``f_H?N*Y'jS[3#;[9
%3tS2PD:U2m]e@)Hm??D@"67n[fqq]k>@pWKTBO#uCYU_q%\i[1aG5b&Xn)SBn]!t1*5eDPd?ul4mig5"9=T1UUMV6*2LaO9[l'+$
%?k9\"HkXbE1\R>=O%h6*p_ncomeu$4Cd6j+KBD]a@mID-4iae@/pbS&+bZq?Kl2RoVh3ro_:@l<Z^orB39*g.2K>\<>*\r`DH1V6
%rgc3bC>7ofTY41NoX7&o\o$Yrg:1uA*/^n&#2(=G40UB`aB<>7RWWJ&lr^pq),47]<hOB_jC-tV\%lR1DMmLKP3M%(n]aQ#&d@UK
%Y_O^`LhT'+G'DTq,sCA0NC#+C4!9UI))2A79X>a"fujnK/N[cIs'Z7B^ObsB7n;d]MSgA-r&/i$2X]l>_oMEsh;,Wiol%`lYSu]`
%5'W!ZgJrZ1&,^Er@mi<?o-%l[/kUPAA\Z5\I:Z+P/D=""5-WH-33*8LCc78KS;';ATY6cW\F#+m%(^d!H_AUQH!^&t9NuELFNZ`U
%Z-W,;Fdj@3;$_f74L8Tq?lq?\?b:.Lm+ie4i&+>d>J?_@UZ$"Qps9[6+!1hS5l*Jj5b>^<>BmIJ*0[^eHe8T&'F0B-/_[CHi*U*:
%f*(d=6!-"Cfap"(TI%;"n5UC6T?j?X)a9Y!4$Wm-i+nfA:u:\Aa>U]BYGTct^Mpr5O?Vk^%Grab]eCRVL^W:/;PQ/fS_9SF(u>:p
%c!h3W9$>h#<:M!EiR(f:'2.ptV>8d[>(&_ZQQkHH#oo16OiGBfE!/*hm^cm*oSc6mG9#pO+[8-Vm5d.#kGXYFgq3)A1T`k#>mKoQ
%"*Z>lKF0SI],coO4UkNh_l0C@X(Zn9EN*^Nb0UqC(qB%H"qEr.>b9=L<J+'VC?0.K[.M7rdXt*-BP#XbRmVB0;?uq:Do.=<O7][9
%G^;d2*qBH0lTDCrQl$C'G3EE>]"&Mm7Khl4Crt0A_oK^tf=R[\?4ji/0,[6\s6Fu.0e&(FS#'9b7F_*hDl]1(r6P.+Ccoi<pHNFJ
%4^Z1[5%$]sdND1!JGcVf]]&0L,/1c$F:j1OJK@lu;A%Y"Hp'<3&bbTf`'eC$H0)KtG@cO47Uj6I^e6jdORWM'P3Ar6]/ZVbUp$?X
%CDT0Omi//aOt@b^\tW7M&J-!OMGh^t^0#29!I`4Woqi=X*'bdK)3ufN%XVCdFU<I`7Nuj$Jn3k=02t!78;)'D`F7d3jI_-W.:)m)
%;.OVI1Tj9%*HXCGcl0m\j4G'DrfOtHbFo%/k#!P_oP_A*JN42iJuktKqs`UD?3[:%GCsdD&.2cQr3OiBcB`pFo8Z2uGqLY)Ot[Z@
%gV5_+#=]cElas?\cho*ZncR0b!;*Km_9HdL3]c\&pL+TTYsSG*#Vf\TKC?e#!CKULXK&a!SF1TW-a'r3',TL)HMO7@RmVC:4)VOZ
%-4<]2*-QP(70kQ%mal@2?JHU;UBBtHs3uUT=[nQ"JmasSGRdt(IT9oJ<##,%b+'lYIEnDTk1isf%C<-fO\-A+Wh;u&\I0n5L/irh
%Tj>M!=iD0i'UB,J]V$B$*u7;5Kgn?3bE<_\)J(cWE?aShis74.@h\s4,oBa<@LZSU,(q76^tE6E/5%J"YoFit'cptM"<l!gMUPp/
%_^Ym+5:7mp=B6QqLBO1L[,AQWP6E8VntH,D&ds[]C#kX8a+2JZ,:KQ+(,u=kOAmAS8hpXeW[Ir+&6RpoTE-AVb(Vqa5stc"OG8$X
%AgAa?11:c6"-cUfK':/'O<ARa=AaT'S-0mgjVaP[Op^Rr#HX+k1!GM7/!;$tZAc#8=A]s]pB+i8$(*4dRjDAE$92S&/-F`O#@s#,
%%$O*-#WuRYae0\`JQGiD\ZBaY?6M]<T,CZtl,eesjp4%Z7L6?#8d:BoN!SKb1+PX)AgD^'Lrl1(JP]l``7^5p1112*%Y91R4MEuN
%(Ssh0g/(j]R0,L+Ua.";6]sDH3%b5q-uku]J-s@W#`)[b38[Q8rT`qq;?G3`i&lsmZDp1(0[PQ3c`dICJ`\^01)hL-7:&l\J_;Rh
%#<#3pEjOM<2ZfW=7R[sV7[`H,&L9j2Z5Ag$jZ2$I1CW6(Jo@PPpOS=(+t7[[_c+:-@8;n(*eS,c#06f$K5=t.+qThU17/1"</Ho3
%^a93D5S1S=>DFa2?W8_.BEtSjr.t[ba!">j5pVE1fo7c1Za:<@@-nQ!>u5d&[Y#_O2R(!%.W+7^3:014(-1*iYcQV!608F_/6K6q
%&H[4(.)+HW;8,:?R'GHQ(?5f'9$7PmD,t4/)c3D`)'WXb6G1+e9OP\EYn=]!6C3HM153&7;J$1DZ5i"<Q(r`gi5ZTXU[kj0<CW:$
%@Upe<OeUdt!ACGpQ(q]Ki^?/;BRYA6q!W\Xhcdg>HfOhS?Vt+5)$uDcGnk`@&)&>6Nq363'[b_H#_Cbk7R7!p!I)pM;3q=mZsAOh
%l=H/.T]rH`D$Qt/rJqk/"]Q;tIi-=BKL?i77NouHN\eY:<KU-m43qoZ4e3kg/8Z(h_/X5l,D\7RW7o[c_")al/K\7@pgA2/U'TU_
%@`WX"FCT#0aHEuf,06!ja$tUnm:MdLCd;$%D-5X4&fO2>V2[#No_LqV5o/BOEB'5k@<mm"BqqU4FrPZT_/=lZk7#.[+kYJP!]k!;
%M?.?@do!`O)'[,9?Wh(7^mHDsEYp!O@_4NJ'Ah8Wl\0jYKoHEKkLc_PMI\Yt7_+`e4>q%X'cK5kZ7&8W!e*dR77UK_L8U"Tn&UA[
%#@+"j&.g6D":('F>"*4>W4O0eb1VaelaR-QB13rm@679&*=M(%KWbs@0n@o97!D3I$d!o^!jmla&Ytt+=D%c!,F/Hj"c7r^-m=kO
%;8<LL,:Gs@dJeBUi!YR&'cgCW&Oj<o<u?9`E:k3nS$k[*`7aN56gYYQ-kbhg-W#*2)o;g)C$`)*GQn2uh+kN(-r`B\%Au1FTHgln
%(j*r,;,FAb)+uI6[89`rTHXL7oGa#q7Q2l\!/\@.dN`R@8Rg=hVi;\B$$IO`@iRD,M?><uCbHD4B0k6?)S7^b8>8Z0'_Fd'+:ZAa
%dZF/_.1^YW7:bdVX72?P,'je5ULiA`bpeSoW_/I%<=ldD(9kdmBfguK_$1[#<M>DHm:-/nTFhP'=AbmN!4&QUY`LZ^2@>DadqAs-
%SnPT!OsJ\1SD;'`N[3"ikG`Jg2@7BXPCYLk%A9d+3UqtY#@N5Fj`(HY@r7Ni1j$kg8jW7qRfPg8eeVm5$KJ:bnF-UO!u)BDgk%qX
%<@%jm(lfCmOO;)m`Xr@$:4\2M%5=Q7,=74FM=ist82Ag)M[>;p:1%#"ikTj!lnH*g]Cl7CYc;*R-4uh'1bAnRW_fl%#"U><;Cp:3
%Jd#_m'/>4%*Q13G*#>ZE_fA'.8*V<&H&#n0gTEY>)?NMP1JA9WD#nD[_@[:,*u_pt>Za?>j>a4[M>QII`'U<B3+NKViJ9i)S2_G%
%=n#Fc.\e@'0dMZ.BnUSp--f>=HrG,dQGqR:+e2HW=p7kc(+Th#9/gh\TH#5`AVgfUALHA7D$E=e!XT206^]<YK0g-hl@J.=jEj_X
%$FJ;Ji^@*>@+8/AA-$'E@'<[&TrnL7PW2JdZmKV/Ls@/\6^[R+'cQ"?6'5;,1QXd;KWUp"cEe@-]'Zk%TOrq<!iOb3,0PkN;.Lh6
%Osn1U`QF?c'N@U+7AB+F:fr@2+J)"E.6`kN2CaC'kR0@J@cI_D/)-%'fS@^tBF!CMZsA2cd0:A2Kslgh8a<R?@q?Sj[*&qu&B>bd
%#QY?M8$Z"P0qo9c#OO&pmb3XG66Uaa:SK!j.P,?o8rSrbg*=d!LLc0+%-l([.gPkKpP1>$A[&`]C!;+?`"$#(/d\nD[+f:>UmD^2
%,d*IlWha_@UL\p7[eYG(JPbY`?1:ep%+m.;cB+PiMZZ<Z-/rjZ1g#.E0'*ag'@<WYq5E@R#r(g[)1,=`VC%!73_A86Oc^L3iA@^Z
%Y]bGn.(fY`Ji1qFQ0"qEETMdNlsVn?F@O&)5n^^n43pir_a_Y^5n[=uO\mg?`^Z,<G&\(MD^6h@/8P,633kD,@`dmEZ@QYZZ59NE
%hVf]YGKIXfOGc6[3CH&fBH`>2Z4ch)-kf@POoT7lSg.0E;BS:fQKkp.^q"Hn-l(<Nj)![(MN^22X,Rt)do:rVb)RgYe71b1rdKR_
%+De#$:ML`0ed,5`H"8R\WtsN7BZ(TRV?N$4`OfY>W[\<"W,PKH"V)TP7p2$fP+c9Q5]^BE4ZK?!NF^]C)^U_>G6#^;mE*/_F#G_q
%b'(nGrdXXuXlZu:]+4`hk><(d`;QDh47.fXUhS?7?p0f?WBj?NeOW[ArVMU0`gh+P^%Re\-`]!O]CCMMei<3=NYU/k*OF=3,?SSa
%"K#J!LSL3=D'Rf!O4G2tklIO8J;@S.0U20g\,joe%hn$prHdBXAXJ-s?4PTq!ERrmCqOdEn@W7"i&Qg;lC^OX_j_&NCg:]6_a0]+
%)S"A(Q3m#PHGE%H\YQpb7B,Y?M!o<4mYg\Y9)]%LjW*hP7[LbT_=MI#>Dc-pJJ;M@<"l&ZJREPUa`e+h5"n:EntnK?f-q9f\q+X9
%Z!gF'F'h']4TE9BiLFHF-sg&5L0L;7Z?4agR#U3CFe2AI%WL:M<E%Qf@S=')GaIFAk+meM@,,\"8I;ma`^*G]1PRgEYkHM]Kcc"l
%IX1<<Il;t-+%!e1XRb)T^au9Y<>kZ@m"SL(+aN29[Yk2%=3p6$Z'L0iio65WWEk4X$,O_HGeb)P..EdT*D2X9EY^%GW;X:j*dd-1
%fWaiIm.KK1*g^ugek1;"DumCBRINrbPpHMkDg#I]DUpE(lltk-W*?B<U(^5(gC0`FR+"t:#D=&69-!<)5&7ajRS)$s*EfK.I7&]p
%g*m>#-30Fn3JH`V\7)Y=LT[obN`)s6ZYc^pU"Z'BQ)f\.Qh@S,p)\ON9`ln/FT[O9`^8k3\p??Fdh$tG;`0<WI$lS?:GW-;Y'1qa
%qrU$e=:+kPYsi_^.*9os9naW]fb<!(X9AOJ4#e1%pd;0M#2&,rE+==*j@\cmdeuK!\%du*[S,8KpSd2op3:JOhc,_lAolJ"/9_o=
%dT8Y?8N/6Z'q9;=>S1V*TLVk,3:i]H\U5aZ'd60B7X*N_FB@4[29ljb7J+Yf;jKO?U78AVc*?D$?Q-Juj>NYWi15H9mi&>]qmUKg
%f4;YL@5adtS/kf'/EcFZDn$g#4VDE[7l<H@.s><ug$eiXV(?pNJ5j4%DYt"#]],[@NN3N][i?"BJ7l@A`M8BX\[%!3Ia9d[FneYr
%K^Z3YCA0OeoJ;\DCNhV\B<KS0naA[tk262">,6m3nKI(#X^8Sa!"N=rid/KG2AcZ*mRiN]Vd^WSNZWL&.(bfMlo>a.M5P&f[Dc^,
%G&6:%Y^%9tdB989j7(HF-&cmOdNs&*o4sgbNIed-1)K#Q;CfIRrHtkNl,Z"7\8b+'BNih]WKt=]4Q5&Q>`R+m);p%KMr=CG]:FL3
%/T\fu5HScuKB#"Z?!.Z/S'/Sb`Wl:6EN'W?46bABXu^VNE"pI_!0:).Cc.hS_!l\l"K>H$(jnsrCb'Db`>k\F1#I6(>E*40/h"YP
%g=86S0:t//eBr)P;qEM+m05VQcDo]$Ci3Ub%L4N9Fq/s8Q:jkt(AY=N[oFEsp]%H-3](nnS;.(BdP#$MKd6_IT=)"r3.3"uhhS\c
%q:NeRGHZJENUaYWcPf(f`Io"_ic^qPfX\TUq+,pj]&+A>DJlNimS5c:)]X4/``;46j]nFddc^1t"1t-0#`#$2!^3VI?1Z/!S($!D
%J9D6<*/S=hE]K'om.;#nRG>0Qg6"M&S-LT!s8/(%FouR+B+pgHl82Z;$!ikk%->@E%MlG*`RVsc4o>LgnE)!#Yh\H!l:7oBOBa8O
%EX1Y#>e'U62il)b9dk=TLs?!LVIu0fFZ^%o$(d!Dbn#'=F`TD4,7#!562JT%4l:3bN74"%8;Hs:m)Xeo-s62Rk;f7H!>E:p2u/OW
%@IlSW!;;)<r4IBfgs;CR5^ACU3M&?SkIBGqJ91e#,+k^ZBo@Yk_RKp(pRpVB3a;meJQ,E,[0;;_bd6Sm>N)+.1EFtJiAFcm^?]U;
%n"cGgp/tu`Kl\n=g.1/g>mahl5N['lBZ"gGcP\!=rUU?Y^u3M8g0LEC%*SbMP]^^H)>`F1pf[%/WY:ORG!\BVZmMWK$:bUHTgs:M
%n4?PsLS"i9os9J,4WZ:r["fl,']MWIcSY55h<sY.KSAc3pN(u;ZY+$l*^>#JllLWVn8iAXgE,P*g["s'27S#(frRah*QC@>nC_qs
%@-7rsL\%O_+,n2Y:'9q(#,e%uBr<W[A`$;Va05*MFum$,PG9ft1I'pul?H&W\:KVi7$)FR_;u-80/:a%K-B0>3Eq]JfjP.^CqM[`
%#f@dq&?Enh#^Dorg@>QZ`eZf%8FJ"CNaN.qks;ZtGib]5fW>L'1k93sQh>lj/qFb7@tGroEV3-to!'cP3:N$f?:fBU'sD["q[HKl
%R=loZP5bI=N1^cSoKY4li+SG[Hd1EbGrN&p\0Z#UnC[f5.\dm^0$(KI`HeQGYHMT1gC2[:-OOn'gX4`c^DIo0i;fPunseQQc$Tal
%f1-0"dk8U4&kV475)Y,qTDD:&!J(SU1\B-gX$W_:"OAU6UG^!mKr$m2leiM(\2S;EE"HiRZ"!d[DWh.K"Ru%O5J5s^%gX/d.+#l+
%72b$o4fmc@WI4Bc)m:BE6-fWWA>"(8:TG%k-g+prp@'XMp-?nW4SbMS,Lu!PL.B;<R^,Sfipe?T[U1KlJkEL8Wt5bKkNU1@<q\P(
%k=m`$k\@R:W,Ha2p/j0jT/WD#R)Q[#8qK3F4e,n"_O34=D=`HrnBE1_lue6!mAHSAMLONES`c<Y,C$)V@^tZ$7tU^-bSaIH[&BJ'
%GFNj*0i*'\io["TQM`fMYm5o&_EA?1eK\\d=]hp!96uA)UiBc"61324I,,@uo;$?opCi,r2LF@4W9^hL.a\?=r_10Z^t"T2<`Ek:
%#7(<fn'sEl>PCe4Fr&DVEINpWb7SZcS)^b7pW2!)hgnaN*`McOp/<$O7)3l9im8f-+A^8,gI-Mg6s@Ib^k?b3lZ%i:rm1W?5CIqW
%l0I7*iK(acjn2`Sn"95<B0R)8R&/bbmUg\IcHuk*E=rm>[3((A2@GdB$DfcB,[Y$\:'<IHs6)tNW3l>n0bg^AD$2Mt=+kum+[.(u
%K;n2]L6M\c!0ZcOa\VW5/eb_)"lbuD5RK46R-G#Gi@mAc0h[5O(1MRS2)u+E_M_M5C(Lt]^e6G1puMQIFWU[GUp1B)j?W2AHNV"E
%.YcQXf4<!`0#9_EY\t1a3P$56#Ldi9mM)\!B?n(.O^*aUD/uU:Wo]fbm()0-eH>RB_%UEVZ^tHp5G0Y`2Zk\2!3HJo6p@'V3Ta&V
%co(h)esF.dn=93\`Z)D.b80+DW!GHZEGa0%5A<ekndW6Mk[4?i`n9gUdcLP5gfI#1FM;^R-\m6s%u/C1m"s9o>ZH'Ql[!!@%eZs2
%ABfWDC2k1olHYh]=Hoc?_Q06f9npu!b%.98]\..FK^,Ep@B9QSiKRM<jfjsb,1P:CKo08.89^6@#n`+d+.t.f!0<@]i)*XOLXTf*
%lPL%lZSaq-+2N"G%nRNA*7-/A?LJaal;hjq@_bL$>kZ8F0[cj>%3sWgZoi.GcCsOT9HNSWl8PkK]aG)Gh#+_:Ukmb,of<3kaHnUl
%.FT\Dci'%Qh,O7*\&L,",[?'1f.GO@@E@_bc:D.-g@S3t:1n/rn;'U4$A>&GANfC.ot[u;_TcBrYj5?,@S<Rg6`^X"Rb`;oI)GW*
%n2'A^\H4MD=F&`#O"L;LS/O@<nEqA)4Mu=#D[k4a]^@bp%?h>E<I3QeV?M34[:WgY4qhgS82\2\.G+sc:k3Ms9-$@23O_75!UT:6
%&_thRpY+ZJ1//S3$'t!s\/Do[&I2"=%]DanK;PJ?E7Dc6RCN`RX;XLAVP-ls%M<S7b)TL4#"V=;RkQE231GI>VKhDL7gBEQ0jFEP
%b([WF@,:_FTiqs8iAO:&m!ia;M#S>[JiDIVCVDFHqb$k_G.AuPro+r>KYgJ=%-]9uW;@LE$R.57%\\:F_ouM_MFaq8D><4oGZb(u
%>f$+fj6c!<_?Z3e<2C%(5eg?q\cAM='c)G04hqmg[2d--oO2c2Q<HOhrK'YmUH4QD'3KJK*HNKoV8k+JE%f#8fdJ);rf8&6^O/'K
%^Q'</Gp;R(rVc3bl2U_6^FY@e+=-n3n^;`3j<:,fc8`h9[X:fr9_S\7X3DkPo-]"^Sk3*oGN+PUj$3J!5"cZM2ZLf^rSrD+kC9uh
%bl2:fs7;;dqj0PHHqRh:Hcpf[S;`2pk=tqE=c0`)&ENq&#420oGJ[G%-Z[`#_oe<,h\Mb"kN^>qcP!^$SRt?DA&1)"\Nibg#H?-@
%fPm/-Y[<l?#2r,CWMa#>iR$1R/">B8>j6F>idtoJhMF??!5h=7b>Q5.dAXqn=)o*`RLBNn5KeKPYAMBLn$DL>7h)FCHi?f\e9[8E
%o@H$=)/b!(q%7p9Chk/ZDuEZG>?)g8s(EeJ0D"/3#*2k:15-,rO_&$Rf)R^URLE5oWn/'n7uP9d*e2[QY[9h,>&i2Te3!2l*kWn2
%#@KVk"KaKoU"S]H)G2XKiEQVq6k:ufG+*+fA'kb8l;5nFh*>JknD7PKJ;atW,ND?Y+:T.Fr3"VRd8#??<1/E.P+4_("<H'7N[Gf,
%r25SAPO'4A6rG;n#@[L&%^B0lRFLhPb+h';[5*:D#5'mW''*_J:(K2:+tjh>XTk\Ya^c"g#/UU)4WTDJpuF[uYpnn-s&r^6l8USr
%=W^As56*&t@#DK\i'9%b5@R2EhLk9uD`FAQ3'kFbSkiub'D-?n*"iFC8'2Q2P9+=KN'nF<o+oEa%-:&gCQ.;:n6=/g<pREO<1"h'
%hd<@'.)6(CNQGI-LE(M/Ln#0Oh,G&N;_8sk?!o:2osl)AUb,o@;$eFh!r^l+EaGcZmFSZ'^gU%][%?2@S:;:K2@VnH*[KAK;u^Wj
%?:Y[bT*nVZpAjo+3*q'ApY^k:F*u/XJD>Q4)?),&(R?KLO7s^n;U)0*kZ7m]jmLemJ3,&"KX0tr1C[(ioF*_K(i'Pd5g,>@BUX#>
%'>dQAZp9X[)Y;?Zpd=hcB(g,PJL/`MEJ)&fqU6]QM/].5:p93R@EVKuCdHulG4Ems"tH0'Ck]]NdPMQTY9.-)]QqgVs#Fq0VXmR]
%cQT%!N&H.(,PfS.g451Q]H;VD&ZpM2@JuHk+rKDsXT;FqSmNN+1qt^S\S^*_4&b:p;!-l.6AQIP,6[=m+;Id)/AYgFAK3F*Pn2.8
%Z*NKX5knRF"*iZG-B^b%M([+qKb*b\0_QSh9Ge)5oV$lc8Jfmm>0%3X_NpT'Z@s%0.[dW26]OPKU_k`unGa`F""`\$q#pXcL'J!M
%L_]nrL'OIm,.C:H$#+"-IS);V_48[g-0e'(.HjA#r;XV=E@&PfGol62:Ii=t;YFKP\V[<mhAAWoDt**Ag^"lX%I=c:b(Jd!3iCKV
%ZC&\j^:UtLK/#me8DIM@CipnX[T_\OcL_l2SENp'l(O&F#IP!Dk"h-]+LQD%2rAg*cU.aiap98!Mt$n;Ms28p#P[*Rk7G86?rnro
%59M*hOY^WN#/5[DV!^QO"_&Ms^X0l_)e3D=f#r[&7IHEN:*(Zu/jp`SEq@1L7-9ep4;2_Oi*"q/9daK,Xl1H\roJY>Bs94-6PGms
%+WA@N!JN4u$\q#=GkN`Ql>7hsD27j=(:+QI6,+YP!r-]K3drtg\`!VAVQ"r0DpZWNUndEgL5r\dNYbiGLle@&H^%DcAeJ7Oi)l`[
%=ia=%YQcaJ"OBmHUV3bW-,;r;a>Meb%9_,:T7RDCKs>`E2kgDQY`mq?%bYa1PFm^XgWDZSDa0eu*HSr4Y3E9BL[\i5-tk/u("/_P
%!^>T:m;tU:phbTpARaHeKe8?eimg./c!2K\(GVh90ckoA5nVJWUq^'6\]'jX\>Be+fktR-A&6SCcup;iCF;.uTT,i5iMl"9q4\DQ
%$fOY`K?6:=%EG5L42cJZ86L=XO2kT'omLW^hs@H]`G_?[^jKt6-[h51$f&fC;m<1:$OL]dfV_@o\0]IlN))d!fVF7-(L2$'dNNd_
%CkZdO1l9U=/Y.eL1,k9(1E2#nGbM`IkM`F<r)Uibk%Z,?'Z<+@(dcqc#h8#TWACDAiN[6RG8u`+fb-XAN=,<oH[@'"DFKL7W[BY-
%OA7h&e@%1;Ymsl[,)A,5":/J%>6BHS@qZ.4a4Mt]^nks?$8Nj9P?T[WnQP0l"Q$NtS$ugl8LH*qHlri@-cX/thb(eI*Uq@qI"]=r
%<Ai]hs"qpVR'[3/)TWK-0N\O>`C*aE=`B1>g@RC:9@6bYPJ.$[SW2PBf"u^6PUm@%kOQFGNm'80-$KIWW!8RDg,5"&lAR=Vl"]CO
%WN]MYMVkSL5T(LE-)E[j*2\9<9:SOA#m+VJ#I1ps`u%n1J8#tWI<6PtJYTUZY:D8q7qQ?%f4pf(FouYrc?RP#0SL[&-=#:"N)5<<
%he\W<h*)S"Gig&7GY33-.L=oIB*WagZ8jB_n\BUkPK&,IS][bl7F2W`^V^X<IPbn'_GbhrClEm>Jupp!TiSoG\@Fj%An\jEP+NYR
%!cRPZ`T(k3%0BkPik`hkBKt8M]qi'*JXS*=1\L@NH>*9h0i?nPmFOJofG5^`<^[+cr=QM1IO51k.j'oG,`>&:fXZ"r!%0iOnLano
%^k0ZU\5n-ZM=be%9d9u&Lh;t/7Ktl(I+nf?jc*8:kEPDjHLs7T)bGS!N2%`;n%uJ+VO(h@3LGM([jAB4T[eWWZqqGVE24rM*(K^(
%-M"$*q*U8H]8GQJ#[`*NgJ9D[X3+sd86X@@78AF?/^\gjGR^kfdaEZT%7+XS"6i:2;hVHrD-Q&#Gm)3=39<J[#p)DW8P65*ALjbq
%6:Y*P^[7*F55LS9qWF[S<9-4p16=%l3R(ZF.eA"TX#`N&V7QbZa\=lG\0[NK;5&+dgD6BEm0V)r_^E7t%`leN<co[>.$"HNjJ6+E
%8n(1'*N<(g_81:QaXfiBLmt/_c5QM9L>ig;\5t-jAEQUJGB,=GS@IG=LZatf%e_Qg56]/Q.oCY,K+riA/UR$#OTm#V6kp!EJ11iH
%0PVg,6-]\dX+<W<7#8o6G@D"0$>4iT<T/7B'0@[M1V>)ES'bD=*es9'$a6X`3^-]>J,>2ukV(6J385?;YrkV@?.]ah&#%[D=+O<8
%BQ2Ek$d=E7Ttpnr3"jO]3806so&h?#=;dH\1hC?ZpQ$j0NUclS,_eY<8M\iN:$QCa'q%\Jh2<g]n?WR$.Nq<^FKL27rGruoEN5V:
%+2>^^T4&j28a/HYXtD=o74@c7[5mfnd+X`;6Y\'sCT$Z.WQB0(aaLQg?"W=cE6;-ah;5:UZ=7O)dlJUj,-@(PF(MF!)$ht$[I^oJ
%5T\F7i&ren@=KRYK.cY$N1OlBP*LoOZ$K)b6hGS4N\hgF9j4]S/3<@+@VWNX@-G7/ll't&]&;'BSgErQ+M_1.<"8]t'ON.1QDY3,
%oQa;OJfGr@Bs:EGnm!G=dreF1VGO9,5TT,b;ACJ#5jd,Jo\]j_g7T]EY`!V8.4j$gf?+ft)ud7"k_@%+,/PQ-M#%hhQ&F#7$u/bi
%R^ecI&*S$2Uk$R]p-kDcs.2=pH)UnO!<J^:HT2#8)?"/`Rf%d_BhDGDBIOQC3FG[Ng5PN=OEPHg>90mYBZE.oVWq&G5<pKfP,G`S
%BU(]9!:EN]5:l',)%f>ER)tBk<?u9&PFjN#KE4=p%5fHR<s:_!N0gpn&de+7mjSPn6)Ys/*q$%'kBA)]0c@A!-I69(hFWTOi$9pk
%@-@&$p1"G)#M:ja$K`CtK4!BkS)\Hd@PB=IJJ?l6YdnjNPANV264<?f]Ot/b(QI+`g#eD7`gg<)-N[g^Ho%KL>dCf(hu]97oMJU+
%C09EEpiB-op<>90#tQ3"?$[q$1+1DJU8.O"fODJnYatWV'[Jj@VRq2j1N:Fm_R%Mt*jK9NGs)G&g+sj(:@ZJ9Yesi$5pP9L,`meY
%1M15&C=%[/%qBE=[N,_#&c?n>T.f-qJ`,-SWD66Ghoq/UjnlNBm+5!M7W>a))AM8OR<1eh*ApK#VcUjL,.fU+`era/`=`#,=^it4
%&'5/KJ)g3f+k$nDJZ+cEP?)@]bt@f1I7?I-7./0m%4Gf1KgJs7P48hUhWG,mCrkU*pr/[mBpJjS+"5Ai2&g62MW(o<aB,+r'aCg8
%iLVr&.[U3;obdX^rF<\9]JdAb`k<g/I>Y*%h`[K!!U#8`<XK2ki_2im3LuI31u>O\.B0+d;.KSGc%O0=eH8m8-dMKI#bjW$JY%c>
%_lYmA6RuHTj':4-J,806g%i,plQ;9%10:ndX:W3,h*d<OBqF.r"k)*qON)CUVp**o9644EJ`e3]kl`_ZR;A,r[/j+L,sAQt@7]f4
%Vjd'+m)`N"W#d7ZR#%62llh9Y@FrTH8L/0VR3QP@Yr?Bt,!KVW/+NI;j'h*eMP2mQ,GTC3pL=P*U\g)moaDK9Re<pJhME!dJg@^]
%&MR-aGZ"TP-Nh]#)^nA1kt'e\K.,7-5%>A5T9c`qq[#]$En+Q4=l-s0DB.:J)ud_k16l`&g?3OT[hYfEA`D?#Y`<7%#spH+Xa8;o
%?%Df!O7BYC*h2Em)Z5f>Oek*u)OjO?f8))TZkBl6>3?2q65)V'YmMbS@RR/WMk0Lo9:sC<%'de1176oaf<4'mFp^6E45)P#JkLP@
%HP:11F2A04N#sFWA(R6'\i*Old.:E`<Ws@uP\rI>PlacJ\'hq@gi#]r%]T[,b+XfQ``).@#k,HZ=fg*%moRIX`Se*cW\E2mL7JKG
%1UG3rme+pTaP'/PFPQc9`hA3JGDToPZ2du;@_N#5gbf8J%I0&u6]l/ANTj%SA7!YBi'F*a9S+!<!>;!QE%AEuE$Hq(\NM!\l$_0/
%V?=,&V]M4J'Po`e);7+"H'fH/H1(#T2kRgo35_4'm&;F*poEG7oL^&J(ZM1OonR)+Z<%/B[L#E)fOFnfbUX.U[,eb$?>YIMTSX(`
%RtbWo)<?o9?S<Gi\(2N',gmMM(cn_]3KSPLQqW['r\Tj5"HB:A(^T&;SooUB-8Xg9JL/dp:tAjDIh3=G$4VEUKa:u^"`^kp$Q9Wb
%c]\B)dd#:AQpM""Pai^sAB)Y^*<l6B@hTet[j62&R-'2-%M6QG-/M>O<2L[-\m\._Uu5=%BSLX5=%i%?=Bt]JHDpIP,`0]9"=BV[
%UhqeLXfYjt"VJ(#)#>W^4?<(fF1'&,->eTNdcC9FI(2SO-e*(ifbKDnd4d50i7Q'.E0gsh"XDN;J0;E8,E1jbYDt8V\Xha_<[JJ`
%-ZWr]9<1X5l(G'/9iF*V1j15BB'Scf.2Jbb__5;qVK?HDV6;X_T-6JJM(N%%T?l=u<8XU91PM;.FCnh-KG7S[1NDhtfLU"#J]Zj.
%+GckfUEMZ&,/Qg>Z3&K=R0;E@IL.-NiTr6u:"j6Pbsf1trZfh9G,<3$R3js_O7%&^g_L^1OKOF'np:h0!PR-5*E:;H%MTCg6fSSa
%>:Y[QTj7q6fSD:Pl#R/hE+Mn=J[7LD*7F^DDY2H97]8d[3$`CZ55\],.Siso^]mpWPbTN#/lKdL(bQ0]]KOQPKu-I_1RRetAI>:K
%Gjc+NIa'Fd*J@J@4:'\u)=c['XpjnMW!dZ*i[8bl64k9(f+/kkD6RO\apYbtqWNfngm6%)b;0c0Z)m$6;&$;K"VHq.%'T)&:;/E]
%<1\.5o3[mU8-D%C`3Z@0)L0"%<p^m9o40[@jqnP%D@6\'JkARRbY'G'%:Ip.mkuVPOJAoXCfi<7]7?6Z7Qq=4=Ibm+f#s>1W-E'H
%$e@00%ZLi+)*bdm=PTl9HOS$+Ng^KeQZEtB0ePueAT.E93OeH]iO:PT^4$+S3\B4ggp\Pa%pU7+KF$/2N=S>]#YYBA'n6<TPt($d
%lm*M946-#Wh/=:UBja<nSk[eISd?IEa^YOO5eMPRh)<=l"Q4MuI0aY#c0Oh41a&mr)[HGtMaUS7P7E<B![LS1VMR6@H8bs;5"Wg0
%[nM3TW^^\+AuO>e,k0q9ll*f/YdSQa=eA;p,%sV1E(qOYL]Ejl-nr3VOuSAFE>_gJlid7+ldEGJj,_:T#kB*8*mIZ?hQR_bR/gu_
%J_M0%jIF.cKKs02b^?miKH&42c,s[t[Qo:\D!_:cUfuGWNRY@tI*4U+REB\EiA"nRgc_t:'>tk&<+7754'"]NFqgAl8paTti6[!Y
%Z9COpr\@B0V1%:an*0lW"b4D7;\%JFlV9$;-0dOjPO)$b.P:ek9/!r:^k!6ue@:#B/(Z?&[[D:h%pX>\)m@!'h$JXM8VCnC^n*WG
%nFOq;CTRA$][sRUfTIOY!)@/S!aHj3*I'r5MMFLT5a(Qs_ZIZU)MZ:Bd*0aKb]^T*bfto3';K/J+mG'GL3(dh(tumog"<P!#+[P<
%G6&>'Kt/+RKim#F`)r[+SQ8sgfKqpZ43nY".`P58@:7K3j%AI,;j/R3S>$AQ#<9Qa9/%mk"5pspWN?l\>m'1G5:j)#&&/mW;&(IR
%[&*P/'IjgWs0+`m]Dg(sm><_G+$WO]]['QmVlY!p*mD@[ANL9G1%KJ:nUhu#<85YG3afLnFVS=C1:27Oni5CFLV>12=I"ek&PhYn
%aCGEC:rQT,0&%n6Q^V1TG]N&e0VOSg8)bJOcc1p!i`-0-4]+rq!<N+N9-E<ebBqf5@q]D=)aPD$e>a`q_K+'S//Gh2nkP;[#D8*8
%P1W]CQt"BDQ1L$rd@Xk-m<fhf3st]%(dVn969kP8"@9QK(n'(H_9tS>;2@YR"jIqVL_+^OYU(^&=@BK8&jRj\*!q"3-t\%sZj-KW
%`\RUA!V"O<hlKb''VO:K'EEA,TSJ>'6#"N$==iIWW.=rQeSGLo>SL.0X0AAMeS>:*rc-q1o-m3OCmCHo.de?P!r3faqcne<Qn`lN
%i%6cD4#l^j"T?ddQ`F(nZDZX.K:#&&9J#;`V6K3VQg':&/8duI"6UrI%AMBnQMa4<T<K?t/h0=YCrkah!6h5Z`n9JAgCY`+\8e]E
%;qS^oo"kBjU9f7oL!L?1[>W%\6f*BMHj[:i4Sb9:0Hr"]@+82qZ.j,.7ih<[0o\s!1:r-L7^I&?eQ<.@)*21!GT+poac/;0&I8=;
%ij3;i6s1cCKBnJDb5M#'IXgTHFaH5eIj![FZ2ao\<ogHXhm(g)huZn4AWn67]Qk7R?]2<;IpcrG]]]?V[_b#JdUhSp5Z@-cp^Rtk
%fd^5',E*a8?S''8+0N'$1e+_3#SP3i>Ka`)X;o@h?0O@O`7Y1CJ$V%*[1Q*P-P>)bXH0S2;cJG+9_B_%>peigm_%`F8dI<NS5a1j
%_q!(-is@?tR=)^]ASls+:Y[uVRb7s-"(#\]jta%')NR"WO0s6ajH#aVEQiZE^m&tP?8qU*.l.aH^s)pO!6H?8o-N;VSQ*$LCpdEL
%.n")3ps-lC'?:J@=l]N1TDd[JME"FL]nTCO"/!.b!S4AZMp#3&'fEBa>So?jJ5937"^ZN.ep,DL?oQC41c7Ze&=b]V3^Q@B[r(hS
%&sFH]m+S+(eTJr`YZ_3nhYY3g1#%6KSG=_-WS,-d8s.\q/I5uY@0?4mHlA&^P%+X-[9hJIZ&h1sic/[ajG?mu^h\ZMOY]"cW?d=4
%M^spc*T=-\5JSIc%c+#dh[l*MGWem:B=DoT%UZ3gb+;@jRBat%CKo`*_N65u>q?1spcHJfZ(99C#[5lD!]TCGd>a[<Ce%nCGG!Dl
%!E35oQ:Rb5>:^j%DgOD)rQ?TMq-1Y=TD#LF]of(Y.MATrA4(c4/g"&Y?+YB(b,.W,PBlruko=B(aF!s3Z818d/0ig^&cHA)Q71jt
%KnB#>i<#L#'lj$Z.fTY5bK(Hjpu+At9T:bdgq<KoWX>?!$o_/g'Ho@AJ*Z[M>7X_"Nl8E:(BCHb'0n%k!_Y0f"lK_:i*9BA]6)_S
%XKAleL0?j%8fpO1P:L+@F2;67H*D%i0;-FKT9X`&#2\JbU83WQ';jtgJ7EZ$@;7m3OK#&5HCOBe5o,QKFhj`"!kk\qpV2$!1"*+K
%VK2taL8le3*M6U^10ib"TXR0>c%o%,"e^Gl-L*RcPX2_Pa-=0((+TlS79M)U&$X/;NKrd(!!\tA!`sMH#MG$oYc[1C_dKU?(6jc<
%!i.MF[,Ijh\r'XsnM1oK724^YP&6K6Ek_g?`cU!.`$^kI=Ls'PoH\sdn=I^C<.!G-"F@.[;_s3oEJ"[+eK>Ii*$%T-jD5?N`Y0FW
%<bH^4?-:pE4I5NXpWB,9;&2^njHg*c5N6Rj;33K`&qaq-CYt(;>S-QVk.m?<7'mJm]2P^t98<-0,A@^d5os*G)>)=X:4%<=e_B1'
%_\hN:D/.-U*e=R.cKb%%=%(OlljCjmX3msWRR73ark03pX+`J4PQ9+`II_O\p=$!ao14`2kD>3CH[='Sm,=oQc`Q=?'dD59.&O_l
%Hnh\mN2$]gV8j"\k]/=ThKH48GVA/<-a,BJCof3U-%fp&<>B+G,9-1Xpk3^Q98-tR"c`c<V\a"';[NN;ijt2lK$M#*GZ9TZF0PRd
%L,pteBMuMSr5QU7PTrtT_1[aC4pO=JFMa]8O#m!:Zi&,/E^ma?LQ91Q\bn0MKV.P*)egFl*S#T5BO)`R9d`![@1'$;3hnYd!kq[3
%W2fXfUg8hSQ"7;ccn2=M>Rf?DRZ!h@O?.)@5`k6)&;u.>8$Sm.\:#_gAX\ld_2:aZ3^N^T$JqSp'9qnV-,O7P'j[I>D]HXK,lHBf
%N`r4A(L"b>!6r9>W"O>Ro=6W;0_hVL$1eNVn)pptf(7F!adFO`_jJnqFlH9]j?TTFH+T/=WQlWFZ,Q&TQ9H:o6B8%%BQ3@dW`Dr1
%OM0WVCg*ef>sp=4oVtg9#:K+"DsBf)"P+24CfNbcgNp,Zm:+pc<$Gqn:"k"V,BnE3_Z7#g$l`](bEl!Pi<gY'bCi12WF?DlXo]:i
%YU[nRVUk)@#)4*RWbZJB-bcOJo"ZQ_-pr?@dRcNE2;I38-;E*6CG>:tYq2(HjR(KmK;A\o:1R\<I/uJ1]*PK9">Hq!*%&,\fCIjI
%d$M`2p=p%_]$b8Ea_b#"-=bW,rRAg!1eAV1IZ]7`<*jrF)8n4*Z`r-f.CA=_CERnml;Y>KIZ.TFD(qan)g"jEZ9EVQQ<`hnbUGpH
%&t6H#?.=G'%?u@G\uPf?.1u#*Bjo+%B1W^qn^gGZiCk]/@#AARgGH#I$\5PM7>niOWA]0_<QspDijjVh"!P&"A5HjUk6]`mXfSVU
%D`C#5Z7^/.F;7;7jSXTU>?Up\;gs6If>#K-CeY_:bNN76b@E&4CApab$6id6/:0^2._CSsqjJj^]&XId:UsB:H8%4.ZZdq^i2FUa
%Mk*f6H`<Us%Nt^)Y8_H%`\o>T3p*,$0P[p%"6&@d5biB)8A8+'(5mB+&(PuVD.e)t?(+?L7D`.DMkES9@pHXgRBfhT<GrZTY9#4c
%[Z%u;?=BPSdW?C3o6Phd[QJXM%G(gT`_Guf>*>^pZO[p[ijr_b$XM@VXlB2"o`-=(gAhKjjF`CRf,^1r&khRj_N<Q]NM0+M/)5r5
%L(%,AB$LX-?m-'H!L3W>)([O\ea('"\ICC<FB"gfAIH-&.0(0$=ON)-dX@POD[)u"or<-L`ld/iEmpA8OYrE6!n^ZMO<6$n:k6u?
%#_pZm>DlN_I^"]kU-Rhsaa+f#3C_m_YcAK,Ut7<ReOV4&D,+BrTNKI^k+E2FoQjNFN0o9t=!!s5Cm+kJCRM@FjF&ucb'F_A50Re7
%ZY,3p\l"6RmNWX[7uWR;5+mDWl)P%"(OIRT/'hWn&eci4;R;Vl`s](*AmmN!%6klN:We/4YOCkJM+$uVm*#ojZ"2/iJ.+l]+[9Y]
%;*Pq]a.k[,MbBB;"CKa=3\*MZNk^ccQu"fIfV_nG,S_a"#s)=[rqJ^tn2"Es*q-gma]H@LO\F3i3CHm.no2?Ro'J"ue_*P\Jd&-_
%@nhP%.T6'YAnL4cG[l!2dh]7qs*i/(r;QT.nd!#bSl!gfc=MsTPZ.dCFa<DsGTpu7bTdClJmMNCE!:67XEL+mknK>obpq$W5$`HF
%4S@Fq1elECZl!H#A"&dnD%A)P3DqETRq>>-M\T^_AHu#n!WQIu+#Nk+5nIm33;hjtIR_BXAQk2fDO0oV5MK//<2"b7U1a*<"OpI7
%eXcO.AN'*t2QO"$S7O!n_)J:%P)7gjVE*\8o*#,L;Wjc>RO@'K)8j;;c56Wp6n%ATk&eQCmAcVBJ,^`\ro'b%A[5?arT68.W!4%4
%PMe,6GlFKY,,'A#k:f`JYCE\p_Oo"6Fsq`RHPkrdgZ@M-j6AusR-o!V'6M>Q\3:I*atqM0PJ2SsWl_/:/aQg?7qY\;*BI?$&L3M8
%,Ze10>^j[KV?71'o9cEB$jA9#Fd>M'lY\*tJ6<BP8ti,^>Z6H!ONS)?g_Bb*RNJkcq/dN=,5N6)Y)Z0]WtjDLDlPaK-Hq4"aE$Fc
%_DjHO)geP#0kN70WBG:Vmq&dk3BV%4R9U*T:49DBU?g;R5H+'$aJ^6M0bXD=`_2j'jCdC8#TjJ<Q(H!!;8O3f72K9"<(=/I?Jr.<
%oE\Ad]aAN/<]CVi^c1,>T7#WohN>/FSqHQGP4\_/5CWP#GN+JV$Y]BCGj(mF^\upUs6q]Ar/^mKGJF$1J,7X/rpASYqt%Su:]LB#
%s7#nMrUK]Q[m0f&5Q'c<s5Emns7Pgt6+0#-\,OHeh:_5qk(!EK^O6"9msi!"%ICLs^\Qddq;6Yqqg\HtDu2'b(m%P,Z<c>di6E%X
%fU`"9'BLH"=r;kJqi>n"'>0(o<Y&f[TE!3gfrn.nQscp_OOd3ek.gk_^Z+jA;HcTXq"uLG3$3Y?2G/JM6HA9H(_gm_5Nbl@"cJrN
%S3<@E2?/E'W'<W)pe(pQs.%l-`N6sp7_+AWRBJ4Qj\Aeh0hFl[cijb`g"I2qI',`XO')$^dFn`#5/sl^:3Y&;K`EtBL\!C1&-rC\
%H%ZQ"TZk@W5%%I"2Zcu3-pPMe/4Vq-CJc`?C1Blg,BX>`J8B:V"[Dgu+9%5kjJUfI5IVAR%4a!,fUf\:@:@6<OLkUS4mR^YUt&h8
%4n]>l2\#b]o%Fj#-M#g)r3S;o.*BLG.#>Mt,![e/#j*t1U^juH_"#9GE[b?q"Z/=9iQlWrUV/Q4]3o]B87<@-begPuq#Ah+4r:f_
%R_mX>Z95l+53<kEE-kn]98m<aaM]V3B2L?Bk%S^%e/+r+Kg:bI<=.T9[TJ%ecj!96Y158t;uj#CMi05L#&*p@eHn0JN0i)sGEsa-
%>rC==+qis`s1$9)^]]2P+q8TRX2XqeY&ub_<:17uA!Ln$d&(7%E,EJgh/";3@]h`gA<bJO)IM\*)iS^-/Y7bubq?`h&GR/gQ"eB[
%"8`@C/dJAX&;9*BHf);LaC]!I_&jY0=YEqBP"Bk:-#l*\@c"#0Kbq:X!+%3[`"dIQ]./'9$X#V8_ds`e[3pLtBh8Lk[cZ0bX+]B.
%jC$kWBA^-XCG?kZC:f?3"P@b(*r+&'hF$Vs;95b;%aY9X+*76=nUKs62V^D`L(FRSIs&EPeJu)E^6;5cLp4<hTReB?5fVm=`scOH
%'5,7A5e]&`A+!poA"Y8GZWRa`Qj(-1JL8YjFM08bA#5=/6>^_#'aaFbL".1K'pLD2Iilj$lk\9l(g@D);pd%.A/Vjoe)!$[UrWs#
%a>TsN)W>;O5/QZ`39oKo@,Q2!Zq@u1]f*4<NSSa3Ch4:-TJohA(#[U53+1upS'N9//E['(c)R67E-8lSW2/.1K7c1WN5=Chr<(@7
%'B2J95])AZCBTj9,+A^9ludV3=Q8#NY,b)HE=;3WP<30<?Hk#VMckW3o;12AO]lKKCU#g:%Sb.]YCY9@dY6UFcds_B%Keje:jQ+T
%H;S4F2N):i##Uu95]Ve'Em_a'pgo'\T$'#u-Hd#d@Hc!k^!'@qTQtk5+7L!1X5jl*Pb\(uAlN3WLCDqtH&_-3UDSW&bos_tS^r*6
%\CoP1.T.[63p?XX07DM+2pP-p]emW18pW3M!iE&OP!,9D\>$gMafC^.@*Z3uVe?GdY/p-lD'.P/m!2bI5qDTg5e7qHn$eeGENT/?
%Xo)626=!krO_'&s@?9C+*/IO3bt/CUG6&X6@sUZf`4."S3),,7TiO[ZK>;_r6qYK&Hc8l.k$jub(/q,t)]"7$aT[ObSEbY^#_)$N
%dh/`altSoI`=U'%$m>*UJqTBa]SLF)`E*+qc*IYa-mY+(X#?c)BcJF)V%c+]L0n5hqochdVK'X*UpkZWfUQKqgG`AF.HKG5Q_dAi
%!(WIZBs@O)*d!XOJ18U85dlG+2>9JFTeHd318$@NE]B1,F.F0rNdY>bIn5RC'*i,;Stld!feuY;U(62%6UO"C'u/<;DT:\8EmfNM
%D_YE,?s*Do<IIna.DGj6`M@k!B:6MB%c\5`:>;B19Un]=^e<hM!O*;mT]3[khWn..';mo3Q,(SN%%79KXc:BT]Ii2_i7#Xd#OUt_
%E'0l:GKXSill3#nOtrf"'0-Z5K9Hmg8AIb.A:_gLb,iB[@Q"rdq4n3-4-F'fd'@WsRH-Ke6'?MVd<QMI#4KDKfcr2ifLKn_j`-hG
%![G$M#cJqZJVg@hoGGh=dKU766!=W.=%.:-YsAaK7A7PZZa,4_DJMgEba8OTQ2EY=PYH/hD[SY6R-3k9%[aC>nWgo3YH-oqB`;l!
%]jFk(D'a[Z]0&t,rkkAD)"V*`&O2cQK/lp_)*tY$G12C9enE'BBTd@\W#d(^I5f&?$2_TB,EbX>I;:m^QU#@'MpCW<#/f`B,8/g`
%ceS>#)ptl9N\j7[#du#i_\kapB:<35Oi-pBcSX4+!)*%Lk@jjfSj<TWqJ@oF6,`RBV?1g,I#@fbT:F#l/p=[3+N"uQGD>>C(DD,G
%A2\<l2;U(p&SrqjN[q2md%>DcX8.jH;;P^ek@sO]JW^UBo4.kLVs=lmM2\oQrBNdY/@^Y\DbaUmr>HZeEsQR9Bqt;1MCfpLq!sRl
%<#4/d"LAG"""];j,nS>OX,e(bnn^_T7sqEsY"]+B0.L7r_oONC#pB%fFD=p8SDOO%5k-]N+e:/l"PXIlTc^r+':J='V?kjdX_)1G
%mrlOA3CeY?/lJ6%fO]tfl!UHacA.IjenOnoH7Lm*dH(gJVXr?UF2S?@"0pAe:Yb$d2]UcuEY+oo[-C8*0\f317Vo=hqAoKQ06A)m
%j1dOm7EQWmn+Hg"%,ZCBNcWE^N(HAHp?NY,TAkC7:WPj&BjkTD4,=$T>bCW#p_].Ur`YLI(oqlL_3XpXB'kQAA%Q^78VSIa-FR3?
%0oqIa.T)'cSTie[."kok)^'^>`q@3['^?O=7%8?H5p(I47J0)2Mk'BS11H]<S]mdH<q6IEA1+To(H^Q6T=QLlZkX#OBDg/RLKspb
%(?E?*iG/*Uc#.'E`!5I%pIbn7+o"VJ-P`Vjd)ZVca]2XeD&U0>Ju+7[?)]@WBD2o,E:O8Oe5`UTlteP["1m6R#18mmh[lC$=X.9W
%=I'<B&6K>CQT3K5)qg<BTh?K5@Gn0)M>TURD25gngkaFN'$369X6q1_[s%ijGf_MC`o'AODT/QAm?M3A[FcAF\:O1pE:Ub$-Hgs*
%1Kf9B@kE1+_*[jDC`sPj5aYL*EqBhXc8'ZUMgmRh\fcj)+?f:#[#9mhq1(;geH^mqpDR6dE3b74CU'`oD]MN/K/CYdeX2_cIBP@Y
%etE3=&ff*R;JCJ[9p^UiZWO.ee.55d`R]^Y\AXPu6]5[P+F/]&:p5T<pcJI_Pr(cfn\em"a=e1:%/3BSL+D>I\aQZG2(9fu$SP<i
%^I$3'0gQHDjW3W6D3<f/POIY^.1:r$b'3HIr4$f@>a83;2u&>fM]j*RCj03ceAq]-Wo34$LEFTB3Qq0:TS(K!DHZFJV"nm&V;W$k
%WD5:hRFRIJCGDT2YRdtN>g&@jH7u$9l^!NbH5fMsi,Y'uR@/CQ6j!m+KXm2g.*M-=X#9$B#?6IGKCYaH+24l.0(mU-=6["#<`dEW
%%o$aVklAcEF\c(>#Y'daE<"Ub@J4ip^-Z4t]aG3QhGqguq%c5j\+PAX@E'rR9BH]Srd#aq,PmCD$YaINaU$ZC3RjOZ2pO-Y7*VnG
%?YXm:5((/0bdkOTPU."9^+':XfOM!a#i2!V_`n"gm^^q^dnGYUQTjI&pAmCk(NaR=iS8EpP!6]4o!?K*(SN,ieS0JpE#c5.LH'B5
%^'RP9[s-3=n<D'Pjq&@sMXt`pI'DV_D*e5gT'm<tH#`)K\^0dkfh!./VQ''<hRdkaoOX##,3uW[m\'$=gY^a4H[[TVABJi-VJfn\
%aeQ=^^KZ4:pek"rK/D#"Ac?dafD\p?I+&LG&(?L%*Rf:.8MN"SEEkIR^?J%DM[AZ?9743i\u@Gpb^*\>XuLR;-8/)_hDCNd1%bfm
%:NNa#SH.1eBe0\DC;oO8]BH[l*hT1KaI9<%$L)<1V4bFPMB82=UnOQ7c%Y=2,F,i%4q[LgOgOSS.Dr6mQ\CEr0PqY>m05F%Zq\Q]
%^,B;l9-Ulhh$,2HEEn6HLF!@h(u=5ilc`697[YEK7p=V^ctpb2ViNID9?42a>Fod,N<PlcWKJ3`;I_JT^oq3l;pZC^I8ERU%i%r3
%!o3]5eq1CqH71:>,(f*d!SjN>N+'((r!p7&#hJC'AuW*$)0/T8US#J\8\q9t9V8F//2<@n+C#>]s1l;p8S'>Pj99oCY3pNHs/*T"
%BPi9@7"pe;.5Cu5R%<M"jLf#^fd^9W=Y*m=2\u;l4-2(njPja*P48-al;>Qq];Tnn@4RDNcdLAN>Fm+>[Ml>](A-s#55R>XY?nAZ
%lhTi[7OHJfT3RT2#3H*Nd+RW<ZJQA\#f<+`U5FQMWP[Bdn&7gGS5;iI2>[0fOj-'`o?0_B14if_p9tq)1FKBm)Yti(d'2XRq9@*s
%hY5]&P7?,1^53q7L&8[/=/;["US&,i0q%JtrePi*@Q<?gT0'dLqL4)tJFNU7oG3TRKlBAUd;C=.dC=SmLBJuDN[bG8r>0lsDqi;o
%Ir72#RA\\T]V+96\sSJZ`?\C]DCOC?E7\@gc4lNLr8\Zt_8("epN)mDGX5YEfRq66dp+KjA(,'j2=(Bue_\`.E/STANC<BB29BY=
%dec)c=uf):;\DGEdou`cqWNgCd![Z[Xn.&;^OP%k$O/dopc[BG<Yk't(9RYMo*Hb8a\t]k`Erp$p'"hk+O1-?&fs&#=3o_?0/t\b
%BKUp_&sE+t%d1&=7g\),8k)B%_J%\ciIEUp:co4,6)GY7+B#D&]TVo#KD6-to+1+(q-fB@/$ctLjS0n\Ju'kG1BX\%:8ZM3:;N4,
%%9n')%Yj^,3QE:(k)B_<8RDJ,.Y/WP3=o.K!)BcVZ6]V#D9*G=QDGaTDp!fhL#sGW89;[[&pViPn/[lgD?+YW:)StmGqHk4O:Hk*
%Gtg-H@mXKHnY(h;W4[Z-$Xtl/!Eocuk:_CFbssm(PqAHcM@:A^%&"lDdE,C"XYn#&<M.3=NCKmUO:cuBO/6'JV';d;$,KpHHP_Xe
%KVKji[9:MpXn`mT.-qiQIp#H70AmUUgoUZhXfNYZK]*1lH0#i"-XgRoc7=^&![Z`MGT/C:X%a[>i/#!ITA^[H.6\[Y:,[\kg%V6r
%hPT-p)`-:*Gh$+=02kVP]"L?J_tW#?i>T&+.`/,tpPa#!Hr?lW:Io+IYm8hk%CFuhR2"lFF[b_c0AZ$aD4TPgb\c<OrPECffm$pD
%?+/^NN0JmlC's)Zq`U5s>h[1R]3R[lZ946$p*7$?J4ZGH4!rEdfgu'La+lLur4kT>X^Pj<**M4?B*e[3djVU^^eoo5d@m/_!V3)c
%oZM7[N(t9s'u`o&kSU;P\lhMqR34#W"q5p*`eOt'[NmuS[D6g2<%rQ4'qJXKc6*1G?qMKs".Zb$E,X<=%-q"OD@*tJNKO?iKiC[+
%8\d5lLmP/WMCAV]a<:"P^[CiP0A5tLl"OgA`WJ+,-NfEc=Mk15ac/a7U0pW+3RDSDQ<;5tA';#%<jL$UQEH"[^^hMiVLe0_33fut
%?<EgUeaOm9LL1eK4`_#@2s9rmpco$b"5I6;Nu8F&0OBl\[P_\/h@Mt=d/b0@-OB0N/CFu_062C!5.DnH&SudjOT7G!<CA>/gPB!Z
%$cURMA@iq2of$5En@Gu+YI0k$/IbsTb=j:9:0(r!G-EX6]$U)QnR=ZWgd0>s9aS4Z-]qAj`@%3BJco#prO/W.QnX<?eZQU"=VM;;
%3AYEra%*@+5Xg[HWPUXMf:^QjX=^>X,p!-=M$I.kf-1:AGcFq=B4j;8."R]B=JWbO8hVeUnAET8hRu#i_g&ns#P#.)%PJh0^l[r3
%*W*h9M)p8Z3q@2VE]/)P.\]'9=McV(mgXuXna<Y:,k6?970VBZJhp*/^raeD]Vf>#_>7W6D(./rlDAUk_sba._A9>7ZRjZI=I-cr
%kCj]paN:a"+A(uq6iPb@LjJ]S7_4%Q=kfs!<uK+XcD'Qg=h[HIit*;@^Hj5MGoO6e"DVOdDpM4Z-pZk&BKT@M.`f>3^2-'8.coHi
%JPahojn6r.>)`$si'OCoJd0BPCu_Xt.o"CU*s0Y?RpY*/5M-V3?5g^CK8o]TXZuV9L;t[:UglmIM]\NMM3[6c%U'+6d>"FuY_j%\
%&o.RHE5>(#cq@l8Q<q/95T@U.'XKO7fN`NVD_rGR76$P+$"7.OX05G,H?2J75NfS.nug5-j/foGf5==^Hn9E]WqUp]"0W/UFeGl1
%PWlK2bF=`1)`_M>ddPIUhmW:7FGZ]9V[3;g;p=DfB*HF`l2Zh34F)`e1.;As)!]O@S_MCV6a==RXAqCb?j8-k/q@C[gF*9^q[Er;
%VD7T&d23#g%BS,48?t*2hFu3AL-1+<r-D#IhOn"Ol3"O%'mN)'D"3(sXbi_F:tmbmfXt`>_M2f3Vl5cI'$CCGP#YCY0j0't8:hO:
%"f>PF%1H7C:L-`)``TNTDaiR;=6(HsbXFTfCb.!CaHYVHV/UQl^u2`\GG&!6oigR><2J;j=0GJ36*Fu5aUu[=VoFBT[Mbf!FE_R&
%4Of(^@;>Uo*S-.O\;!:q0J5n.`PQY`'[Ee&M$c!eOlD[e3(alP%osk8g,/=%0sBKT/u80+dRq8t-RufN4lFK.Sj,'3&PcA-JJHoN
%^tR:_5[o1o0*9]6-R3N:`cFu;Tm_9&__%\E<loRgU4/&HDMgdM+C?MZh/`*r^;Z(2P=r'$H(E-j?C_d+pq..\.ehSr$tjVnqIi^.
%ldddaKLX)H0;&6<)q=:jR!&E$M3A55p)qO_UjDSQ*eVK]8Y1N:^.7j[^17oZS(IA#jme6`(oA`RQF4-sqS_VMSb<2)RqAm_=lG;d
%W\]6RG!?Tj0YuKW'hIW"^\>;ui(n9t?1NedVd_/f]6R_;QV+;sT^T)aa60Hr8uW]5Xe'BTRfS0Sbchu@E,^&]d-X+(Z2?$(cPGU^
%n\?./^3obK#Hr91:#p^e2dL#1L2fA\\PXs@l&DqjYI88Z!Cef%&A35;#/87/9]Ws5%>GTkk1_rSE2;92[gA>6D1oOFG\9,44uAt'
%j&&846-56^`F$L91sN1Bm['4)Kbm>dfIt39Xk\ZI$8PsP*V-[AEJpd;LQ((GLc1)O4@F'ckc(;['&_Ju<O;$"j5j8VlX]1FVB@j4
%Ef?]p`A#NkFUZC'rjjReQ[HWVknN]?e)A/R=mXc3U0AFR:4:j@=$W(7(&S0;Rm/03cPV#_en=U/RU9:`"tk^0UoM\cc%_4jZXI@m
%'i\:5^`HL!]GUSS)p(hn?,kZS=!amUHAP09PS/caj&2o%7^cR&.cc6lX+,:'3q/7k3n-2Bg_TrLpHHBpI#>cX!'0S,b1hC?02aU$
%/"gLV0FQBKFg)Qi8+Eo9.ZEG@`J4l*(o'M2;[#Ch%1R2FGLc?I;4O^%%otA:ega7fiXs'V0B^+g<L%]'lF&6_D:b'@pdVBRFnNtC
%6M`asG**I`)%'1A7B!*IJmaP/;6SjU*l=f;9le0>Ia/F'Am=:Y`Y1aJUuoaEG`J.?WNPOAELI4*BDC1Re'Z7QA)>n%%I<ZS).Wh=
%UmN@^YEfIf.ut`i(k;L2s)WfQf]e%*=\85YEJ?,d<5-Yr&fpKm#bsukA:e5K;\8tG2(m6VmJcjg^lJM35AVED^p\[N3sr(lghWI[
%?5W-o$Qf\N'ZhVKHAit;l0[['dTC!QY:jLj.[8-Z;NlGdJa][RFP%FL_B9;rXADMO@(a)P,#,q7W0c/qK3+!(].:j,^<#H:c\V.6
%E%("3^;8t'_m`.=c7'f.)]=IJm'\s--l:Ys6SJjAC[.Bhe?!XaeE[*t_G>.W0\Y0@_)klF!Sio&!O10b*mN69pQ5*Un-7J%ZQV-6
%dh\qD*Ff11/`UG_eK\EGn?Im7!T5%hk7G-_EHj_/'0sG[4W$_Yb7F&LZ%T,$4*n<S,l"TVEVbdk0)Z!o7rQ#l?5bJd+iHi-T?EMt
%"e?qL*d1BM!7V>2ffkF=]$*CQDX.P8g;@'R36=Ml3NI$*.p\&Fff(Uk#-4B/)ij"7RB:I)(4SAgFt>)4"dr2f[/5ro"oR`OiJm\%
%*\sg->3f@iW`XZTXI1&bSGPE"Jon0`i%E!CL<B-4'O"H>NM0sP0C#3T"K\PNNOI!<BI6NuiPr0"/K-=d2;l^%/[KI`^#7`]`C5ih
%/`.Dqij-_8+ct"(,/Y1F+a+%TA1Os$fg/&/BsXbf-=0T#SVfaa+)r:LIW&K6[YV8e;P$"s1KbQ!%hgSAJ+3R.g1)j.Xj(fP/D"\S
%5,Vil616P:>qV+(`]LD;o,C?u.;=Zdb_E3^B7^j&9e9.R,$9_RZh8VHUB@>8gtPkp+X4GZG&W^_Od)uX+sl\CZ"7eb?V>26:)94e
%kF1!I7L!8/?ReBmQ_IZn+Gp`+p$ue51/R,f)oTTgY5I.J//UsuQksYD)t!V'hDdun`V0/jO\sLNdJ.*HWs>48K*),aARd!?<`K6+
%>3,rX&"+pB94LBS[f,DJ?@F!6o:#un>CXB!lls2-a"6MBqNi!i"Zb9d)gDZHNnJYErjfKI8a5*t"kj6R@[I?>@T\G'rdB@\T(?GI
%@,gc[gmC!u^)lKbT4?qmNr%<dY;Y:L2<".<SSs\V[41P%[<o%dCo=spo]sd2gc'8$o[<JBe#VgA3\LoNKCc6Y)oMKJXHUSeUIu]]
%\hP]`4@1.RMN-+WNJj.G`q4UdWutPR/73==!VC4Ib\1Km==>kOebO%8o6*gH`2E_0^>`2Yh>m[[]%nl8<J@ARjgY@nEH%4[+A?dA
%dMD;f0(E@(2(cG"lg1=gSI+`-?A,%l;1N.O]?a.,gV@FIRXlR;6f)B;)M;9MHOTHN7<N3<Po.beJr=Z'LPD>[%&<[R(]ai1alqR`
%mok-EpOjLNejW@OAFXfkXn1s-&7gj)U"[5l4iTpb$5Is3'#?ZV*,LdSRA:IQ.LVVgm`?0LC12kk'g_1"dALWam%%URTYOSA*-UO'
%kP1^2Th\(VTf/XL4/HQ%bf\\7]7c2#$;@k8#C)T<DE+_F/Tkhk$C@CXWjMUV!]@<@,Xc'H6Z1?V_E-:+aU`I;Ms2"tFerY@9-'&L
%Y><D'9143b"be<&^^JFbKNjn&gO$CQJ\:^"Vn_CQ[$q\?4b%mq#c&n.?*_ae'@Fs.B,aI$_lr4)?QChu(cYkEBE,AT*2)Jg`oV".
%ommq3\rshH@o(;..OoG]kID9Go4fd^ISeL.^S.jEDbp;r(6Qph=b4o#C`Xup`Dtr6GUsm5l'O]pEu(k5-=<)phW>P0-FX-g(iO1P
%e>TpFS"IGYr37nI7HhgT)dbf-\SGZXG=6jD[i/5Y1iDHJZ$"IQaPNO0Pjl(jYG`-$5?Mc>J9@tITDbDnKdJ/N_7m#@/"Z=;kGq?b
%"Y?XfX*-p6&XDh`*:-3e=l&I(BKo4"6g_ds0"e%>.=\nP0/'*9:?utLq/j^8@]unE[%ZrJKNB[2Z^rr4&:gg;#Y)T&FO2t:)_hEl
%n4udL_;#tsc_4nl;'mg*bq<(D(.#\kf=kde9hbZ`hGV<qToj=]%#C'IRbSK]5o2Co(nb8bV/lobRLfWCf@6N(ZVFDO?Z;_?Io^c4
%o:$]TJeOZ:B&oq9DqK!KlP1Y!JVg!XLU(\@DJh3p!3Fkb"kbgt73IU]+UH!RP\^W)>m!R#2Ed?>P'J)bhJ)J^'APFh:OB7'klM)t
%1L1u:;KVgf6k=X10C[6Y;rGhm)\=RaS4(e$2&-Rt,^P]:aA^g*.IORq@ucV))`f/?_@1fY85f%u>c?J,nl$*'eO\+X2k=Dt;+b*`
%9o,B&qJ$b$1<B0I2k6+BDX<%N^DIrt:c38uE%P>G<QTCWMXc-;?XEaRSD;DcNY)d*67ufTd-b4CH'I7hGHb1)G4b8DnNnXb;g@);
%8.8q8^#;Ijkk''QFIW[8'c"KhG!>g3Rh87&g6f>Vjh<WBScQOXpMMY2`pg\9i&JdDlW7@hNc-`oCg`4u\kNGS8)&Jd*?m;<7m?&Q
%%"`Fa^F[M:N7GO_TS7iT=SorGcOI@3A0]**bTh[5-S>^aGg\gr(ei3dWsUH5agm/6(dnciG.pI@=#pSAS]TSJ+LeYb3b&@04aan6
%^rFg0IW0FmoWWq[TJ$BPMHXbH5WHi\'cq1tArn(",K:J&FEC@KD_`@IpVlWhFnAA=<8B4V,?ZO2=-d_Kn@gmkDKd*o#645H"L075
%;uk341*_;pV').g(SWq40J";Of4RtE28H:iP$,baCY`#\cV3K-\H1i?T41Z:Ku]lV)(`A"#891/^rR.]F*]OqNnX^`E9noT0_n]N
%]7Nls)<mET.Vm;uYd:LDme`$g7YXM(Q'@u&TmDY5Ftc+*.4Y,#nP%Y<?.<os48F(#0$cQ>#28bjN_%BnX96;&0J'Kdp(cR%\>CZ/
%+IYNFRg_YSn3Wd`Gm2$_P.V(Q*CnK'[^Nkh5oCR`E>G6KUkI[;Y#2A7:W3I0cIhWb27,D'#B<9:Xq>)+4!iM$Qp07k8?RLiZ?Ei*
%D4)Y'YgT-+oPdO4d,<KFZ<T(?J_;_*8g8$o2N"4U)He<>D-J_&S>WC+,D'c'a!m$\Y2KK"Su)%3b>Wd1<t]OQY[C5\D7C=*r#7GK
%rU?P[6"]%(UJkt6JE*/H"^uc&+;0AFo&0gNM<q]p#o;qYaB/aoNq]u*'s*>F\Sm_$YZ)pMR(+M+#D.C%i00AVY_7cV_\]p`])"lE
%OeP-d<RF,@n1%KD]Q:9>LpQlaeo[CcFIGCg%5G"kTQL5U`Ddq=EJ70R@5Q+"4>'WDAR3RHG4*"R:pI1B<EF/F'\fZf8e&fM[qqfb
%Of;>m61KfI34HO/f6b@iNU-QAWM'%piU(ro&31SfmG$(ohI6!thS?4o^t0V_f#]#XcL=FQ2GBC?"*Q#"IBb=X-5H\W=_Uh>Ie]Dg
%($TjZN/G]e5.Z_Tha[,/af%chf%ZCH5#tAJKbs#=rQC,#!r$-Gqc0k?cifi"K'nUc?Fk>"TTA%\N+pLb_Cslm4u)!FPY?3o7mY(%
%b-)J68=R0TgFOS\Xc<$fS0XE6FF-TP0C+!WX1(63"0^O%lbKs_gGa1h[PpM$\$Fu6dA+d8I;^_N%!hHGj4Y>r8"oQIrF<oO>;rrt
%=)2'ajhrc`,i`kr4n+F.%niBRpZjY),k#<26^i>Ti2=`?r%]r_R@;9&gT1M_JF7SRSd30V.JqR)]d^+S,$Jbs=B"H^E56#ik=CnH
%QS7_IAOAI_hF[>$`t0I;'&If6GQ1-@O=Pph:"h_f&SO:l:969GY$b^[JDnX!N/N!rb]8KXI]d4*AM?ijOs\C_DlMS'MBEABOR0]C
%[$&+FV(N:Q=\=9\9lt3<NihWAOb"hF0FZptp@(Nm*#88"$su.f&<%qAC$*[B!mN[TfeN$=fdL:u./%)XVBS3R#o$ZL'=NnC.tl5b
%\qOE8$#V;U)L;H%43K>B-E#La#i+UOJ/IJt[A/&ePfP[6c_c=Jo$rF=9dE4>k=`/"[ZtZE+qo)l`9T^b`=^91"&nb*8FpH+H*uL\
%RmKVSO:&i3WnpK6'4:=Bg'L&*_V#c/]=@K(3AT\9;3DVX^nn\c0&D(3XF&RDmsT\6i\6+Ab7)oV7Q,h."R@B%[@u,YnreHgd:LiZ
%77/WeTDW.,L)HKZ[SC1:iIToW=XGQ_kkAJslE7t+_UHFKajBWBKSCMN'ak3A#PpS4U5j1.ZU,OpOL'j!c7^i'6hlTA4l-A_p051<
%PP6CLf3R:2[A/%:CMs_;b'K%$I9!SjFut8g<."88JkJsDTh-GXqn[')YK+TXIVq)8o0JJROE9*S(u4GA'%gAnM4cC+Th#DV=d(q#
%"%;^uVnX($aX\'\QSlM9+Cp[;&j[jC^Bd$;'Fu`>DK,$IF<a1n(F:2EO[If1NPT/'C'HnU_KhpfU<]TQq.gfL"<+t&q/jj<@`)Ib
%jjHD@]O=0HmYm"XHZ8HUSQj&e-@%9c>b]Q7e@bA^r(mo,MX5+g0F2fQ\=gHBV5%3*YY]uRo?.UP<\/7N:$"GM,9roeT\=\lpMbc1
%Jpd[q+9tE\P:)hPfIl)g4#gsLSJD>A!O<<sX,BSg1(1;d*3f#2-VlFD*=t&ocI,1WCD#:4b#;(1C-a<ZE9N!\0P8gD/Sk*VUBLiD
%n-`r@h2`@ke`5I.d7L*<GQK$:nakh)Rfj_fYZDeVK^?JmL5"\"lmXF8OPgrj%"XISPDgtFds;R8'X5a63;BJ(S,sZ#Q4&e<I!2D$
%\q(qD<d?=_MHCsb]@iH6\/9Y?+YQ_8nN.Y:Xi(e;;2_Ybgr=c_To+i1h[]5p"L%8bnf2m,*!b\%XM3R$KFVmP\9^CA]uL+m`*@*I
%p<%0W^q[96SMq+S(M[2F#L=""@:!"DmD9Hikp"Cnn)(*F/IHA19Hp_d4Y6aPl,Eh4&T?\VIqaiYGgLBdHbD*P_=uf;iuG<W*b`Jp
%DEbe]E+J%Sp,X4Q'lW+5+sRS/4<B]F8;Y1+ijL$in63G.&%9j20l(.77_E]p8+A/;qLeL3Gcid`27i6O,r?[ncY@FhIbIQ?Z;?+g
%mOe?>O@[fHV]u53>JK,1l2!GAK<iNe:j;AO0Lm?@bGIC;B/SoE2FZM@B=0#m;?1oDFtT+@:,ZTp7^r8h\@rD7_60O0,oAa&Vuf8G
%`;>@YGCf4k%&\@l+:).k[`_>!2ZS-pnsWhB`nMX$'6kQ^[:F%$eegk,g\XC30#<u]Eo#eDe,Us"&$c]S)=(ebQ+u*iZk6*!Fg4h#
%d4Z^1>5((`[jd[FA>*0Y.TF"jmt'VF4]!?7"'F"B-SfQ9N[)'C$]>N:#Z5n)mAS]O0C5VAU40S&(HF3ncd;S(KhL.f)'\K5_S[/@
%>2Zgi-?u\9fJg=/GSQ@O?$3>g+MK4*Vf-fY14aR0p`4Uq,Y%oPXN@m?!eSSb)Dg^HCfCfMeh;HHH=l-tGqDr]XqPfOo5N\tH6Ga]
%$X9H]WWVI0:G8:?Hmde$PGB2T"4&nM7:A5/2U/jQ@h'I=[Bh1jn">1G3t(Hm_K_LGocY35GJ^=in%,esonKT`/jCAG73jdMnkiX#
%390gkG6N-kCtcl2oW5/6Qo]GLK-,OZ=3p]i(rRjO3C7]:Cgb__67rEXLj8i+ldT";)TtN?NPB.[]7KFJafro7FpeaC3oE?gEF4:3
%Ri#Bd2I_>k<VuYum/"L0=:SN,abkg4(4T\k`oTp;M0?e*C16>M:gcR8G;o`.)]Gf9>\'"PgR5n#nK+2+P'5h9>lT.l&!Dl=7gTLl
%A#kYA,2DKY)2Oq\jm<Kq?tBkkjQk(U/:B6+g`AH%nAp3&#N;akq=W;(0W?_'Xi6)P,t8I"Vs:J<W;MTL&pV;DO+BUek@ntP\!@G*
%*fhr6jnIY^qdL*@`N=7@?tK_Ri>9!VSq<HA!rpX`\a_!#3,#Tl#X\:*+Yhfb]n70=;]=,@II/]Pc+hVEn=B4'fmrja]ka+GeRVd.
%bjYZu*3\s<dgC.hH1W!6kN`I^ZKc9ggq[^cgj621p@cHY]CL^2/rl>:K9*;/!3,S/E^`)/8S.!!#R@eD__ZX)p6$r:g::ER]Effm
%;3o3^S`>I"FM&W/)5Emo/;Pn]e"4HB6tY8jcsqr?9"26S`:]ldG*@+)*EQ.;DW%>[X/7^R?9f3"[bIuB=0;mgH1IuZZ)aP./Zq:?
%ehKO5UMRJ`'c360"&C/p'qLg"`@#QuA2em6>o/#]8h)bRPg'9Qq.jK+f:;PU11X9e/`&jMMrDSHh$PA?h_2:dRhAtJQ%JdOq&!#[
%V$h41bELG[V,cLe9d/af,DVIVO)C$U'e_Xbo>Kh!iFO<`kq*])/8YHO-h6^#Fu'IZ+^\-!BKZ?5=E5]_aLK+u@3meR*]]"9NEi`*
%5;t4^J&+<-9t';'a([dg[,``8>\W4G-D=7F>$Eid0C2-=\mXULaC6<F8<_9+VVMRsR6*b;@4Ij3X9#rX,Gi)V8Udr!]GPR,n$LnF
%]H$E=I!lu\QK\\Wp7#6&go#ne?r-pBYH(>3D@!Np:e5Ir8GV<_h3rN=_6!73&"FsOGBrba.bR"fbr@T8GaA$7WU%77<ll]FV]Kd!
%itl2Z:k(!L'jmoC:E2lLqd[9"hq(F,rck,>9ku8LcF4PrLhYKIeLP't5fQ(7[Y<"D;D3DLhVsa+GPfSL0KNGjlcZ29reSmOYXdO1
%C^>'!^<J6cT1=BXK$XGBfhK):<R.nln5]D+I.kC8bX7VlW<R:UGV/Qq]<(V5?&'E092'$5Oa(pDm4fqBSUNMceHWZ:_agYG#Oam%
%NMXu>nm(;bmUEmB[`Yo7omFHX9hUQAHLL/[9mLV`jV0'JX?9JZEN%?H$&9jrD7;3?k[bHaHPlG!B*8,[o<#qgHA>=7bmQ,@@`!4&
%_H+0ko1n'F(0*oAU$;sb1@W1?`/m4[hO)Lg?PKhY#9Og*f_,`,.oE*p#"=6[dQV%:Yfci8@qi7MA;f=*'S[rn+:X$HJK!a8hQ,1)
%WL1>?],\b]%X98PRlA5sfTo%Xjl7W\1oc`#gb3BO1RA4FE]F9k/lp$ss0_4.cl\-hYbK,A_QB4`^k(;M67>4;\@]'qOe2h;2[*>.
%P"R*S^oL]S]SC$9Z[":O8f0<Y69XUV=MWs3]9moq1;/c'CQ7EuX%DiJBRg%GloqMH_s$0d6QniIMO"bGG)p+dMuok$C6F@)$6<"a
%R3IXC]r]H+SP^+m:gYOb#.RdN0sjW1s-eZe`-&gP[rOd@n=?"IgC$E'Sg5WWl2f*E5!R^-ACaA")^V;>QiQ\'4M[6H$+16aj6^70
%Le0:B1QSt/;'[_(9ao/jd=D^!AZl05mh#eAYi(S?KBh;1q=*\.f'NXp#]-l!A%Ze7D&1=R9jf%Zn<?H02A)TANkPSudg]gF?Da(U
%Ul$qAQJr*TMg"F%<qpOM8`:UQ4E0%=2Ib)i=l^t=H`?HZ\(N#g2toC+'Wbi=haf`6+!bj6@Sb)Li]WLY+^'bJ)!EpD![qLr;1Olg
%JaKc0/2B\6,EAd?40i@A=lrup&f9n^G/^+kphU\X\rbXT*6^h`al#aOo?!X\de;TcM/#p-Z(+BE,I5_6r7RIqB+p^\D1Pn:I=><.
%9cHD\Z?;7PQtm;i;*7^K(@=GQ3mWb$JsJhSKq4)pCXR\S,DOWY'ARt70KgtFf.FmMGrFt`Wa?NbjCGPk\1[-BU0dslTDl]DGIRZl
%Ro'<P`C2X@,Yf_:[mYEH:urZ!N"=dUc:;A6?M`D*_?PN[Fp`3/Z,>F$Sn>2hX`^Ch=B9Lir5R0I0O8Z;#ca,;\YAR/RH"OrL\V7n
%`pIn*mPr'EFU?MOcaNlYJ\n4S9i<,0V(J)bL:e`VV:QP'5&i*)AY9ZZ^D>1J-9?OI3XD,MV*LKP*"Z>QiDI@<h:?:_`^+c9#;SuD
%b:e<Eno.T9V^b<A:'UOk^1r$_&W@BNo%]#VrVAZ$#e=Sj-;i$:Uh*3O'J.t^7:[d>MVT5<dtf_'7ZW[rNJas4V8SU47]>&6``VE:
%Dr?DC`hFmQ>@Rf_,mA-?6$XD/MLr:pQLKu4g`T0f\E>A_GO_'p7G!;;gO*=HD2b(fhkqI']S2TD_r@J;qj#.aCrUn6XpUO"[m[]3
%Z8EZQs*g=I[s!hJG4<Cfbc+j6HfJ]AD]*:@Aj[T.@I_B.XQm8FH;'7.Ra&/jE2Amq+gX,t5T5Z%$;OGGO0:H*iY8g)J$#M>p3K_b
%;Kh6p'uH7hZX,fLX+cqu3T<2]-P#6M8pe3tTK4"f`ENiYiU\Nl]@c^$$?S"lCf7AP/UEPd]ifr*eJn;BDthtr4rRKJ.@*K-nbDtm
%Sf_68JS4AZV\bm,n_5(&3cQf.$UT8^=g%meK-oN01j!YP;U`<XL[=bB759f\"rh$@IpCpW*.Q39'$M)1G+19uUY"&Q-CFVq\\0mr
%%"<MEHc_k_CO?Gg[gd<ZYH;m3_=lRJ-YlelLRdUUf[,4[]S)c`%NVaH2Z_F\#(fctf\Jbgf^huEWeEmeimr$_%RoIt?s8NP%;LXC
%9MoAls!TPG[#:[Il0b"B3,Aga>ZFrQ<d6Hm3Z!d`$Ua[Qql1+aOXj7m](^T\5rS*ZcYcgDRrE%*Zb%u<i$jpK)qc"eguTL?g$\gM
%YLnU?.Xf3-NX1?<">pm@/Mb2Cb[%u7TjFm-g7pA:Z=Jrq.Wn'B[:X4*nC=1d4(Tr38iJOpZ/Bu\PBQ@gf5DQ"ThgT>C+@_j;!qK7
%8SHD[-Au,']nUqbirPYC67_GkC;%L3nWjt!Oe<)/gV]'dZ*5CIliI4dYQEE'-RQcg1u'q(!%,f/Q`NO(2;,\#F3#VG+g]N0iuD81
%f.tW%ji<C-29WlF<0nE[Ea':8mbj"NFi-9lT(6(5H>at$8YMFe6QTJ]\2i]]Kj"&U/04Cm:OG+O]U3MTknq5kXQC)D^V1]`62T8Y
%>Qb_gq1Z[-aAardUU-A??5+"^>PaF`nGZp834l4uf([c$:4GRB%4m4g:#Kp&#@<W^a5:0tlY4Z(RF;05GWa7MM_Q&fjpbltg+%N!
%i[d@WYAiCJ!f4H;T5`d8b8DBfEP"d\b\J"p!CglJ<d)nlL)6nl$QmnC/r'r%I1TNEqW60,J&Jh3U17[)KLtTK?4h(AhVVe<rriiN
%VQe-Z`"T($Ne]eIG.;ma[eClVf%?T,lhP\$Fl(CrnDKGaIPcDsf:0[Z=8lZ(3[`#'aOP3a`#JL=a'oae1F]s(F`D?0<@nhcoahOB
%MYHBhC=@74,p:q%M'=l^FVIRZ]`@t66UBG!bY@KA9k$LAHs-EklS)^5%h$lsbhlm,*=Xj$3;X$V&sV(QNb?p2,qaO$^r3^A?o:R4
%1N^PT?JpTb5i*E6rmH$pAfs@fMuciVYA#\]h`9=.C0fi8!^;@Dn:M)QgeMRFgY8bu9JWmTUc"Cc%=7-]>_rTmlAW"\W4PfV\V,P\
%&Qm&V-670ebh=]oOXm[k2H6g`<pBbe#:uVlhSWlHl@]4']rUc.l%F`?<1Hp7gQ7Pme<^[`@82%%cm%*`G[e7-Jld?.>@ja%`lB;-
%5eQ_e'ntuX$-WuCl7XaCVZE(r-#2pu3F$oRNbhaL@^"NY6/Vm`BhYa;KnT<L%s+&Q0^1qlA5h/b^J[[g5(Z!k^BhE%W_t):Ni#!P
%<?4&&*H4Eq^t63!j,OWr9NoIbgOP!pK<f^5i(T>"ROi6Sb!d*Pm8(CT<sQf,G)AQq=M&a>9-]<eOf@FGKU9F0H[$Jam][[0&NKaO
%*kD-)TA*"]D32`N3Fin@pZbLV]@0%b1Fh[S7pAg%_HQKXlQ,$tCrh0Ca>#N-cJ86pM8I@MTMN>b@kq/+^4CpF`lBo3qFUGIP2*ig
%nSUMB9#$@R)^BOAL"f(SD]q2'2dN,8!.@q\F\k+q[3IA%1*5tC>+Tgn7#99.lUQraJTq_/VWk%$2^&9A,f8TP;V09u\EO4dP\/i]
%JR+ktk+QDig^D47[TB8n:d0$F/^u0u#'RpElFr(CNRPF<EP:F@i>i1[R)A?u)0,2^(N\CGKe*/Z.cR8PeQ"'R"'g7Y#7Y)n)DU$.
%C"RjB7"54k%:*-H_/%f;eWVd#eDnIqA$IZ%Z:fScA^/$iRC,jC8idJBW5*DQ(IGZl!13)'"G<[^P<:m2e=^@X5%#8Y,?=**6.`R*
%U%HYJH1_Q':[Zq;02:3jQ6U!m5pHGDlsae&OmP;J3N<tTcuqUp:ab'B2<Z!6S=BA>Os=r90QrbfH=65HNn@82UL^oML8*"cpeF1_
%=4%fe#>r904Xjq>2I>APWBO0Q!oM$2ZKIb`HU,:\-qWQ7>LC)Al#[I`=\Kj3i=?s$pUXZ=Zt?`g7,8SngM!QYc)QZR*e?"@n8+hH
%gJ_XX85No>O.d`:L0LC7F6!*0HN<77YTIE;N$0lZ%3->i,ZPkH/.lk1?jY5Yi,)5<AdW=/!DH-d4r/;!I02_3,Yk404rQ?uIK=&]
%TZ3(eh#4^VZmX/5A<YS^@8XZeQiWaSi[CuL54sQ(IN*I4<9i<HX;QB;AMqppN"L^brd-J\#e/6[#<_"!K<=rla-`J,r:$8bF_pK*
%VZLZpY+18U'#G;T9":dVpTknJ;ECV`LRG$9%<Q,l(Ei4c0FJHH,u;XaK7u.OqFKV*]"KNQ](,X7G8s1a;/kQAZ05m@iu3_:DofX,
%gZ9rQRgN6RHK[u>qs^1-\;Z9>g:B-g-Shp+;N4Lr8S@JDLHjN6=_a"p75DiabNn!Yhg^)0;Vu7hqn:ro0c=mh/tVH.N22_k<JfOu
%?t5SG2'E+YRYJ1kn+$PIpRe/s`u>0s6ZVeE$Tu,K"c\YJP;\dS]:\[VBNSrO9bH?Rp7kEM4^XQMP#H:Gi<AjZF*1kPm.n>u47\-\
%%ZV'+RHoh!?=Im-@lP;$3P:?#2ih,,V$uuqm*E_.;GZ-.9Q`[+^6Rp(]c!ET1a!-*0>A%?C'M!C>%"&=Uo=O/[7/$HFu:8/_e\r4
%X;/U#']j_9/a^'s<1*r*e^ag'!c_;7;PB&&HSS$41+62&fgE!\I8:U(4rKJG;8A*n-f9,mFOsN'M,$p"rYZ#g<kX'XAa[Af\M]+>
%/((LsaE9@_'cTJV;*5gZD5@:B\$X]FV,`gJB1'f8krh`$d-8q+^"u`S2Jeq:fUePA"u]To2pg?i7X1DdC5Ck6Rs)r"`RAeq%*-.h
%>.n_QH\Zj=6p,QQ;K>(?Sn2(^Q@UPV4[j+hh<t2)Hdn'BOLM%!,c3<6Vij7n!Za.!jcr+icV#+E_2=H5^_aiPL4]cT2W9==+A5n]
%?CPuG"GQkjm69[tC.Cp:7c1=+0.'n.3[75OK_h:rWcO_V>2HEoqGL*&/tXNq>[b9h8^o@G8H6f-f%$jRl.Z`[1$u,j=l3R.3:-t:
%VFSq:XXd:dLT\YFjo!pp]:RuXUd#<m5FuKe_&*PiPKR57rqaQ19L2+#&ViP\mD;f/ib<!6,_/C>$>gY0"Oq*GJj5tB.5Y0_Ua9u6
%[4%,rc8S0oPkL[q>[>7Gc?oB/Qp9SOP*JeYf$3[T>.tC1ls2;J.`V::%t(6hpGdt7rN2^'*a#DDIsM(%COr[E`-QmeC^;&>6?j`5
%jj-]h<@OEU$ep]UeOmgkbS%3YCLKB_HiM&%$uA[S]s$o7YAaUtHbpOIoJ".U<!ka1,qV4QX3Fj_@leS9_#7kd@Qe17?ZG`pS>'bf
%Pcd@.[kT#F\#_6T%es8p[MbB!naj&JPXQ/tcK&.6XQ8NFd`5X$(>/r.bWpp`5L]dg!>5t$)g<VL&j*;/@tjIX^e6ZiSk5)G_!^+3
%ZGqlQe\W;8lD'cDQVl1r$%UP/Zjb+^CPr6A4o5chD3MrN9*.>T1K<k5+[?%qN@GK(3O8c<C'Z6,(LU%6$,dk^&cHTJ#"Fd:*bmcr
%BtGM.1/eM]-nbX**jrfoIn#AU3S?DJJ,f$^4mPIiU0e"X2hg`RPisk1Dbjb>,n\XD+h]nO*]4IY:RYI;O%R^2bS]MW@--^Ha_F\Z
%IVJ6#ICqORV.bUEG[T-O#0A0n^0%5=SK'LSMdd\?[')CIajMELBWTZ*n7=/5N;B[2M>HX"kRa<Y5)U_S5DZ=*o/;\2[5D>*A)c#h
%BZkL?!1p:W7;FnmR^7Oj7/$jMVOtPRa=QKoGn4g\AqBcFMnnSWFRmI6Nke+rVZC&Vb(p?97qY<,2E</fe<l@NUD^a(c3j)hl1P>8
%(c:@_f9kq;atuZ*:)2Y'ph#3VI6n^o8T36*UY]LLR1E/$<oabdb$BMbbPX8)DN!N7\o?Cn1#>;3O7lgmf(n8$Ls9(7b;P67aA#r8
%oD1lmW/BC_(R]/Q"E@X,.4`":$i$O$R&<O_ep4U%7(2^=8:1S[(7h!F4p4RlJedS-G-WEh!rW)`\sCl;NZ`RRfRK9HNXPN/*,W"d
%_h*=+_)F0kK5@c8N?i?<pR[2^XR>=UUPfDCWiN`Qq5DNYb0*m.!@9d/F?2;K:&3XC)FN*7P#jJ\S4T(!4H)6,_qD'DEMa]cJ7CDt
%j$ogo)Nh\eZaJ#p3B_p0`a^8,/_"Np1HF,JN2C)#Bth*q,C!L5INTi!K$bf*_O"IHSP7T2`f\"gYp9$/9K'uY!&DWe81C8U>_&B8
%6_)]gBEI%Pr@%K+kRmra<4e&$ZM5q##^:jcQ+JM'h)90K4p4g*%L*`H.;sQo\I^+H(8GdNm0#f<,*K[LfgE^Rcp0YWFD@FUj`&U*
%q/gL.)UR;ahL\%&P-[$jWe<64!D(st//,hWC`Ijf>aB=/Bns=upial6i=]FF;*:@"YCO$Yn]b&FDR/,qcVJ.9;s]7t0i=H7Os"i3
%o]V8b%81TE/lcI\!`+BL3>J_5'_h2aM1Y\8TA6o#q6ii(\6:Bj]ATH?+d)(/V=-0(MX#A*'<(I/a?X_DXq_NMf@g4oO_ms9&@.(K
%IG51SjP4&!UQ7"3QL^_haK/hT:qTHVb'j&[4C0BbHE$-TauUP_:8jO2da[:)K.pe&,DJQ0-Tb:jWqsLM+*.+^8nGu'9K'A.KWC5C
%NT9MLXi4<LlO/r`@Y(S4B[a4D`q688)(n3EFg.h`+ISQYc5$Yl9R?Up_cR-ubAq>$2(t8Q&("IL*<"tI2/eR!;*C:eZig^i<b45r
%+R<anY65VE`1FG(:ps5#LQYF</1G7Kp[:oYZ83h*<&)5uGcTL:(UE-k-;A0A+L?\Vn(?Y5fXqd+BaY7d<g;>4l6:]eiU2[s+>Jm#
%Q^s@\-]3IFEDLD>8u1e17'<RJ$[d'8835,3n^<`sh;3Z%_a,#!N-VC?lQ)>'3pW0B*sB_nm-45mOcum?]C3scq@X<uRIsGfh7<Z6
%R-LNLmaoDekR2(i_:I>r964gUURo#^o(j3G$fJ<l0kn:UW`rk\=PeH/Rgs3rfJ`/e<DZX<%3u`OAK2$7_`%DIc<aTm_bZ#]!`6*q
%#&2i&%9msBVGp/&#F?TtGu8]tS5XX9gUChL=7_WtUE!r*0lm[]n'V@0qNX-PN+SHb.jDgc/@W?RfX-r-/3Q5\`u])>]1ThSDA3l_
%&#8@JP+.LZg^JT&*Wf8bDAn.CF]o<N0DiCSE>Ss,$@T6]PA77Pps39L.E6mV&USV8<uNdLX?&-EXm=3*W0!gKm&]LaoS'RGqKcd"
%$RCqWG)8^.T/."'?DD"%AY:2Qg9Oc<4"r693jTmCdH*KH.a`+:Tjs:Oh:aX'@)bZ7+%flU(J;'=)#,@VI,Aln*_[IiW?s%8:g@Fd
%-+!c!UKm3U#2\lfND&F02F4+J\t(BG2Gpbl\M,_slL'\nT!*L=c&L<j]="Vij7U`WK6oduGu.thH]&OeZJ0\!OR$MrK-S<ngt]1u
%\>qmB=!$O2[(QL[Y+H61?m=3M.?+Um@"lH(Qi5cE@kN<RWXF*Bi5H*S&8Sb-OfQN>j$:Rqeu86JH9U=j[bYf7aojPOXC>]!fsL*N
%bL1hOcE!5M9=_PGnDn8Z;HGbn]n.@P$(i^"]H79^2K]qnO8*_.%#VLi7_mjNh,e.oj?(29,(:gj*<c"412DJ@4-TA0>!>?\*&Mlc
%>G$&ITWIUoKn`G&e2Mq^KCjBSf"K:!Xdd$hPk'S5R-<Dg!)#JrH[k$5(iW%85e<NH*=d\>i]a"pHm4<n<%1l8I)p@*I-4_-1B^=V
%]\F[OhUN2FgM>**2_%7a1pG]rl#mc>N*K+b*V'0@C]j8_;ES6mekS]9^qsg;;),Hq49C'u^RR$5JuI?ojp>9Ri.947f2hbY(W`%H
%!gV=@YQs_4<=05JjTIb8aTe)RA;"N&Y[oVFZU0r>C0SJE(R<A?$_'Ua-63=d+r88U<s,3qX&uDhANh?T+g/@+(d0Yo3-($J">qNE
%!<KW&m[_MueRi2ZE&;o4`Hg9jO5>jA$^(AD\;OSt8Oa,j!Ee=S,re2sZ[0FKi"\^T-cnCV;J<i[E!:7#8Rn2rTo`q!+_iM:"()H[
%nA_g\c'>W$S4tMk.2F%M0YuZs!8nuc(>L$tXq"90fI!oSkd)3rXTi^Zgs'>&Ab\Ac>:@'K/U,CuYa2Z\p1ndMqknAi^O,b<L\g>W
%cbFlhs*K%enDO^:r,dD!r;:U7j3Polqfbi>kJ&[JoB4G,hTg&+^TN&I4hY*,hnHa.:9VE^q$.3)C&Pre_oEk6J,eq$^^qdG~>
%AI9_PrivateDataEnd
